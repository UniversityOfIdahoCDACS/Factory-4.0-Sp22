// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\nikol\Desktop\Factory-3-29-22.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
995097717aff6cc5b58c7582c9fe6037658bfd42c2c73338292b236dc9a0f73654066d0d0fe622e3
683d16bc34424bb5ae3d4ea44279a63de0cce72982a503f98cdbd999386cf4a59bde923771057075
a64ebdbca19b7e02c535e49b4d51a69d23ae12da76d880fa439ec92955f54d05ef29eb82fea0eb25
a27619c587458cc2d1fdca38cfe0d0f1c7a5c81f88ccf0570b745cadb7450028ecb3168a7756c53b
b09e91d9ada8b0f22c49712fe95bbdd80ea75bb37b00f39dd5971a99fe4db6deb74bc5d9263b64af
1dffa17ec18231f1487429c73dfbfe329d76e52213364fc67b99e219a24a5a0e719c1c23e6b974a1
503a7e74aa520ecfefa6416d3b5a36a4d20c5a9c770a83772b7e69e0da70be52c15f06d93a5e2a2c
16e96f7119669080e1311f1f177242fcd634c94b8314e325b9ac8580f2918363336c9b54a63d5ef1
0067024761552832bf2a14b58dcf0538385b3e8a1d6c9725361c2979e3a08bfadc2f7a4b22188782
aa3cf7a72521e2248e1ecc78280ea1fb05ef5b5c26dabcaee98ac590be1b9c944da710b0c8a6e3e1
ffc094cfc3c9a7f2e2f9d6b2dc1a0fd99a7b7188c5da7ffb5388aaf44f354ce1327d48d51cfc9ca6
4cea1ba8c808c3447a35dc9094dc892f6945c76f7b771a796e1472cbe3e7f3d197d6b15b1053e046
cfea5061c691eaf039dd20296b6ba09b0a1a429f610594be39b36b141196cf7725f7838aa7e7a1f4
3e524e2d4fdb0134a5628bf44ed621df0f64fe3357ae81c1375865097315fca994368e3fb2da52aa
60a08397c099cfc4bcd1672716f116c386e6c441061026f0c87cb9665553610bb93ee384f4942af4
2c688e756bf2553352d41739c1ad06ad2b3adf0d64a77bfe382541bb9c0718eda2ba587d435af2e3
0fcfe2f4912378b8f52c4ad8f243172aba6f0082bbb577839596f44bc148843575fc77aabecb0d1e
3ea20f336fb6e13399641add8c16f9766da3031faf1f8831daecee5d30b75f71ed8de4a2dca40139
d995218db2362f169512acbe6fdf2eec459216fcef4a54089039f7191bb231b852ecfb2e5c1ef331
7e0188b3addfde724b4f36375571c73191fd7400330920ebae04e79e645d042645c33304fe09f961
21e0a1a6b04c56c26fcb39ad4b09ec0015272cdfe87738540da30fc035be05ffe3f251a27322779e
f3734cf5e3dc9edcca7c509716e34d91f74f3a614c646cdf6c601702e14bdcb96a014d5e1aff14e5
b9fa2dd41e9efa31402cb419270c68f0d6d7cf1e9a845c352160e03f910b29488e24ac7fe425ad17
a0657992638732627f9461786422ca48ef266614d83dba4761a17dfe638a28449616824d94aca430
026022883e8a4836e5004a7292866f7daccbeaf0a0198d32e51d33ac977c6141176c8a967fbb9dc2
3c7ea404fc1402743bb223d7bcf7f2e199f547c7830b95fa576d9838708b47afd578e04017ff2fea
efac31a8c69eea0475e70a4e8db7a95730e4bba8ef2ea0bcec0b2c230fed1b204f43c13c63babc61
30d6e2c82184e6d2e7761baa7722f42e17c40e2d59486f4c113770b7e9e9a54ae4be2e952d920196
7574645991e0fea0703ff94755b430c9c5d59e26c0dfb73ff5fcef09449baadce2009d0ca44a19fa
636e5a4786180feaaa5f8fc979c79c087ad8c2ba385fd5b7a00ca41278e38403b7117ec7f14a7df5
d594457344d78b739ed31343faba6a882ea9e1a6dd65c8849cc9a4293c7d4ce3ca8278fbd8369325
2287339c1887a373ef3aee71416ac9eec7426a11475c1af77e3c07fb7c030ff93d65f33234a08d3a
2a85fe9b9b69410b42c09e896ea4168c6289a73028109d1ef94645b79f5523a1ffe80fc577dd4f0e
ac21bbd32e42fdb553df8c6b8780d4ba52e9ef86b9f1a2b221eb46dacfac2a487e5045f923d4ed33
d695a09db7b00beb05b5e51cf170cc9a7f3f0486748f6ac053fdefecfe416d3a7fdb59cde0ad803d
a15a2c91654618fa715dcf80094287ed529086c78c018b126d20282682b10f5aecdc76f2fcf84bc0
54ef566f37226ce5fe33301983307146736b8d456c165217a637815cf59490ea2a9ea8159d478ffa
24d573c259c5f2257add4909ac1f910340b55fa825cf9982b4c100161fd55e986f3b0657eea23d92
5d26ef123cc6fd7755f0ec7d9c03b39a952bb2a24a906e02c7227f16d5242c4292bd28fdf1ce382f
c6f41cd628c7519519785ff76a05d5f40c5890bdc1e8cde7e7c322021b5e1b203f731709696b7d20
200fa50d4e5d1c47aec0a6331e624a69c34e6889a198ddf4d8c7cbafb0d0cddb86606e074179d8c3
c0d79197899bbf91b2ea269715cc040ddd3d97ec60ed5c3fe5080de1134a4e211a111b8b574bd9dc
2beeb29b5eca52ab558251f1312f157c773d31d86c3c716aa5dfb236372d41d3c13cf9159ed65f3d
eda1dd65fcc4eddaf0923d7cf6bd0a9bd5aaf13c112309704dd5b3e9dd5a4eed19911a40516aab04
51881c2fe68c65b606d102e72ccfa4685b4c883630846fcd87fc7228f0a704a457e1a0105961f73c
0b8719d8c9478a9834028990de1578ac1ae6c93975990af1cb22183194565cb5b6e334be68c2a927
b697f6781197a7aad9236ae85c29254ae8110d042cb30508553b505f7c455db0dcce62568b423521
cf52a9b1911f4ce0e04ead16e73057c3b4bbcbd5a2f28ec12932d16db0fb45ee032f846ab97f5bf0
561401555bd7a1d4eca36fca3925c5ed73dae9ef6a9448d9da42051acf05dbb9a6566a40b71775ed
85bd4fd8bd718e22cb222a442370ce146dc7f7b70f8aabd0828f852af7538108b07e7a164952a11a
e0fc67eaa083391e6bdaa3b1ceb955d52366b63f3b3dc06052239edb96843a691a4e8264ae4ff563
34020d4ba7bf056b09125a7284469dc38a3310b6f42c915092d7c0afd9201693c529e0a258954294
77bfbc7d757051cdb9245ed40d42f81291d47b73951f45b252e33e123b8ed7f172094d409964f236
0179b3847a61325b9cecd0f7f3376782c455102163d75c7be4c65e7b3c0b6dc25fcb0bc155bd3768
8c6de3e482390f99cb8a99b3ddaee419da54ed876354b2a8e8bdb97c1630495a41eb9ddd98ef1aa7
0e6fc58c986489ba37177df848691b23aa8e3c41dffb63dfa0a1522ef14006f11a4a21be295d1940
5a7378e71c56bbc1d5ccb1d3881decb0dec26727dfc98907837b2a59387ab090fd298a30bfaf32d9
1a8d3b3c9318868377f6e22a4c28272feb7df898b17d51e8049cd2ae323da4a11486d3303efe855b
a51ab0429c0aa0dfe3cbdc43b8f21f25e5b428e65f7810397bc511f9bc5f38180b11c711cb81f1a3
a909d56f733485df01962027888ca352de2ed9df189b8e54a249e56271bc37f516bf5d2dff29a897
f71037f59196ff40c5df523b399baf28319469af765028764809aec44471339c8ef6db2089aa76c2
cffe148ca0a527cbde964ad0a559836a3855c895bdb890b1a7b2f37dabea4d27270d277b5fa82834
baf17e6cef40382e54a97119e842e9922c811c4c7a27c0e91d7f86c2c9cc6d111e4d9d78bfcd3892
a921bb0b2a397d2db29ba47f5f96acf449f9e96b31e7dae0c7cef0eedfc16fd3a9c80f97de3887fb
4806e72e159bf412b683f1447df9e40392527f4ae2c25b1457cdc6cf6dd11f80f15ca12786880404
2e0d45c9b762f3bdb48dd8f7f2bc5e62ec555dd3b06fb9129cf5778a0caddf13e86b07e20271a372
cec3aa47e0faf136d1c4869d29df6c5d59c7e42247d6e0ebe479f4230fc8af98060360590d5bd221
738a5adef5a2339addeff75bc78010b03b153b3eabebafbd874e1c867dd8cf92026f6be93fa54e4a
e8549a1b6a3b60286f834fbc91b2fa7603562cec43d2127095c5a8ac2eb822e124235e1283112356
1342b34f02ab91d766dd10126b7941146f8a3a5753d13be1b9e6db3dda4b1951597642827e1794f8
1d3d4c4efd9ad0f20b1b46fd65c8df5c26d7121568a43785d649605f80a0d241aaae09192fce073c
e20e33f728360d2e8417597b020530ea21eb8fcf1565a1a6dbb720ffc5700b2535cb18ef5efc88d6
f3d9da6e982b2cc93d1d84cb08937876d46866f0b5d62bad0c1ed2014089ad8ff227e49cf0e1ed26
ddc0f1ef41b71da28cd88e99ca7daa229d436d249200dd8adbae4f84fc3b946d06b0e76cdaccfe82
ddd4b6e2e74d20728d508aba32643adce3f90ef8198846b55b0bae2bb3bd85211adaa7373d4e59e8
4fdfab50906c71f8d4c189c89136ed6fe07e6e3302cb1149c3c54b4a944aff50f824335929e735df
62c3c80b638477811e9329e194130afca5fd86287ec8902563fab68cd2edfd057127104330c29216
e5370d22b46a5174e1a2a8e1b59008e2a71ab96f8fb8a20207d91fb40118f7d967ce93dad83cb085
f5a09f81f2e59dc81b5e53ebd75de4e2ec8fe9132adfe1951ca1b1c1549f9d74be279a8d62b85039
4f2230b7aeb985a452165c442662c5d7c37af5a94fce0e5cb9b50935bf063b5d058cabebf394e140
4411ffc0e4a5ab15724d0c2a3dde0447611c7856182ad682d14a03ceddd2e10b54684f9e8206c28b
20c45d7c9dcb55dc4b73835fff560500a629d46bd9bc1b382d7b683d4748bec3dc011a67e9018ea2
8615a87076c8db5477571a114219f7bdce58bc49f61949bbfa7579f9da2cf49726a060d03eb5fd78
0a72afe029300ad5f87968db2ed824c56e4979b1b96a10f623bd227547b3a624d4f904067e25c6e2
831f1d5b27143b2ce65cd1f35daac99c364919744cccc94fb3a58616b10f3b74dfff0bbba91ff476
3624061de3bcd511dc421b215cb1693e26948630db2f447f63baad4a6761d506eaa47982a2eae0f8
284546c0378dfbcd5e97fd6bf9076c044374073970ad5feb71e1c022acde6e40e412f3623e4ea4fd
20b55d385664319c84d84d8ac780dd9d7ac51ec2e470e0694b25d9ac13a6bbe772b52eb6b81f4b31
16a68e0a7be6ba07dbad12672a475fccd8e2a2bfb08682e76c40a24ae885ebe1210ee5255cd6191b
a3a6cf67c603d05a0183f18faea01f7679dff044990d8fec1b9537d089801b71449062621de6c94e
1bf9f0462972e3e002ca7d190923107fecae34b1e7994e19c23b274cabdbe0e38ac840428a571dd7
71d2de640521c608632938a65ecef64184e126885bac9420f42ec515f4e226bed791a778ed651ca8
5765f8fe39f896bcf3850452cd9369b83ab9b2e8b289772eb86bf427f36b4b1c62f1e3e65dc2e2b1
90d6850d09fbb84064e82bbf37403d061070f7699eb898d540bc8a9f95cbe8d0e867b2a6373d8be7
403208c94f6efd0c6eb3ebed1e897265b05e27fceef730bb84e5c43dbdcb362260858b9969b8c06a
12048617104343c996b7a1796726c99865e728d0e1bf9631844c15da7c5d91182df6c05b1572efa3
51d580aa127509c88bd266e012f594e61ea33c9130879e8632f84c988fe63d7286b7c8aeec8cd237
97f764bfeb1f93259f6d6b19cb959dbd37ff53d721a2b67d1ffa6fb72685bd3df06f1f9ff48a62be
c4d76f36f9941c6e3717cc03d8663d7e169aea7015a1ccd9d56cc903d23334b3124d91c75afd44d4
c33a40748566e2b8078f4b21f08c9a4907428dd226db1faa739220a7ff94cb28b9be453e1f2737fd
981ed17bc49e0057dfee6cb02e888cc7725027a7f82c08dd4d732c4f8cab38651922e51deb1a4481
88a61dd0e64120e4f8d3b583e54de00292ef717814b5f15a9e25002f61ea866b79ec5f37103aa615
96d3c3fd6e4004673798094a7d35bfe8c1b236f4d40462cb507e0f74894838603e2e589d0b88a1a6
d059cf5d3196cf8423a2943f1015e170cb7f1939d0cd881bdb2fe7a3b70658dbd93af1434cfac5c8
58508241460f6d5879c23e45f6023413fb4424fe03181164fc4df02231e143b87e44e13825ced5f4
63a4757719662f5e8a3a3135234ca7f435f1e80cfff5922524d2364c90cee0f58f600e64d404e085
ffe9bd25aece873a1f8f90f99ab6b42850c790331a1c0905a169af612854f01b5b069b1b734dbb83
41f7f224ff12ff54cfc5cdf18457dbbdba74b1b1c04188c8a1580ef1cdf8a790f6020d5565b98518
8dceb04dbac4dbfeb34bf5babd4926c967280216d2f47e51fe527246d1f7275f5bf51cc0fcd25a42
9219ea3ecb92cb438d8eeb138fdc73f8425d0fbbb105ba2271a8e308610ecab588f547302cc7e17a
4da36216ce19f925c10af2bc68cfb610ae81947a6da8062d1859fdf7fe606234783bc0d34d9ad709
7fa1f1e87869670c511858236711c00ce14c16071500782bf02e2f5e6404578c7928b7dba6a91b31
df6f0c2eb950f0c286a3b7e67f643e1abdb97dc7b5fefcfaf06eed744cc50cb98ef50a0f216dace8
5030d641d303e58db1358c83513883ad96f14efcbb2c2513ea976ab907aa2810a59230971891e770
0069c70ba0054f1d43bf46e36abd839dfaf3c0cce345e43c1aa30a2f0fa0870086aeee6513686554
7acb5f26127f0cf33cf08901a4dfebd731bfd5c5de3b4a923170a873b224997df856b939c53a0c6e
f88918b3829e0a9d01f05c979865f0364fa67524eae353d0aa35e61df20ff53237f6a8fda5ee2cc2
f41989a718b1c28bcaec1613e570d6f4d2a45c9e9a8955f9ce722b7b04a690d2f94fdf2e905e33e5
7f5316611ba1e1e4af3e91a8db1026c33bee61716a71fc5b4e0ac65a2b61870a5af68303a4d6b8b6
625cc29badde2f7689dac9bb7dc610c258ab589263fa727db9a58d52a423829d79884e58b6e0c121
d67440eef2405efbce3760d11ce07cab21132801b4565b01e65911cc01844bc7533c462c493db21d
f178a494854eba92a1669f578278c538e2e15696f2b25703bbd503a0c84e7620ff4227ab6490106a
c269fdf7e215fc157278099f60c0f206803039039ee991b86123c62ca6c91f3f54320d3b11d68a39
2bd4d1a3b4fa4e6b386e91f78a5c4377bf33d0b0bb7a683b1763c21fee36aff7162ca8328a2ab20e
9a176c1b483de4bb916f600e333e3cbf52456aad9164ab2013aa8348a55a8a4b7736958669621f4f
4359c84e97b9f96295a07695e9043e79f88d34802efe024fbc301a57d5cfd10ceb6165a24992ff55
ffc39549cd0fce7b4f8860f70239a4df2ef14d66c24434ba1e1c560121242ec35387d08034b315bd
1fff2eff42ce490276da062f190020daf00106ed72b1f6208ba3cf3f84ea6bd9a17a49df94161f2d
5b4f8ffadc24f6b2e9284d90e1349a5fa9bf18a9f2ca9e0a198e44460009a72bf9474d0c89311b8e
17cfdb27afa897fba501f71420b358269e9b885535b3b3a4e3642b2668c8f68ef35fef7a79591d95
1f573a35a19335b74c03cdc058d2e1e62530972daa2c71b231b46fa7ab05c569de1cfc9df99353f4
02bf9ce61b6851bae08a9ed583ca67e2b756ebae690af7e049d517ebc105705294535d207be101bb
18676520c2036200d6912d2ba4eaae698949dfd0003fbcc4586ace0ee8971c5ddc522f37e6706cc9
9a23879507ab712e13d5ecde57ca83790d8f308978f443c65049cdbaf8f0a8df16b2b16fce301946
6668ca61b6cba76e5d652a1d87dbb1e8bb9b601a1ec87c9fe39da8a304e12cc4c69e82c8227c43b5
5cf5a7127694ffb1984bb4a05ce29fb22264598472573a790cb59494c1ccac67dbdd0b0720d048ba
22628b072205f556ae77c139fff782ae99ebc0f82d5c574269182593f8518efccecdfad331c18d86
88815f9dae89d3d973ff75daa9f57fbffd7289865cdd391bdcd78941572d2e8e00964539e107e401
a75a7fde82eb2c7337c284e3be6c5d83204da731435f83922fbed175cef441a8ecdd1a7f6b15c722
932a76df348aa9b7d6ad753b9634eaca9607142e2bf287b1014ee14b928b035a9080a4fc4f61b858
cd86987a5976fd803e2a72dd548970789168b904e9c83310c379516f293dc1c9d63dde91364293e7
377b3854815285948a02f5ad43114de1cad97d02601d18c204e7e0b156a537b1f345154d38c07fb2
33c5b474e51b933cb08327901b8a284840e9cf6e1226a97d230f9edd92b9243c4e408ac1c72cc4f9
2214832e4d56e85c87a957cb051d2ce3f4e2ff7dc7eed654c78b560052ac684ea6e911fd52fc8447
1eadc85f7b75991552eb67b518f598299ab80d450f40af739b0a4bee61035624706f99466d441f99
254568268336cc8894b9120cc7887809aff6fbfd9ed53af0b3affbe0df86557705636cda2635aeca
d979e2d0769f124531deec4f37fc6c5c5902492ed54fdac6e22b50b195a6ae2267d516d671052800
f84f52ff7c677f7cca6d83b6765bf15be9eeaa93dbbf6fafea5840ac74c0931b4dec37037f996c49
942d86e60bcd18c601df339de11e958cd59ddd2b3781810efd4cccc879d60f4003aef36332de5806
8a9c31b074edd18464e17cefe705c02160b6adc7a0d82a551b2b700437cab26ad799c42e95de6900
218bfee4914d514885d32f222af213d19367ca04c834d062862ab0399b10c279880be23d4badaaa3
c8334ae0e66e9605b91e546a5637ea72f20aece9adad23f55cd8785178e923b07b4253f727bb07f0
685fe94809f1a05e1da166f17f618dca6b13453a4402c364cda18c68f0004336dcba3cab065f7f26
bac1afe966c645942c7f482d9381c5515898babb99fd8f4b60c2a6501c803fab2be11c96a8ca0fe3
29e083662bfd08ae5cb8788cc625f7d73d579df2ed81e695c1e597125286000c84d1343bae98653b
622188a422031a1b8a2e553138708eee5edc5bd4dc621dfbf0b6ead80add2206cd3f85e47109e751
64a95e61df5db483e3ed6c19829091c218e07775106080084cd38681978ea10d9945426a97e02484
27697aa870f02f1fa18e7e8fc2d176024e53bace22928f2ec45c3b6a1417c37b973ff9055c47a750
7fb8c6dcf6278110655919ff3522cfd6f22f1a0c39e00ab6008a27318e2f722877234b7d74e09f66
f09970cc08baa96140b0e31217fe70a006b3d52b589d764d4db3f79bfc88c45615504075b8dd3947
d55ebc486e61d0a1402c58aabd9b768aeab21ce6a6f34f84487b5ed3f4d4faba1bf1d100d3241287
1cd81ad954dce8ec774b4b05607974d317c32778bddfb301404d98d48df52f3097e4e182cd83c42a
6e879241c5197b72ece4841b08ada9d854a5fb34de863b873577cfed040db4f99b7d5403f0976086
34de82b2f9ed42c2cc58dee06bb0855c06b781a1a43e01738e52cbaa0b0977c20be168dcbb1840d5
1058e453cda9c5a51d7bbdd13f27a94db6b781646055dda99cabd484a1ae37e784593e0c198e10bc
3ee2447a8bec767afebb9857630e55496aa7365df09f889bc48d2414bc444f80a9d48126be38a3bf
a4cd9c9f859863421799637146aa5aac13ae00ccfcdca2ccfec63828b5b8a0f43da888c0df74c960
ce7e9275b8cdd93559372d7d0883e72ade68add41167d3e2718ab4991f0c7722858c5fb685f1c337
28f6a4460dcbb07a35b1307cee8b6a97b7e70d7e5e173d7b0d9c44fe2927497c94c9a733c8e349db
d6a41a939e61e5c730e696760f6de36f0ce4d131846cd86ca82f8fdb0e5f6b7f8f5f85bcb95d473c
84cf226e8fdeb3f5af7603dc708c1963862408679bc127faacf4833628fa486d9bedcb096d8fc91d
aa10dd7940094ad828390d3840107f191c755e23861f4a6a3d7eb418d42f385f591568be893388bf
4ee0b0be6438cccbbedba5c11989b65bce1e1da13e38cc40e0c709c304bd7be49eaaaac2bbb4e716
b08972ab8b01b7e8e64e7366cdff70dbadee84ce4d31046239640a4ed76b0d2de269bf9234324c69
f6558fba72336a33817d322e948bfb53f017c870a0b3de479e91c04724f6338a579c1a14f84fd744
c5ac8832366f053c2da64b43cc82e8efcbe57a161568cd4fa8e2f16b4bb04ca18c42dc9b4fa97c32
e3e029c86be769b3b61079a8cfeefcc194e62508c90a0473c4e9310b2e8481e737f0cb29e94d2184
91dc12bff5d4cdf117e402ae931d1ba6ad7c3aca750f50981bd78041c65c2bbc5a8cc04e36597f08
a69ab59adabc7f9049ff1a6f863d508bd52dbd5bc35f049bc93b9a77a7bf1b8274217a686c1a3727
a1d253e814f69d28dcc3958f18668444acc3fec6587f594ed0ae178b7b9de3da14d719821861accf
88dd680ce362f36231920c352b01cd7a3fc3fb5c185ab9941bc1a812073dfd028d1119e292da37a0
db4b22d37abfd53c63ff533136e315f3bb80b3dcebd446dda3c70fb77dc0963700a6ce9f91888f3c
d007fbfc0fb1549782655ad885fcdb79f4aafd0ef872e82d3c42e595c18ba2721cc9991d154b40ae
c2263178c78feed1e759cc0789bb43c0ec81c142222d5129e78bc7f6196a6d50ef258551f51946b5
795eb7063eef110be1053e60d0d52373cfca41746c78ff0910dadb2bfea2b19e4be2473e23f692cb
872821c0f7852d6c2e7a757e3cc9757eb87194f2568100464a5d61e7ad9db8c19a74a3ea0f33d223
88e339422f42c5da43f8f9842c41f93c2a7c1d8b12097b444c19d2a452bf92fee4e4119dda57e8f5
4ccc7b57b1b5c8f1516d698023e6eeeeb46612758458c50a6d1e3dfeb4383b64cdf19f0df34c2a19
3bf314d93a3b0093a6f36dcfe29f93a7c61558a1d61e23bd84d2935f9d39c5b995c1575472154eee
32217c8a73f50ba64061ba9d89f3e934bfd2bd4811120eca5083f7d871ed48348b9862314741add2
fd387e9cda3bc22e6be338f571e475802f91104be0b87de470ebfe076aafd23b0953720eabb71279
1d4ad738f43a412c1f25ed29f0f57b563b400b90a06cc8c35a9937f0f1b2a0cb433a690f7a3eb178
7380ddb8f8f251cb40958d69fc89e70b7a8407b47cd7a7e5c5c422f01bfd570902300c3a3b55ea77
3acdeab12d7e0275590e39d43b010a2e3849b14337a0e66196198152112e2ee6cb8d27caf6484984
69866aa0a88ac1d4390ac6813d2ba8366c4dd92f308b40694f86e84426ffc60ba45af1f417dc59aa
b19a5e61ba0a7e0ac5589a3cd0507b523af4b3f0fdcb358e456614d7e0b36055f8d179ecb87b35d5
1d3a030c06b1623b251f7933879cb59d24c4a992b482283012f9f3963dc1ccf0020dc982a77de330
f04d149f35c58a1d0695d92382b7c5467673177cdba8567c180827c7c1007e096a88fb5457cf747a
bddcf3e21633d15ac2771bc604953f89e990870befd2b65dd9e8eaa935cb108886a942b5a7597f33
85ffb213eb03092c92614bc8226acfa2a159707921dba37d4d22674f53caf0805ccaac7d41d37317
bb472e2608c6eaf0940cb87b32c0a4b873f515e7979e4f57436f278848d0f6f0f19565789c6fcc92
a8dbb39193d27b9c2ad5e44be4009bef8a8555dd03d4f19cb523a2ac93c7331e9a5475ae81cdcddf
56617fd69b7f4e83c3e415de3b8c373428142621056b71989fe8f280b795a1779011025fb9b75039
7be1d91e8aa0429286cf8c16343d805d1c1e68a7cb28b49796ce092d2f2ed0f3d1332ad62c4ce269
523d043b51754d2f81f51016cd72a63745fe889ec5f97b3416fd6a2c08f4dd8b875a39f6a18333d0
05c6f01b2904f1f96ab942001215470af31c8fa4f01aa1b3383cbab9d85dea07d1479688ac0cc732
1b48a728438741cd436e78da711a9ff619e240cc783dd0878120e763ab3c57521fbef5a1ef3df9f7
3d3f9481f9425c6a106b1f2f41a000deedc7827a0c3c0c62e73aafb3ab5da32132b7317d098864d1
c8f732982ef9a526ad7c6f81ff8b208d27594c15d4a53390a445cb8ac1eda3e47e383b6fe533ab76
337fad595d0375b76afc1b03888fc545a55728f19eb053af09e91d93e73d791f4805159f196c14f0
a232f45b296a324e314b264e30efb3b3ed6e5acd2dc6f56947d08c515988823418915237edaa3f12
95b13a5538f7eaabf5e16675b4fd95747d25c81c40f438e8f2ad7cbbbcf9ddbcce0b7c073105f536
bd802d7fce231fa5415a3ab04ae49380664563957bc8d94f03516ba7d7ae5ed8f36cd8fe3c4a4903
b6365a94a4b2982b5a3ce25e8817f745805dfd15cb175a2a5bcf1f33e59084f01913616026bc6270
aac6d33c2bf2ec299589bc5b407508749226ee987468d8e00c5f2b7dc2f4d97a39a880f990938824
d752269368fd176b885926c4db441596e3055c015e568edd22a755925a2d7a2a884c76f94a20c6a2
3a791291b03cd7a1fb4b80f5c177d72c251f1501f5f2f26e3d9a943cddbf83d16490726402b590bd
f59713f904ea30a9d81255f4618c459b4f139396e0a54fa5ccd0751a5a3b3f71e4dda15064afdd86
44780edb736387a39eec5ef78d67d3292e4035d1166deaaab976332dbb0f91cc7a15ef6d125d103c
501224fda2c68a60065e5e0812d658187dd6faccdb875c4f6727d14e6b0d90fb2e80832f04954a19
4ce27998de803227af3ed68283fe574294c40c22ea95f7ad97eebbb6f6c765ba2413b6b7476656e8
9b3b786bb8baf1e102181419b677ba0770ab2853f03d38296e646bc214e500521a526b78e3586128
235349281c26b31b51521c58458caa43c9274e782089f21696e032dd16f9d0a6dc52337543dcf4a7
168998c749c82eb9f5b4f52db69fbfc5097377e04c1a0ff0d4a0e6793be9e5a99e16e9ee5dbdd37a
4693ccddf01153f0e3096382523e536b92e4fa0a065637a67ed3e6bdcebe5e7f1ffd045ee82b02fc
3f70a57e7917353038058fdd4027aab6a68ddaec689681ec21947adef18160c963a25dffeb47d1c2
164787a045b6237c3e92013093a9aae78dbc498a245281f3c9a775b3287f1b30b2368b6860e3b9b3
a40d94b6883ece581c2edc72dd7df3b0cca92f382ee511a4f0fc9df457f36473abd102320d1262c2
a77951d42e357aa9eea44c79b2f34895507c1513561a33e4097681995d01eef3b0cab1c3d6290161
58c641b4932e5ea5313237c40b27fefe7d369d6d274d8f459e7ca734cd9421614fd07c9a9b8a2988
277ac5125dfb6b664176ad6318aaff3a5b33dbf80be4262983241054a6bccf77
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 25
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 29
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 32
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 49
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 53
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 56
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 73
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 77
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 80
NOP

// Rung VGR_Copy_State_F#12
// Offset 81
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 83
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 85
NOP

// Rung VGR_Copy_State_F#15
// Offset 86
RET

// Rung VGR_Copy_State_F#16
// Offset 87
NOP

// Rung VGR_Copy_State_F#17
// Offset 88
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#18
// Offset 133
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#19
// Offset 166
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#20
// Offset 173
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1"

// Rung MPO_Copy_State#2
// Offset 55
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 116
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 125
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V1600 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V1600 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V1200 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V1200 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4 0x0 MHR1 N300 1"

// Rung HBW_Copy_State_F#2
// Offset 13
STR C28
OUT Y39

// Rung HBW_Copy_State_F#3
// Offset 15
STR C29
OUT Y40

// Rung HBW_Copy_State_F#4
// Offset 17
STR C30
OUT Y41

// Rung HBW_Copy_State_F#5
// Offset 19
RET

// Rung HBW_Copy_State_F#6
// Offset 20
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#7
// Offset 73
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#8
// Offset 114
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#9
// Offset 121
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 150 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
SET C601

// Rung VGR_SLD_pickup#10
// Offset 73
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 76
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 80
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 86
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 92
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 102
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 108
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 116
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 128
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 132
STR C605
AND X26
SET C600

// Rung VGR_SLD_pickup#20
// Offset 135
NOP

// Rung VGR_SLD_pickup#21
// Offset 136
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 870
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 870
ANDLE $VGR_Encoder_X.Acc 900
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R103 50 R900 R902 50"

// Rung $tFirstScan#3
// Offset 21
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#11
// Offset 61
STR C31
OR C1701
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 71
STR C32
OR C1700
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 81
STR C33
OR C1702
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 91
STR C34
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#15
// Offset 100
STR C35
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 109
STR C36
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#17
// Offset 118
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#18
// Offset 127
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 136
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 145
NOP

// Rung VGR_Program#21
// Offset 146
NOP

// Rung VGR_Program#22
// Offset 147
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#23
// Offset 149
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 870 N1007 1 900 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#24
// Offset 169
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#25
// Offset 179
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#26
// Offset 181
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3520 N1005 1 3490 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#27
// Offset 202
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700
SET C701

// Rung VGR_Program#28
// Offset 213
SG VGR_Program.S2

// Rung VGR_Program#29
// Offset 215
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#30
// Offset 227
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C35
RST C1701

// Rung VGR_Program#31
// Offset 238
SG VGR_Program.S3

// Rung VGR_Program#32
// Offset 240
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#33
// Offset 252
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
SET C35

// Rung VGR_Program#34
// Offset 263
SG VGR_Program.S4

// Rung VGR_Program#35
// Offset 265
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#36
// Offset 277
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
SET C35

// Rung VGR_Program#37
// Offset 288
SG VGR_Program.S5

// Rung VGR_Program#38
// Offset 290
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#39
// Offset 300
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#40
// Offset 309
SG VGR_Program.S6

// Rung VGR_Program#41
// Offset 311
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 50 N1005 1 20 N1006 1 320 N1007 1 350 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#42
// Offset 332
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#43
// Offset 338
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#44
// Offset 349
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C35

// Rung VGR_Program#45
// Offset 359
SG VGR_Program.S8

// Rung VGR_Program#46
// Offset 361
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#47
// Offset 382
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#48
// Offset 388
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#49
// Offset 398
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36

// Rung VGR_Program#50
// Offset 408
SG VGR_Program.S9

// Rung VGR_Program#51
// Offset 410
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#52
// Offset 430
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#53
// Offset 440
SG VGR_Program.S10

// Rung VGR_Program#54
// Offset 442
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#55
// Offset 462
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#56
// Offset 472
SG VGR_Program.S11

// Rung VGR_Program#57
// Offset 474
NOP

// Rung VGR_Program#58
// Offset 475
NOP

// Rung VGR_Program#59
// Offset 476
SG VGR_Program.S20

// Rung VGR_Program#60
// Offset 478
NOP

// Rung VGR_Program#61
// Offset 479
NOP

// Rung VGR_Program#62
// Offset 480
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#63
// Offset 490
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#64
// Offset 498
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#65
// Offset 523
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#66
// Offset 540
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#67
// Offset 544
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#68
// Offset 548
NOP

// Rung VGR_Program#69
// Offset 549
SG VGR_Program.S100

// Rung VGR_Program#70
// Offset 551
NOP

// Rung VGR_Program#71
// Offset 552
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
SG MPO_Program.S0

// Rung MPO_Program#4
// Offset 16
RST C900

// Rung MPO_Program#5
// Offset 17
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18

// Rung MPO_Program#6
// Offset 29
SG MPO_Program.S1

// Rung MPO_Program#7
// Offset 31
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#8
// Offset 35
STRN X24
JMP MPO_Program.S4

// Rung MPO_Program#9
// Offset 37
SG MPO_Program.S4

// Rung MPO_Program#10
// Offset 39
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#11
// Offset 43
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 45
SG MPO_Program.S7

// Rung MPO_Program#13
// Offset 47
TMRDOWN T2 15000
OUT Y16

// Rung MPO_Program#14
// Offset 50
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S10

// Rung MPO_Program#16
// Offset 54
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#17
// Offset 58
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#18
// Offset 62
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#19
// Offset 64
SG MPO_Program.S2

// Rung MPO_Program#20
// Offset 66
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#21
// Offset 82
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
AND C700
JMP MPO_Program.S5

// Rung MPO_Program#22
// Offset 85
SG MPO_Program.S5

// Rung MPO_Program#23
// Offset 87
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y53

// Rung MPO_Program#24
// Offset 103
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#25
// Offset 106
SG MPO_Program.S8

// Rung MPO_Program#26
// Offset 108
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#27
// Offset 112
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#28
// Offset 115
SG MPO_Program.S11

// Rung MPO_Program#29
// Offset 117
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#30
// Offset 133
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#31
// Offset 136
SG MPO_Program.S13

// Rung MPO_Program#32
// Offset 138
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#33
// Offset 142
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#34
// Offset 146
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#35
// Offset 148
SG MPO_Program.S3

// Rung MPO_Program#36
// Offset 150
STRN X12
OUT Y46

// Rung MPO_Program#37
// Offset 152
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#38
// Offset 155
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#39
// Offset 158
STR T9.Done
JMP MPO_Program.S6
RST C900

// Rung MPO_Program#40
// Offset 161
SG MPO_Program.S6

// Rung MPO_Program#41
// Offset 163
STRN X15
OUT Y45

// Rung MPO_Program#42
// Offset 165
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#43
// Offset 169
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#44
// Offset 171
SG MPO_Program.S9

// Rung MPO_Program#45
// Offset 173
STRN X13
OUT Y45

// Rung MPO_Program#46
// Offset 175
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#47
// Offset 179
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#48
// Offset 181
SG MPO_Program.S12

// Rung MPO_Program#49
// Offset 183
OUT Y47

// Rung MPO_Program#50
// Offset 184
STRN X14
SET C901

// Rung MPO_Program#51
// Offset 186
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// Rung SLD_Program#6
// Offset 30
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 32
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 34
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 36
OUT Y30

// Rung SLD_Program#10
// Offset 37
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 39
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 43
STR C1704
TMR T11 1500

// Rung SLD_Program#13
// Offset 46
STR T11.Done
JMP SLD_Program.S2
RST C1703
RST C1704

// Rung SLD_Program#14
// Offset 50
SG SLD_Program.S2

// Rung SLD_Program#15
// Offset 52
TMRDOWN T12 250

// Rung SLD_Program#16
// Offset 54
STR T12.Done
ANDGE V1600 19000
ANDLE V1600 20000
SET C1700
SET C1707

// Rung SLD_Program#17
// Offset 65
STR T12.Done
ANDGE V1600 7000
ANDLE V1600 9000
SET C1701
SET C1708

// Rung SLD_Program#18
// Offset 76
STR T12.Done
ANDGE V1600 22000
ANDLE V1600 25000
SET C1702
SET C1709

// Rung SLD_Program#19
// Offset 87
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#20
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#21
// Offset 93
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#22
// Offset 97
STRN X36
SET C1705

// Rung SLD_Program#23
// Offset 99
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#24
// Offset 103
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#25
// Offset 106
STR C1706
AND C1707
TMRDOWN T16 1000

// Rung SLD_Program#26
// Offset 110
STR T16.Done
OUT Y33

// Rung SLD_Program#27
// Offset 112
STR C1706
AND C1709
TMRDOWN T17 2000

// Rung SLD_Program#28
// Offset 116
STR T17.Done
OUT Y34

// Rung SLD_Program#29
// Offset 118
STR Y32
OR Y33
OR Y34
TMRDOWN T13 2000

// Rung SLD_Program#30
// Offset 123
STR T13.Done
JMP SLD_Program.S4
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR ST1
ANDNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#3
// Offset 26
STR C10
EXIT

// Rung HBW_Program#4
// Offset 28
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 36
NOP

// Rung HBW_Program#6
// Offset 37
NOP

// Rung HBW_Program#7
// Offset 38
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 40
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#9
// Offset 43
STRN X11
OUT Y7

// Rung HBW_Program#10
// Offset 45
STR X11
SET C110

// Rung HBW_Program#11
// Offset 47
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#12
// Offset 50
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#13
// Offset 53
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#14
// Offset 56
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#15
// Offset 59
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#16
// Offset 62
NOP

// Rung HBW_Program#17
// Offset 63
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#18
// Offset 65
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#19
// Offset 68
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#20
// Offset 73
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#21
// Offset 86
SG HBW_Program.S0

// Rung HBW_Program#22
// Offset 88
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#23
// Offset 89
STRN C100
OUT Y50

// Rung HBW_Program#24
// Offset 91
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#25
// Offset 93
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#26
// Offset 98
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#28
// Offset 103
NOP

// Rung HBW_Program#29
// Offset 104
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#30
// Offset 106
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#31
// Offset 111
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#32
// Offset 116
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#33
// Offset 118
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#34
// Offset 131
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#35
// Offset 136
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#36
// Offset 138
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#37
// Offset 149
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#38
// Offset 158
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#39
// Offset 160
STR X2
OUT Y48

// Rung HBW_Program#40
// Offset 162
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#41
// Offset 165
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#42
// Offset 167
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#43
// Offset 170
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#44
// Offset 172
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#45
// Offset 174
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#46
// Offset 185
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#47
// Offset 188
NOP

// Rung HBW_Program#48
// Offset 189
NOP

// Rung HBW_Program#49
// Offset 190
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#50
// Offset 192
STRN C100
OUT Y50

// Rung HBW_Program#51
// Offset 194
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#52
// Offset 196
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#53
// Offset 201
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#54
// Offset 203
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#55
// Offset 205
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#56
// Offset 207
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#57
// Offset 224
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#58
// Offset 229
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#59
// Offset 234
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#60
// Offset 243
SG HBW_Program.S9

// Rung HBW_Program#61
// Offset 245
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#62
// Offset 257
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#63
// Offset 267
NOP

// Rung HBW_Program#64
// Offset 268
SG HBW_Program.S100

// Rung HBW_Program#65
// Offset 270
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#66
// Offset 273
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#67
// Offset 276
SG HBW_Program.S101

// Rung HBW_Program#68
// Offset 278
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#69
// Offset 295
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#70
// Offset 298
SG HBW_Program.S102

// Rung HBW_Program#71
// Offset 300
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#72
// Offset 317
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#73
// Offset 320
SG HBW_Program.S103

// Rung HBW_Program#74
// Offset 322
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_Program#75
// Offset 339
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#76
// Offset 341
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#77
// Offset 346
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#78
// Offset 349
SG HBW_Program.S104

// Rung HBW_Program#79
// Offset 351
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#80
// Offset 368
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#81
// Offset 371
SG HBW_Program.S105

// Rung HBW_Program#82
// Offset 373
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#83
// Offset 390
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 392
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#85
// Offset 397
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#86
// Offset 400
SG HBW_Program.S106

// Rung HBW_Program#87
// Offset 402
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#88
// Offset 418
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#89
// Offset 421
SG HBW_Program.S107

// Rung HBW_Program#90
// Offset 423
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#91
// Offset 439
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#92
// Offset 442
NOP

// Rung HBW_Program#93
// Offset 443
SG HBW_Program.S98

// Rung HBW_Program#94
// Offset 445
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

