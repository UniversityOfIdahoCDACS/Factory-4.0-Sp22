// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jeffr\Documents\Robotics_I\Repos\Factory-4.0-Sp22\Factory-Sp22.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
70b97e989316852c5c659c6b201789de8c6214ab2b2edad1c0c2ca8420491edfbdef84e4e60fcb0a
81d4ff55ddaba25c47d4a74dab904fd409250ec06b4cea1065323070d1851d4c72377bde98ec999c
4fa75455487297eb2cdc0d72a4b84f74ca47fb339f316913aa7720c0bc1ca4ec06c0026b174902cc
4b9ff02c6eac652b381423d1260939182e4c21f6612519bee29db5445eace9c1055aff639ebf2cd2
597778304441591bc5a098c600b25431e74eb25a92e91a743c7ef37017a45f375ea22c30cfd28d46
f4164897286bd818a19dc02ed41217db749f0ccbfadfa62f92700bf04ba3b3e79875f5ca0f509d48
b9d3979d43bbe726064fa884d2b3df4d3be5b3759ee36a9ec2978009339957bb28b6ef30d3b7c3c5
ff008698f08f796908d8f6f6fe9bab153fdd20a26afd0acc50456c691b786a8ada8572bd4fd4b718
e98eebae88bcc1db56c3fd5c6426ecd1d1b2d763f4857eccdff5c0900a49621335c693a2cbf16e6b
43d51e4eccc80bcd67f72591c1e74812ec06b2b5cf33554700632c7957f2757da44ef959214f0a08
16297d262a204e1b0b103f5b35f3e630739298612c339612ba61431da6dca508db94a13cf515754f
a503f24121e12aad93dc35797d3560c680ac2e86929ef39087fd9b220a0e1a387e3f58b2f9ba09af
2603b9882f780319d034c9c082824972e3f3ab7688ec7d57d05a82fdf87f269ecc1e6a634e0e481d
d7bba7c4a632e8dd4c8b621da73fc836e68d17dabe476828deb18ce09afc15407ddf67d65b33bb43
89496a7e2970262d55388eceff18ff2a6f0f2da8eff9cf192195508fbcba88e250d70a6d1d7dc31d
c581679c821bbcdabb3dfed02844ef44c2d336e48d4e9217d1cca85275eef1044b53b194aab31b0a
e6260b1d78ca91511cc5a3311baafec35386e96b525c9e6a7c7f1da228a16ddc9c159e435722e4f7
d74be6da865f08da708df33465ff109f844aeaf646f661d8330507b4d95eb69804640d4b354de8d0
307cc8645bdfc6ff7cfb45578636c705ac7bff1506a3bde179d01ef0f25bd851bb0512c7b5f71ad8
97e8615a4436379ba2a6dfdebc982ed878149de9dae0c90247ed0e778db4edcfac2adaed17e01088
c809484f59a5bf2b8622d044a2e005e9fccec536019ed1bde44ae629dc57ec160a1bb84b9acb9e77
1a9aa51c0a3577352395b97eff0aa4781ea6d388a58d85368589feeb08a2355083e8a4b7f316fd0c
5013c43df77713d8a9c55df0cee581193f3e26f7736db5dcc88909d678e2c0a167cd45960dcc44fe
498c907b8a6edb8b967d88918dcb23a106cf8ffd31d453ae884894178a63c1ad7fff6ba47d454dd9
eb89cb61d763a1df0ce9a39b7b6f86944522031949f064db0cf4da457e9588a8fe85637f9652742b
d5974ded15fdeb9dd25bca3e551e1b08701cae2e6ae27c13be8471d19962ae463c9109a9fe16c603
0645d8412f7703ed9c0ee3a7645e40bed90d524106c7495505e2c5cae604f2c9a6aa28d58a535588
d93f0b21c86d0f3b0e9ff2439ecb1dc7fe2de7c4b0a186a5f8de995e00004ca30d57c77cc47be87f
9c9d8db07809174999d610aebc5dd9202c3c77cf29365ed61c1506e0ad7243350be974e54da3f013
8a87b3ae6ff1e60343b66620902e75e193312b53d1b63c5e49e54dfb910a6dea5ef8972e18a3941c
3c7dac9aad3e629a773afaaa13538361c740084f348c216d75204dc0d594a50a236b911231df7acc
cb6eda75f16e4a9a06d30798a88320072eab83f8aeb5f31e97d5ee1295eae610d48c1adbdd4964d3
c36c17727280a8e2ab297760874dff658b604ed9c1f974f710afac5e76bcca481601e62c9e34a6e7
45c8523ac7ab145cba3665826e693d53bb00066f50184b5bc802af332645c3a197b9ac10ca3d04da
3f7c49745e59e202ec5c0cf51899257396d6ed6f9d668329ba14060517a884d39632b024094469d4
48b3c5788caff11398b42669e0ab6e04bb796f2e65e862fb84c9c1cf6b58e6b305359f1b1511a229
bd06bf86decb850c17dad9f06ad998af9a8264ac85ffbbfe4fde68b51c7d7903c37741fc74ae6613
cd3c9a2bb02c1bcc9334a0e045f678eaa95cb641cc26706b5d28e9fff63cb77186d2efbe074bd47b
b4cf06fbd52f149ebc19059475ea5a737cc25b4ba37987eb2ecb96ff3ccdc5ab7b54c1141827d1c6
2f1df53fc12eb87cf091b61e83ec3c1de5b179542801240e0e2acbebf2b7f2c9d69afee0808294c9
c9e64ce4a7b4f5ae47294fdaf78ba3802aa781604871341d312e2246593924326f8987eea890312a
293e787e607256785b03cf7efc25ede434d47e058904b5d60ce1e408faa3a7c8f3f8f262bea23035
c2075b72b723bb42bc6bb818d8c6fc959ed4d83185d598834c365bdfdec4a83a28d510fc773fb6d4
0448348c152d0433197bd4951f54e3723c4318d5f8cae099a43c5a0034b3a704f078f3a9b88342ed
b861f5c60f658c5fef38eb0ec5264d81b2a561dfd96d86246e159bc1194eed4dbe0849f9b0881ed5
e26ef03120ae6371ddeb607937fc9145f30f20d09c70e31822cbf1d87dbfb55c5f0add57812b40ce
5f7e1f91f87e4e4330ca8301b5c0cca301f8e4edc55aece1bcd2b9b695acb45935278bbf62abdcc8
26bb405878f6a50909a744ff0ed9be2a5d52223c4b1b6728c0db38845912ac07eac66d835096b219
bffde8bcb23e483d054a8623d0cc2c049a330006837da13033abecf326ec32504fbf83a95efe9c04
6c54a631549867cb22cbc3adca9927fd842e1e5ee66342396b666cc31eba68e1599793ffa0bb48f3
09158e03496ad0f782334a582750bc3cca8f5fd6d2d42989bbca77327f6dd380f3a76b8d47a61c8a
ddebe4a24e56ec82e0fbb39b6daf742a63daf95f1dc578b97b3e294630c9ff7a2cc0094bb17cab7d
9e5655949c99b82450cdb73de4ab11fb783d929a7cf6ac5bbb0ad7fbd2673e189be0a4a9708d1bdf
e8905a6d9388dbb27505391e1ade8e6b2dbcf9c88a3eb5920d2fb792d5e2842bb622e228bc54de81
65840a0d6bd0e6702263705a34470df033bd046e8abd5b4101545095ffd9a0b3a80274347106f34e
e7862c65718d6053defe9411a180f2ca4367d5a836128a364948bbc718a9ef18f3a3c857c0b4f0a9
b39a910ef5bf52283c25583a61f40559372b8ece362060ee6a92c3b0d193597914c063d95646db30
f364d2d57af16f6a9e1f0bc3a5c1cec6029411715894b801ed753b47dbd44d48fd6f3ad9d7176cb2
4cf359ab75e349360a2235aa511bf6cc0c5dc10fb691f9d0922cf81055b6d1f1e2f82ef82268184a
40e03c869add6c36e87fc9ce61654abb37c73036f17267bd4ba00c8b9855de1cff56b4c416c0417e
1ef9de1c787f16a92c36bbd2d07246c1d87d80469fb9c19fa1e0472dad98da75671f32c960439f2b
2617fd65494cce22377fa3394cb06a83d1bc217c545179584e5b1a944203a4cecee4ce92b641c1dd
5318978506a9d1c7bd4098f001ab007bc568f5a593ce2900f4966f2b202584f8f7a474915624d17b
40c852e2c3d094c45b724d96b67f451da0100082d80e33092e2719073628863a4021e67e37d16e12
a1ef0ec7fc721dfb5f6a18ad94100dea7bbb96a30b2bb2fdbe242f268438f66918b548ce6f61eded
c7e4ac205e8b1a545d64311e1b55b78b05bcb43a598650fb751c9e63e54436fa0182ee0beb984a9b
272a43ae091318df382d6f74c03685b4b02e0dcbae3f09020d901dcae6214671efea89b0e4b23bc8
9a63b3371c4bda7334061eb22e69f959d2fcd2d7420246546ea7f56f9431267beb868200d64ca7a3
01bd73f283d289c1866aa655785b139feabfc505aa3bfb997c2c4145c751cb08cdcab7fb6af8cabf
faab5aa6eb42783e8f34f9fb8290a8fd8663d3beba38d208500f32d433a2f0b8b09fab6b97fe7d11
f4d4a5a71473391be2f2af148c2136b5cf3efbfc814dde6c3fa089b669493ba84347e0f0c627eed5
0be7da1ec1dfe4c76dfeb092ebecd903c8026626fc8c484f325ec9162c99e2ccdc22f106b715613f
1a30338771c2c520d4f46d22e17a919f3d818f195c3fc244e5f73be8a96044661bce0d75190804cf
34291806a85ef44b65316770239443cb74aa84cd7be934633247a66d15d27d84ef590e853325176b
343d5f0b0ea4c99b64b96353db8dd3350a10e711f061af5cb2e247c25a546cc8f3334eded4a7b001
a63642b9798598113d28602178df0486099787daeb22f8a02a2ca2a37da316b911cddab0c00edc36
8b2a21e28a6d9e68f77ac0087dfae3154c146fc1972179cc8a135f653b0414ec98cef9aad92b7bff
0cdee4cb5d83b89d084b41085c79e10b4ef3508666514bebee30f65de8f11e308e277a3331d5596c
1c4976681b0c7421f2b7ba023eb40d0b056600fac336087cf5485828bd76749d57ce73648b51b9d0
a6cbd95e47506c4dbbffb5adcf8b2c3e2a931c40a627e7b5505ce0dc56efd2b4ec6542021a7d08a9
adf816290d4c42fc9ba4e5c3d437edae88f591bff1c33f6b38a3ea27343b08e2bd81a6776bef2b62
c92db4957422bc35a29a6ab616bfece94fc03d823055f2d1c49281d4aea1572a35e8f38e00e8674b
6ffc41999f2132bd9ebef3f8abf01e5427b155a01ff0a052139c901033c51d7ecf498939d75c1491
e39b4609c0d9e33c11908132c731cd2c87a090585083f91fca54cb9cae5a4fcd3d10edef97cc2f0b
6af6f4b2cefdd2c50fb5381ab4432075dfa0f09da52520a65a4c6fff58e6d29d3616e25240f61d9f
dfcdeff40a553cf835abf2c8b55880d7cf7d6fd932c6ad968a5344a38e883cef034d906b4b030911
c1acaf29de641224b77e148210ee85edaa9deed09944b602980829cb453787a90dfb1a8bd7a74d14
c95cb4d1bf8dd8756d31a4632e693474932cf72b0d990980a2cc3045fa4f520e9b5cc75f51f6a2d8
ff4f67e3920f53ee3244fb8ec3aeb625310b4b56596f6b0e85a94ba3016c0208c8e70cccb53ff0f2
4a4f268e2fea39b3e86a18664749f69f903619ad70e46605f27cde396069f298ad798b8bf40f20a7
f21019afc09b0a09eb2394f0e0caf9960547dd580e70a7f02bd2cea54232090a6321a9ab63bef43e
983b378decc82fe18ac0d14fb7271fa86d08cf61b2457dc91dc72cfc1d0bcf573e784e91048cf541
be8c1117d0117f551a6cedbb247a8051d3505b015b609ec751821dce1a82a2f58b180a0fb42b0b58
793f6ce4e01251a98d01c256dea9d4eff9991e807751713ca95563767c220139018e5b4fded4620e
a9dbe120a68714e5875a0204f7609b8c59b7ce15071ed9526d0c2dd45422dfcb896c627080512983
fbed6ffef9aaaa207f5e48908ecf20718c0ec13908567fd86da5fc3395b478f1c41f29b2fc9b064a
b83c6943fb9ce021623b8f09fb1c7d0ff74ad578d96e776fdb11a571660fd49b6f5e214705653bde
7e1e8d5602f67acc768482f0227c7454de16ba3ec84b5f94f613865ecf6c54d41986f6761d638b57
2d3e86df107df587defe25ea318fd497ff730399fc4825303c8520ea3bdadd5afba4782eb314ad3d
2ad3a99d6c8f0b51ee66a2c8196573a0eeab643bcf32f6439a7bc94e167d22c15057acd7f6cede14
71f738922d77e9be36078559c761652e9bb9ce4e11c5e134a49ac5a66542d18cf0cb0cf402f3ad68
614ff4390fa8c90d113a5c6a0ca409eb7b069891fd5c18b377cce9c688036f829005b6def9d34ffc
7f3a2a1487a9ed8ede71e0a394dc5601285bdf1d3ded8b22b997e69d60a1d189d7c7b174e261484f
39b026b4d87f266dca4b7dd6f9fc08992296f0d0392461f232c60e4a5eefb13230d318aaa5132c21
b1b96ba8afe684b1902bd7ac1febddfa12adcd17eaf1f88d15a419cbd808aa5197ad08d1cc273c1d
8a4d9c9ef08fc6b763d3d8dccaa54e1ddc1801e5161c7bcccd3bdfa57927091c6689e78d3ded096c
160054cc47276ed3f6667910735f5dc1b92e79daf3f5e0ec48804688c1bd19f2b2ef72f29aa4526a
a81e1bcd16fb16bd262c24186dbe3254539d585829a8612148b1e71824114e791febe4bc8c506cf1
642759a4532d32175aa21c5354a0cf208ec1ebff3b1d97b817bb9baf381eceb6b21cf529153bb3ab
7bf003d7227b22aa646702fa66359a11abb4e65258ec53cb98410ae188e7235c611caed9c52e0893
a44a8bff27f010cc28e31b5581265ff947687d938441efc4f1b0141e17898bdd91d2293aa4733ee0
9648180191808ee5b8f1b1ca8ef829e508a5ffeefce991c219c7c6b78dedbe6590c15e324f40f2d8
3686e5c750b9192b6f4a5e0f968dd7f35450942e5c1715131987049da52ce550671ce3e6c8844501
b9d93fa83aea0c6458dc656ab8d16a447f18a71552c5ccfa037e8350ee43c1f94c7bd97ef1780e99
e9802ee249eca6f4aa56af0a83546a74131a29250aac0dd5f34ae3c6e6496ee96f47078cfa818cbd
9322b6cffb96e51ad51960e84d36023ed8563c2c37d2a37bd899419a5bcd709411bf50d02cd3e587
1160f15a6b77e374e819b57e718c19dfa64f9ccd030aba3943dc0ff41be61cdbde1f41144c07c52b
1df0604ef1582b622305fffa0c993f1d3b4db5777360bc10279bc292ed4f793b10a636c779b7da0c
96baff88f248080d46d7784132f9cf2ad2078898839815b2a7e32fb3c2886ee3b31f6aea4d3f515f
8bb52b724437c69f60332052942ff92bb142b17b8a139b94504c64bb4dca6b749061a7b15f0928c8
3f9da9071ba9b71227de8938f5099542c8fac1e85dbfb2e80fb0f825e86da22ebad5afc5a0d45bf4
18914d7d6ca7537b488f76be6b912cd10b08bf7f1b5bbeea523cea4921a79fc916abce428d79f983
2b80141e0bfc15fc9b91e07689291bef69d9d0ea7700785188ca2fc54f20f6d6bddbe4d2f83f63d0
c23d384a5d13a782d187781e63b5aa9e56da3959529381d2fe8a2bf607df461effc541db63c35be7
73fe85f2a1d40d52788689e7dad7d556bbac8344788d42c9fa436aa14cb363a29edf7c6f808bf6a6
aab021a77e50108b7c499f7c00edd7901164dd69c717eba655d9f3be3c2638e502888c4ba07b16bc
162a7ca024e62792a661891eebd04d36c718a48f2baddd53f7f5bfe8c8cdc72aba6e3969dd5afc54
f616c716ab27a0eb9f33efc6f0e9c93319e8ef049b581fc9624a26d66d0382304893a0367dfff6c4
b2a6661335cd1f5b00c1a47908dd73b64056f1401b2377e3f067adafe9e04ec210aea4e560d8f267
fe2632ce46417e124ce81efdc95ab1cf777261bcdc5a5a4d0a8dc2cf81211f671ab6069390b0f47c
f6bed3dc487adc5ea5ea2429b13b080fccd97ec443c5985bd85d864e42ec2c8037f51574107aba1d
eb56750ff281b8530963773c6a238e0b5ebf024780e31e09a03cfe0228ec99bb7dbab4c99208e852
f18e8cc92bea8be93f78c4c24d03478060a03639e9d6552db18327e7017ef5b435bbc6de0f998520
73ca6e7cee4298c7fa3c0537be236a90e466d960911daa2fb9a0245311194136ff5b588627d9f0af
8f8123885f224e87b48cc3f46e325801527289f3f72195760a74414aed08c52d2f776b21cb95aa5c
b51c4efb9f7d165871a25d49b50b765bcb8db06d9bbed390e55c7d7d2825458e3234e2eec939a153
cb8b62eecbec1cbf479e28d0161e6b4770022911c4b5beab80f1cc7a11b867152724133ad828646f
6168b67447603a309a169c33401c9656149b606fb534d0f2353e60a8bec4c767e97facd008ee0de8
4eb396376b02c59ade2b6d0a5785b46ac9a44ed8aab66a7bc657389c271da8410534f39682fc2ecb
7ac39f36dd63405e3f449cd27fdd03237feefdc7c21b6e58e8a708a27b62eab379694d15a68851b1
246f7193b09f1469d7c39b34bd609991788150ed0021daf92a90b886c0d428203fd43778dfab7a0e
de92d1bd68bb6c7d63eb1c44aaf8a408233094eb89f4f12bed0e0958bf4cde581aacfca4d129965b
da2c5d9d0cf27ad5596ace79f263c1a1a9002687fbcf4094cae677347b50cdd5a7a963282ec52d10
cbfd6ac7a4bf01b56e40be22ecf4c50a1d0b16942e073fbd2e62bfe9bb4581a74f00f814bb156dae
f74421b6929c70fcbb028e5cf11c71c07351e4ace6a9469a72e3a20788eabfcd998670af84adf670
ccac81cf6adf25617d50fbe52e6191e0461f1214773cd3195a461209366fbc9eec8a8533cfdc4723
30900b399f76fbacd83705a6de1585b5b0eba0c73ca6332f0bc2b9587c4f47cb8e3cff3f98ecc1e9
11a6bb16958e969523846a5f9fb218b20007437a3256864603b1a9459d297af2a405deea967085a0
7dc46f0fe224f12fe836da7408f77c653c7434c2de6868e714a52521903fe6a9ea471a8adb37b1ef
6375d8599d04386d8d0895060eec29c8895f442e4931c3bcf2c299edde235b833e702dc77c3780e9
c862170d78a4b8a16c3ac6cbc31bfa387a8e23ed21dd398b6fc359d072f92b9061e20bd4a244434a
21daa3090f877fec50f7bd83bfde039b1be305004444ca1cb53191b89100ca5992abba1ece52ee19
81b600a1e01849b7f4488f189688642382faacd3adeb2a8d2448658119e9aadf3553d542efb696cf
532846008f2fac7dc596a1c47a682cb8b1715352701466a2892b4fb9f569d642c208f57f4123e60a
c0096a8fc214e147b55191652fcc1e3ed4be741b04680f7c280c7efbbb6fe9e56d38ddd247718cd2
8bc8614dcbeaf3f263c7bcd8d1996707b735b23d358bf412195f0331e334cbef24d66c0d98e00eb8
8d40b78836b45d6a0a0485f06b79782bf1099e9cf98969e1a53a6f687e6748e470acab837e09cd6d
ce8093419919c6f6486797662b389feba7ba5327cb7b66c72db5d283fdfe2a927ed610ecb5ae4eb9
96512f351fce68f98cb0f016dccb263f1bc6f3e5d009e35fe963ced867c69bc19ecaa2949d09768f
19709925e1534088a9590afbfe179949ef5a3cc2b1749fa4a45a1e7215612dbffcb9a99c5134d0ae
3cb755a187883948a9c5b14354729f63035bf50f4f1aa66da192b73a1d3d1353f21838e93acdfb6e
f531f330bd3501059ea2a2ec89909d3afe2ace9154365ae8a9a4713d641cc6d97e0d086b246a2dc3
876e7ba82cf0929b050d6df2e1444031bd4c12dd376fd26edc9e2604ede45d107294bdea197e896f
dd376b5b1004ab2b25b1370982596cb5ef5e68484dd7e89a67bb2243e2e09e2be208813552f1a93c
f9b10dba24402c4cf4925438d6ce40a45f5e688d89bc344075423d6d4847de0e6db0d7e5f067f955
d70bad9362059f93175271be8ae7bca0834edfb4197661722d64cdfd55ada669403d68cf57d14a56
4d2475766c718aabfe708a98af43b345fa47e92515354b25172fd1c15c51491dd4416129369d2089
27977b9c512430dcb0dec494e16a0ec33781443df88e3a0b98635d70f6e59ecb6c65b65f6c182ade
c11f4dafe4225993dc58d9950762837e5e0ee497b7fed492e475ad17c0cea0957d204eda210aa032
3f4df37a77880c2ed90f7f9fe6840a86e50d38d86d85318541c66632e7b6829666b66c5550b4aed5
6d26cb8766375a1c469fea359965f08a6fcde18e7228ce13451d6adfc113a184720422e0846620f4
43f93490a9e0a331c1d0e4d1a9f996f0f59cb7ca6ff6a383d4975df13dc6d1b6b0fc815760da6156
a70959578dd1252257324c28f0605fb227f7f448d7d125a9092ee02aed54920d7743432b525d0eff
59609b4262e85e010fa79a8f2416993244076d27a4d8ed8bd08de3a73e82e4c40b80567bdddba580
1fbc66539bda83da6894dbc77d6212ba19fe2199495a37ae777829aecd1fda63be75f3fd11a63ead
2c4561dbdf86ecd5c44fa2aa256b0106220c93fffc8124a6410b1882a259a54865ab3572a64095db
0a09c021820e805a5ff99041260715287d0fcce120e3ed9a2d00d8e2c76d680ede1922c000a4c86d
7835fb561c3d2418fe0deb477af4f24f4495d3239ce6b971f23e69a82fb5c255b36529a7dfb096e1
4f735c7333559679a016f3866fd4b9623cc454b22ab6ed7220d2739e4e56f26b9dc8938185f3dece
483bba01fd1f74c1352a7c66f18f6dad452a172fb196b0a73947fe6292740a33fd3ef06bf1884526
613481e50a8b1a8bd87be5dcc2e82493d62a12b5f1b3507df22841fbeed414eb64f8f00b7b33de49
32a2cb3a93563cd58a16bad8df0afc1a52695a35023daf344a2ee65e94297fdee94f2776786166d5
39ee1215e658bd7e6b8cb3316c1532901d4314e7119b01c4d5ab0c7c28624b9bf52070f4fca2a947
2bcfd8912e6607380eb025ee6052aa29056828abcbc4b8c00e622e1ff08384b906cc6cb81cf0af5c
90b75eefd706f8e208ecd789393cca9a2623a89d859116e0f93332c2174b5877a20baed7ca1f7b22
6ec1c8291e6cc485c7939c97d5209c9751987d1bbf68e9afa3b4880e44745128739d4a03e6da3bca
610ad0abc6ab2c33aa11106dc5a810d5c395f462fbe092ada5f03b4dbb567b170d0df87433be011c
a52592be585c2118b8848069ca0f07075d8ffb9c6db12ce384f7d4175dd1d28d241876e41aa5c3f0
d21afd30d3d2e97a4f1a84260b767a4e2ffcb1483ff7ca546d3b7ab674d02c507c28bebd9bfca707
dbc895639a1ce24fa9885374601a00dd563b54a1f8fbe723b96a1e319804a1dd62718bd8aea8443b
14d1977533d22bc7820ad11c980d9c69c678f9a20951940d990217ee83463bd2e0ba9be7425efb90
f4a33ed11dd3a8c5f6cc04c0191c92bfd2a9e2794985212ab370de19185b4922aad380e693d75891
9a693451111bb822a97c648015600ee2936dee5d953e4e0c2c2dcb19f214bee0ebd9e5d3d2bc039e
d3240358c497eb9cb0e7d03dd2e8e3c7d1a058aade490f887ff068bbf8c7c70f2264ce231fa1a06d
806f83494163283dd0e32f68d4c241df85a430c6d962a980a66f01adcf162fe24db3181dfe35b043
5873b78853e397e32cb173d539b992bbd31d5a191422dc67ac8ffd3e095a89bc113890055192dc3c
f4d3eae5ef588bd2ccf690da6e755c74cd2d407b5d6bc1d9fb101a7fd4282519ebe4206b4e940ad9
19a4fd76dc2c63f4ef7c30ca6b5e2caf9f9afe953241bf95f1e1ce2e28e997e0836112bdbe269d93
54351a0bffda38b32b9ef22fed7cd66000796ee2063b5fb430010340dc22f9616f40ab5c4eb096da
6c165bfa02eae0c57b88a221cb83264b48b09990c8324a94a4cb8ea6ba231969b5234594a83a9afe
52aec7cfe12f03197de55192db294d519a1cfc0e7e77a6beaa86ce61a1391f19187c8c917586257b
41325a787a3b9275c33c0da20de97206636cbc34ea3d18755cca4b457a2edaf773bd9c4768242436
bf88963f7296a76a2a0dfc37d265deddc1fdcfc8ec82987176011b695e7c489e79f8ebb6505eb9d0
920830f76349ab7b6f2665ffddd469b4f5f7814e22c15d7e7f27e0c4c6c7391a38dac33fc5a50b80
bbd4edd2b89ca4c6681cf9ff249b4fdeac1761772c1092ddff1483c5e11d34626eb3d01f486ada39
ec2f19f2c0ed18108350abe9fbfcaee31af5664d19f3485ad1d5535031b403ee38ae7f6145e52edb
f2a14ec1aa6ea824aa87913398f3761ff00ba92591d4396e68c90e8a42d5bebbf6571c4806d4101e
d4d67d6810abb583f982f6c6a849e937042e6b93e5d5e58b0ed3465a42b44ac8db5ed894e0618d38
211edb71c7104ccf449586681662c964ceb0a5fc3d4cda794dac226328044a0d97d1d2860cda429f
da9644b0b4ea9c5e8315f2ea61662cac4cbec1187759ba46e000f47a0ed490f6a1ecfc76f085fd19
4bdb1db2c083dba7d8a2cfa7d9065a5a0487b324c42f1c80ae3965b8b0616bddf178bbde0443d6fb
7c58d3bcd11e03421c088f9c5d147c9d94cc21f5a91dd1011b4495525510345527e295eed8ec1cdf
5469c49627caf64ca8b3d359a30d7a698fac8a7c922130a6eab8824e3e47b7311a853117d5a3a0ea
5fdfb37d4d5b71c2b3d50bb761fe1eac69b414fc22feb3c3b226f6da0c796d19f0fa8889cf558b99
432f3ad5c21b05c07c6055b2a99ce19d7bcf07719d813109e5b6c2942b1d3093d0416910797a61cd
3ebbcf7a8114fe8261b0cf2d32adfc7f0aecb5e8b7bf6734cb4ebc7bb3c493c361a59f10a3c92f4b
d390fb7859d53e4812a2691c289e3ec5ccf6fce81c1b1b87d4737dd534566a388d799b8deb5c7954
1c7efa10ed03d94031fbbc1d8865ac72a6fa7a7f094ca64c25399cf3b3d2d6980d3448b98d46346f
ad91e7329a8a6e4a7705b71e648e3ac0c7a9dc38ff840343509fdac452e6782593fc0684fbb4f9d5
b9fbcd144b2f6389efb7b7e1fb3fb1f1943f1325326eb5a68ece38a782e47912c7696ac6ed7ca3f0
a50b90713769dbce46d73f6b6a17beab7d2de5cb037c1e447e07525f1f2e8c53cdfa5f5eae8fbf01
72d2918251531808ebf1fdf05f9e53ee9942c1ba19d4d1c0878d822bfd0ce9bbf3bb82910ab188c1
cabaa0c1f5cf5af2b8bbf5b1ac6543aa20cea791c9601bff7f09db34ff10394f35bbda9caa351d4e
ff60712ea021c7501c5d1cc45f76562ce09a9e09a5f3e6193d490f90d2000c4077ff0007b4543a93
af7a253419f8ba190ae08a6bbbd7ba827b0d13e3efbfde4f973a0f542757b796f614edb701c2eb15
d6994c9790fedcd9d1ec6634a9ce435f4f643305817f6805c87d9337186889208a4bb41602ae382b
ffae6e49ac5fca95d77be8d97a40430e6455a063cdbb681a204e9c5ac196f2d95bdf6281890a505a
4de47d5f61d727b1f5c7359b34941a592540c6d1c70cf84d1915741dbe1a8d9a4238ebdbe4fb8b2b
4e90b83dc7dc9340074da5905b1aa17cb995fcfabff3da0de09f6870b4e8071a5923582a3fc0e888
b12fa85d7ac7b74cd8dbde2de2ce171794df7484cea466ac77954edd247dc888a63995737263c061
ce932cfbb412828fa89f448af14316d3b2da3211e20dcfc06acdf9bd4f55269e
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 25
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 29
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 32
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 49
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 53
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 56
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 73
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 77
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 80
NOP

// Rung VGR_Copy_State_F#12
// Offset 81
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 83
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 85
NOP

// Rung VGR_Copy_State_F#15
// Offset 86
RET

// Rung VGR_Copy_State_F#16
// Offset 87
NOP

// Rung VGR_Copy_State_F#17
// Offset 88
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#18
// Offset 133
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#19
// Offset 166
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#20
// Offset 173
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1"

// Rung MPO_Copy_State#2
// Offset 55
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 116
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 125
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V1600 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V1600 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V1200 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V1200 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4 0x0 MHR1 N300 1"

// Rung HBW_Copy_State_F#2
// Offset 13
STR C28
OUT Y39

// Rung HBW_Copy_State_F#3
// Offset 15
STR C29
OUT Y40

// Rung HBW_Copy_State_F#4
// Offset 17
STR C30
OUT Y41

// Rung HBW_Copy_State_F#5
// Offset 19
RET

// Rung HBW_Copy_State_F#6
// Offset 20
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#7
// Offset 73
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#8
// Offset 114
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#9
// Offset 121
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 150 40

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
SET C601

// Rung VGR_SLD_pickup#10
// Offset 73
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 76
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 80
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 86
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 92
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 102
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 108
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 116
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 128
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 132
STR C605
AND X26
SET C600

// Rung VGR_SLD_pickup#20
// Offset 135
NOP

// Rung VGR_SLD_pickup#21
// Offset 136
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 870
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 870
ANDLE $VGR_Encoder_X.Acc 900
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R103 50 R900 R902 50"

// Rung $tFirstScan#3
// Offset 21
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#11
// Offset 61
STR C31
OR C1701
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 71
STR C32
OR C1700
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 81
STR C33
OR C1702
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 91
STR C34
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#15
// Offset 100
STR C35
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 109
STR C36
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#17
// Offset 118
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#18
// Offset 127
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 136
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 145
NOP

// Rung VGR_Program#21
// Offset 146
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#22
// Offset 148
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 865 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#23
// Offset 168
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#24
// Offset 178
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#25
// Offset 180
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#26
// Offset 201
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700
SET C701

// Rung VGR_Program#27
// Offset 212
SG VGR_Program.S2

// Rung VGR_Program#28
// Offset 214
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#29
// Offset 226
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C35
RST C1701

// Rung VGR_Program#30
// Offset 237
SG VGR_Program.S3

// Rung VGR_Program#31
// Offset 239
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#32
// Offset 251
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
SET C35

// Rung VGR_Program#33
// Offset 262
SG VGR_Program.S4

// Rung VGR_Program#34
// Offset 264
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#35
// Offset 276
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
SET C35

// Rung VGR_Program#36
// Offset 287
SG VGR_Program.S5

// Rung VGR_Program#37
// Offset 289
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#38
// Offset 299
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#39
// Offset 308
SG VGR_Program.S6

// Rung VGR_Program#40
// Offset 310
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 50 N1005 1 20 N1006 1 320 N1007 1 350 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#41
// Offset 331
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#42
// Offset 337
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#43
// Offset 348
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C35
SET C39

// Rung VGR_Program#44
// Offset 359
SG VGR_Program.S8

// Rung VGR_Program#45
// Offset 361
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#46
// Offset 382
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#47
// Offset 388
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#48
// Offset 398
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36

// Rung VGR_Program#49
// Offset 408
SG VGR_Program.S9

// Rung VGR_Program#50
// Offset 410
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#51
// Offset 430
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#52
// Offset 440
SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 442
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#54
// Offset 462
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#55
// Offset 472
SG VGR_Program.S11

// Rung VGR_Program#56
// Offset 474
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#57
// Offset 486
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#58
// Offset 496
SG VGR_Program.S20

// Rung VGR_Program#59
// Offset 498
NOP

// Rung VGR_Program#60
// Offset 499
NOP

// Rung VGR_Program#61
// Offset 500
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#62
// Offset 510
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 518
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#64
// Offset 543
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#65
// Offset 560
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#66
// Offset 564
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#67
// Offset 568
NOP

// Rung VGR_Program#68
// Offset 569
SG VGR_Program.S100

// Rung VGR_Program#69
// Offset 571
NOP

// Rung VGR_Program#70
// Offset 572
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
SG MPO_Program.S0

// Rung MPO_Program#4
// Offset 16
RST C900

// Rung MPO_Program#5
// Offset 17
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18

// Rung MPO_Program#6
// Offset 29
SG MPO_Program.S1

// Rung MPO_Program#7
// Offset 31
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#8
// Offset 35
STRN X24
JMP MPO_Program.S4

// Rung MPO_Program#9
// Offset 37
SG MPO_Program.S4

// Rung MPO_Program#10
// Offset 39
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#11
// Offset 43
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 45
SG MPO_Program.S7

// Rung MPO_Program#13
// Offset 47
TMRDOWN T2 15000
OUT Y16

// Rung MPO_Program#14
// Offset 50
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S10

// Rung MPO_Program#16
// Offset 54
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#17
// Offset 58
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#18
// Offset 62
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#19
// Offset 64
SG MPO_Program.S2

// Rung MPO_Program#20
// Offset 66
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#21
// Offset 82
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
AND C700
JMP MPO_Program.S5

// Rung MPO_Program#22
// Offset 85
SG MPO_Program.S5

// Rung MPO_Program#23
// Offset 87
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y53

// Rung MPO_Program#24
// Offset 103
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#25
// Offset 106
SG MPO_Program.S8

// Rung MPO_Program#26
// Offset 108
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#27
// Offset 112
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#28
// Offset 115
SG MPO_Program.S11

// Rung MPO_Program#29
// Offset 117
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#30
// Offset 133
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#31
// Offset 136
SG MPO_Program.S13

// Rung MPO_Program#32
// Offset 138
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#33
// Offset 142
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#34
// Offset 146
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#35
// Offset 148
SG MPO_Program.S3

// Rung MPO_Program#36
// Offset 150
STRN X12
OUT Y46

// Rung MPO_Program#37
// Offset 152
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#38
// Offset 155
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#39
// Offset 158
STR T9.Done
JMP MPO_Program.S6
RST C900

// Rung MPO_Program#40
// Offset 161
SG MPO_Program.S6

// Rung MPO_Program#41
// Offset 163
STRN X15
OUT Y45

// Rung MPO_Program#42
// Offset 165
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#43
// Offset 169
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#44
// Offset 171
SG MPO_Program.S9

// Rung MPO_Program#45
// Offset 173
STRN X13
OUT Y45

// Rung MPO_Program#46
// Offset 175
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#47
// Offset 179
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#48
// Offset 181
SG MPO_Program.S12

// Rung MPO_Program#49
// Offset 183
OUT Y47

// Rung MPO_Program#50
// Offset 184
STRN X14
SET C901

// Rung MPO_Program#51
// Offset 186
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// Rung SLD_Program#6
// Offset 30
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 32
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 34
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 36
OUT Y30

// Rung SLD_Program#10
// Offset 37
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 39
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 43
STR C1704
TMR T11 1500

// Rung SLD_Program#13
// Offset 46
STR T11.Done
JMP SLD_Program.S2
RST C1703
RST C1704

// Rung SLD_Program#14
// Offset 50
SG SLD_Program.S2

// Rung SLD_Program#15
// Offset 52
TMRDOWN T12 250

// Rung SLD_Program#16
// Offset 54
STR T12.Done
ANDGE V1600 19000
ANDLE V1600 20000
SET C1700
SET C1707

// Rung SLD_Program#17
// Offset 65
STR T12.Done
ANDGE V1600 7000
ANDLE V1600 9000
SET C1701
SET C1708

// Rung SLD_Program#18
// Offset 76
STR T12.Done
ANDGE V1600 22000
ANDLE V1600 25000
SET C1702
SET C1709

// Rung SLD_Program#19
// Offset 87
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#20
// Offset 91
SG SLD_Program.S3

// Rung SLD_Program#21
// Offset 93
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#22
// Offset 97
STRN X36
SET C1705

// Rung SLD_Program#23
// Offset 99
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#24
// Offset 103
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#25
// Offset 106
STR C1706
AND C1707
TMRDOWN T16 1000

// Rung SLD_Program#26
// Offset 110
STR T16.Done
OUT Y33

// Rung SLD_Program#27
// Offset 112
STR C1706
AND C1709
TMRDOWN T17 2000

// Rung SLD_Program#28
// Offset 116
STR T17.Done
OUT Y34

// Rung SLD_Program#29
// Offset 118
STR Y32
OR Y33
OR Y34
TMRDOWN T13 2000

// Rung SLD_Program#30
// Offset 123
STR T13.Done
JMP SLD_Program.S4
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR ST1
ANDNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#3
// Offset 26
STR C10
EXIT

// Rung HBW_Program#4
// Offset 28
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 36
NOP

// Rung HBW_Program#6
// Offset 37
NOP

// Rung HBW_Program#7
// Offset 38
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 40
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#9
// Offset 43
STRN X11
OUT Y7

// Rung HBW_Program#10
// Offset 45
STR X11
SET C110

// Rung HBW_Program#11
// Offset 47
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#12
// Offset 50
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#13
// Offset 53
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#14
// Offset 56
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#15
// Offset 59
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#16
// Offset 62
NOP

// Rung HBW_Program#17
// Offset 63
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#18
// Offset 65
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#19
// Offset 68
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#20
// Offset 73
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#21
// Offset 86
SG HBW_Program.S0

// Rung HBW_Program#22
// Offset 88
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#23
// Offset 89
STRN C100
OUT Y50

// Rung HBW_Program#24
// Offset 91
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#25
// Offset 93
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#26
// Offset 98
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#28
// Offset 103
NOP

// Rung HBW_Program#29
// Offset 104
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#30
// Offset 106
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#31
// Offset 111
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#32
// Offset 116
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#33
// Offset 118
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#34
// Offset 131
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#35
// Offset 136
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#36
// Offset 138
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#37
// Offset 149
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#38
// Offset 158
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#39
// Offset 160
STR X2
OUT Y48

// Rung HBW_Program#40
// Offset 162
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#41
// Offset 165
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#42
// Offset 167
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#43
// Offset 170
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#44
// Offset 172
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#45
// Offset 174
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#46
// Offset 185
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#47
// Offset 188
NOP

// Rung HBW_Program#48
// Offset 189
NOP

// Rung HBW_Program#49
// Offset 190
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#50
// Offset 192
STRN C100
OUT Y50

// Rung HBW_Program#51
// Offset 194
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#52
// Offset 196
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#53
// Offset 201
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#54
// Offset 203
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#55
// Offset 205
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#56
// Offset 207
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#57
// Offset 224
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#58
// Offset 229
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#59
// Offset 234
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#60
// Offset 243
SG HBW_Program.S9

// Rung HBW_Program#61
// Offset 245
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#62
// Offset 257
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#63
// Offset 267
NOP

// Rung HBW_Program#64
// Offset 268
SG HBW_Program.S100

// Rung HBW_Program#65
// Offset 270
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#66
// Offset 273
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#67
// Offset 276
SG HBW_Program.S101

// Rung HBW_Program#68
// Offset 278
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#69
// Offset 295
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#70
// Offset 298
SG HBW_Program.S102

// Rung HBW_Program#71
// Offset 300
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#72
// Offset 317
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#73
// Offset 320
SG HBW_Program.S103

// Rung HBW_Program#74
// Offset 322
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_Program#75
// Offset 339
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#76
// Offset 341
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#77
// Offset 346
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#78
// Offset 349
SG HBW_Program.S104

// Rung HBW_Program#79
// Offset 351
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#80
// Offset 368
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#81
// Offset 371
SG HBW_Program.S105

// Rung HBW_Program#82
// Offset 373
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#83
// Offset 390
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 392
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#85
// Offset 397
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#86
// Offset 400
SG HBW_Program.S106

// Rung HBW_Program#87
// Offset 402
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#88
// Offset 418
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#89
// Offset 421
SG HBW_Program.S107

// Rung HBW_Program#90
// Offset 423
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#91
// Offset 439
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#92
// Offset 442
NOP

// Rung HBW_Program#93
// Offset 443
SG HBW_Program.S98

// Rung HBW_Program#94
// Offset 445
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

