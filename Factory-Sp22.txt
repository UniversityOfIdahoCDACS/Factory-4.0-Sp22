// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jeffr\Documents\Robotics_I\Repos\Factory-4.0-Sp22\Factory-Sp22.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
a657d75ac9601029dbc11cbdcebe4b84faf7112c8fae0c3fc344f3a2d213bd996b7697c79acce632
47ffc1a7cf60e2479411a11f819e125ca56eb1a95d4563857668150716f4b5643e3c87a09b6f2c01
4d92a9a80a5225c9334629ea08069865e856cebfa47b8368f33230e160222af9bf074d3ba4eaf607
4d72bdeff9f36065e50b111da2b520de83d75aada4228fd65fd8a0cdcb89c6c505371b6f99db7700
b7b6b829cc7ce29f927032377091759db6a6d75d481c8552e9051d7bf602b4e1906ff16fb38a8370
858c4b3965b68764c1abce67f6a881ae91f84b2acca9d735980e0c908ffd5a714b10a22ba2b43fbf
c15b38b8eae45c577eb78e9e9aebd2b1fa82c29800f4b6638ca305333806d84340898a24d0cf8792
64a28cc977e7ddd04d56553e035c0e57ed5da6ca1cc1cd1bb878ea47b78f2c2d9357151fac6779ef
d20cecd8e8b73950d738bd4eec7768fa27426123403a34e0fa69fbb1bf6a415f403cc6aecb2ddc70
98f766a347e5056e9282b47daafa209f026723ba77a4248be3875a520f6f06d07511a8eabe3e37c9
db9c5dd6fcecdd021d63165e8dec7a21e537bf1a51681079872307448014b1c248ca4f3a0fcfde11
43c0bfd0ae0fb44873077274006b59471611256cb39a78e06057498740cc52cb6b0c378918424d3b
a63e543a415fd209a2c77a17c37e0fa7c1613287c1af5188059ce9725098a12f2791636f6265b931
50ef555bfb759d2f4a06398eab9905369080bbaaf1cc32c82fc16dfc6ecaf82eab4742cc9fbe7375
e41363c01169da995a4a01a1c840befec45177aabe216ffa0377733a251f6dfc573f4b33fff32efc
29c367e54e3a9a74400acf8bf928005de234aa683776af7337e92d5d4d742fe32f26baaed45fe513
cc8c7b000e528d6819595c022ba3975d37abb657999a392d8ca90ee79205aa53913403c4eb249304
a6a3812ff80dc38fafafa570a40e6c51428613053c754e5d92473925bffa870c99fe52b783a2e82e
fbfcb55c9ed3e776330d2d962c1d33f65a8058be8cc31628d995687ecaffca440880143e143523a1
d0e4eea40136ea1eb415045172005d397da366792c9c6dcbcbc2c2fde390cbfaf7e805a71f7bee17
05801f527fa65c651e04ae23fad275f983054e56dc07b91e12b05134b1d8d550ef7468124ec6d1cc
4a5341e00bd16528ddde68e8d9b43d8ebdd684a92eac53b288be142c9a15a9d89d9c349f89dec399
ff2602069ed96c570fc179e4c55a792da1b2c84182dfecb3e6f4d300168bc8ba0cfdad46979e6529
7ac36b6b726e18a0ef8a9a7a7640a609fdabddc481ad8e433d66cd66725366c81db49da8f6c23f3f
5dd29c5d4468950fdd06bd667ae6acd8df5f8ff3b16d0b4d9ec98c69bb55a9d0739ac65ac00acab3
a58b05b924282febccb5c503780cd3696ddb3942a3129241c87478112402bd76986b4f164c79e72a
f31be030cfa763928eb4539e098f57513ae43e74a3deffcdddfa9399a8b630e5b1b23e1565341b54
5c384ca05f27778c221f463271890a7338be9a9637bd0b5ba699d246a17c1d4f6ea42e0b2570ae3e
43c4e95aa19762b008ede9e3495a1a44bcec3ca979beee378194d4904ba92dcf24c566fb5a253638
32b17bc441621e3388bc12878101293d63e4468ecda8118e7c93c01289d34a39b1daa5fd2b6993b6
e70527f34c9cbbd838b92e70a5523a3fa9b580b5320aeb207be692616f9b209d17ca77ff096dfb51
2de49e8782d32f87e139ef201ff289d9b85002143cd36787de38cbf6fe435b8733d5bbebe42205eb
5bb75a7ae6a5683d031102d2574c56270752385e9fc09ba21c47db985500382a39e96c776d640bcb
f0d50449dbefba5f1f33978b0240724d690d00316b8a0f19b9f85f3515f579eea08a7ce9ede19f66
3642b9365c489d8998573fac4d603e1b73d96604ab56260fc05db084a4cb1c7379d35dac8d148433
d8b363980f547d2327b4509d5f910ad2c7c0e405254ef923f76899cb1fa93798ee84dfe65857c784
e17d24154b5c90ed0d8106bd376be68f9cfbf179271cf115487dd42c931a750264b963b8d1ce3c6d
4b5ec719fb746a0cd194b5ac1300c1a646b961e8b8667616c77bb47e7fb08772627182603a33bdef
25ea1a0f812146251b0803e6643d8ea3c95c16b1847c2efa0e97805992ec394f2298205cb7f160a1
d365508930949a721decc942fbc22a4cdf13f53bd77c7af4b7a0fd1f854c27d693b32e6055768fb7
5cb289cd9eb0aa2745a0a8849b97f3e8e88f1dbd89362f61b91087b478fbe1da9c6d0a83dc068488
938e6131aebe64c19d21e0b77ba45639e8f56a573eb9e4f86787ee210563e7ff23230c364e2b5bf4
2184b939d36e600fb8597ef8dcb134352f43d1a390d7aaf821b505fc02d506b6e1309504ec655f39
dc878cf179a39bc757cb6e58f6ea4c4eefff13704b20a770d7f68fa491f3fc80885a7460855abcc4
2fc621bac8165b5fcdc83c8ffc5b590d12e6b28eab318c161b0b1d6b5097b635e2027384a606bc94
2c229f7a3d8b11685c462ea754bcf577f9420692f2fdfe879e533d2cce67f530d81d48e113effc35
cf763b623bce50790179748744152a709be1c08594f65fc782d12aa7a7baf7220d744058065f2a1d
d71cdf812b3e410e9eb272ed4adafa05eac95ad421530b12451698bc4de5cbe22c24d90f9bb40b0d
c9ea0d7a508ac4f6a56292d4b729e6ea2cbdc9aeb3615e5ea71c7f36db56e3695a49e5cc1884b010
3f6c06bd3b572a6529eedef7fb30a29b725a492df34e2efc3716ffc09f18ee31b13857a3cc34576e
b78f42f7fab2909b0d2cd7e6b39246811c41be55813de367034ab09e4bb5e82bdaad45f507a3f0ff
a441ee2ae57964d64a350778a22e1fb6bd00a8ce956fd8038de4a9310a72c4f4c96cb1fd4aaa6ec4
30f90a0cc3e895912dccb0f031662db3cb04191bc7c3fbad2fe1260af1614b73f34ac430cadf2da2
f3c983d96302d97b73f201787cb15aad23992d5ecc7bf46180d1982ff8f22846656600cac130d885
6172036d94cf7b715dd0aba8a42c71309b9575b7d7244c82c6c0af897efdf8241c603571bf53babf
2f6c9ef26651be61edfece25f2e2801f15f8a7863554b98daa15f86f0cb3cca5f5cbdabdf9352cae
fb9f49c7b33a198b9e502714ecbdaaee17769a70793133793c8b2e4cc27259ccc49d197bedc0b730
30d0ff7db4a65078b7539370cffab914e9071e4cbee73a874ddc792a4ceade86dd702b2e752f3cba
cddd1b04e67e129fb4ad79f7830a295bfba71474b4e1448e1258ba35843a1a227d36634dd42559ca
893166949ca52d2761cb212859cce7510458d8936ca5edb3699c9d887a2922ddd2112c6e5a3eebcb
52173e7ed0dced07c539a26b70f91b680ab7e10444656e00b2bdd46bfe65deb2fae8eb9fb6abb6e2
e1b18a65b574ab314d13486e7520040a42e1d4a775a21ed11bee255a418177af7bd12a821bcd66e3
fa27da5cfdef23a088abe38ff976199b23f82e950d5a874c5123d426ccf9d75be4023eb009191775
f94890d1b8be94b542064b139f827f411d94db95a59cc926236d82be308984e275deeeca6857e923
ea78477d72b9ca4832aff406a7e236b6aa3c7783377a337167c50da0fe48e77b5ccc6ce7c7495dfa
cfbde8dfc1189a0992228390e4dfaaefbe7a6ebf85dd60e0f0cc5cfc77e9c74607e0f2e65fa0aaaf
0e727ccf14f13644b87abcc1f2d70f5c73462478531396ab3c18b7b61da15071e7c6b5d042d2a392
c981c65c706973255b90e123d9f2f99b442f2d367670f88b8c7c96a38d0679aebc3f90988edc12bf
e157f76b5a995ea6c34d010d77a891ab42f9594b1252d19a1b5abe622197fe72c31bfa936d456493
97dedc6f02fe62d45fd4b0e430b0ac27d8fd1542a7beb0b53988508f46391233c4703da82b36cbf5
9d14b57b6acf57ede9f74dee3adac767b1c7a2b0273e471c541357db1391fd18f8898b3a6c0d0afe
2dbc1e6a341486f94dbb08b1f4c1e178370c175a377faf8f17664f47935b951219eb57a6b59899db
3220184d5e1ba61fbc68f8e04d99ef8a1880f1c6766d015e130615a1ef682ea71280bf85e2ea9412
d91377974dfd383f428e1fcd29d612192c77f9e70082c8aff6138013d362e9a1230169ef1d9c6d37
e89d196cd52e0f4258d58984d9d1f3f4b8de0804e3d13e8342fd36ba81df8f755b4940295992be20
c854d955a5bd74d27788b0e9fa8adcb464212488ab9fae5741e78b292a58f8e8dcefa1b408c279e9
bb46f53cda7061289593d595fc16adf66a5d0886a0e42349c9dc9e32fc63e79ad644067ee1ca75a8
3cf78b6052c96fcbde8b55bf880680a82dc59a7f6668311e211f147d332b413dfcbb8d29a693e3b6
8997c4d3abfe2d68c545adf297b5d3c03dd52977f089d0bdb52fd0756c3108c12b4fef35ddbccaa7
b5120bb485d112e1aeac1413e9368fb4bd3b8d5be891d479ff17482d19af8aaaf9e6e2d7ece5fa7f
db81fb65f63e0be42d7776ca2a9e4e3a46a0ac836deb37d475331ab16d28dc40ad676b3c04b6c2df
0b51efc5326b62a4f55bd7c3113ed7678e06f8efaf2a0f8afdd8bffd72a13d94f4b251cd814ce380
72b967906c8c37c67c2e357c54925087c924aa9abe2003af404f73772ed09bfeab4a6193be190fd4
d0613b0bc73a4c57a3b35ff5c4e1224b6b2b8ce1c595f767ad8d4b47e71263fe74ae08f97f002ccf
32f7e71fab760c4079c0bee6045d0c3cd999c693122d2062886a9b08e7420ca40a68084a74aecc74
f87528d877a13da8a91dde29baa9641171330d675eefd28e5d6ae024205496232991300376f90b60
57f62dd0f91e2a69da9cfa6ffdd8c9efc27c5a650653e5acc63dd7f7daa06422df331afe87d4d2d1
9a50d6b77dda814b7d15d6e3ec1bd34f5fdfc7fa2ac5de4a5c0199f992586e0675be2fe2e554a245
2a974f09e2edfdc75f3fd293cc0009d6322d8f5cb0fe8f7732d8f078fe5f3c8fb09dcfe8392025fd
4767a7ec58921aa53e28d654cf4f3228d82ccb45407e7e07fcecf486cef5e1bec7e82eb283e0e14b
fdf849960733cae747c2a79eaf1ce3356403d7515b38d8ee9a83c039a527fca2a73cc2b821d4951a
961dcc79749232a93072e12cb13aec6f5bc8a0ec4824ef13e1329125e0d36d3d42dd59815917e597
0bc8bf7c6c15f016b00b141535d902780d41c7b04e6423cdd78545a931dca34b3ae7d54b827151fc
32ddfa816f5d19b5cf439b03257125d019becfae85708ec77f339694ede1461525d7f2a9fc6ca553
4d46abb9fe33b7d125ee0fc5cb2d763a716d709b442964c057cf75c8b4cb906a55c076e86f7d22ee
ff994eafdfc8b1ae792d4df578524d56b37c64d41b5d52210f910f2e7c62a5e7ff02b4aa43f488c0
57436276612bc35974b630692048a58517b334441fea6e5ee396f73048068ba09078426e4171080b
d2e46a368f285aeeabaef798f7e37147a8192bce3b4ea24ae3273bc7f71338a4a01f2bf32a90bdf6
17bb359b23360dd0931f423ad6d8479fca50349f5fd6b70ddf9c106e87b1a6248bb38294a27818b6
5364be0c24151aadea79945877bb60465950004ca1698e1cdf4f84232dc529d8769f8497414b273b
6d105f4327546429a25acd0a919477dda5173ad4a9813e0640c275038488e661684af45edcdc0e2a
5ead67461c575577901ea22a41c4351f5c0b35cf8a0380b22b25c1d81b20081b5c1e64c9604c5df9
832a3e7f780a509ff76627cd0c91d7be027dac479ce1ac24f41e73544f6e99af6c9c64510e8ff7d8
3026ae42aaff35175c2d9c3a760b94c82dfb7b9d54e65758b1d21da68ba239684831d331be043b4e
22bc7e55eee759c4b828b44208a9064b1546c0217af9bcebc0837ee253cc59cd0e4caadb9b8d113d
8d0bcc666733bf73ee9af835ae9ec2fb8982f85e944c8c5a571cabf08dc1e46d49c722893349378b
cef95730b71b0c11b95c880e2bb87f09d3e33257543bfe488c993a9e87461552b756e7e6343e49d5
64b0d4a24c889ce4d1a67449318c519db311d0725dd04e6dd7e936035efa2cdd23a9194f5192a93e
0b69a1cf3adedef1ae2c86672d6c03f3e2759fc31b4d6e219c4f36ea1d235bc5f3ec94c0c341f59d
0e91b184c0f0af12704359cb0e060f25b14369e3acf260c502185714e598452d5f8d7af130739fdb
440636de788631217c26d529ae704f0f6df676ce878a5940b1cef52576b8ac2d4ec803cfc788d34e
edae1ab5d56f0c4ce367549e58200b14b404f80eb3fee5d971d6f0f97aea1d32bddadc9e1933db60
0e8331d1718a7c8f4caf8ee2e89d9575e4bd2117396c18534aa88fcd806b912062e8a3610f0d5fe1
30cfec30886d94ad9bb1644e79989f39647f7ea4d005d9875ad0e89a8052af05935e7d690ecb3a8f
27458988ca55b845762a05915c2e89bc0baa3ddc0b843a098b7af182f23588ab995791f795325048
b6fa16f5b9e0ceb7e2e4b6b92b431084825551b728a56da28d0067a5ad53bad3239885d1762ee646
003a9de01405ee8715baa7824b5507380a8b1c47364851cc7a381b5901d8835f1e05eab8e6591386
cac2a23e41eb915b971114486026842d4236721a7b14c5873d46cacd643b92db448d20a7aad4642a
9f730dd131ee5cb544ef5c9b79fd85dd50ce98853ff0f1c565cb02692d20132c1588e0f68a1c494d
df5e8b382fb4e3730c67a61b63936f3ff40e8fa5149ad9e6c0133952f301c4b97ca914c5e550bb01
ab3f2fcd5abff414d5ea2bc280c96d9a8ea122ab90edd8c2726a67849ed2aa364e3aa0c322fe3d94
990d3b227fd423e603bd6c4c2dcaf043d7c78512f724816ede16738565827622935ef30688c96365
dbcbeebc64942fd7ce98d48b7bda5fe2935fbab95740f8c92d085cb5c8fa8b1d5256c429d76578a0
263361ebe64a77a022eedf77d50a98779361c239273f5f30a8822a8d915a2d6b7fc507b8182a15a2
2e1582744942ec81d71f8a2bfbef38a84236de7ff6ced374159fcb80dbd9fb6f061b9055c3dc70be
0d4b6e1ce605d8af8cff2f281f394a116a6eb0437383fb1484c147526d3d33c5d876055096b164c1
bd5d93962328c0ad80a031fa1f2ce62b06928f1ba6c87ee712bc8f4755906d40482d6dae3b2bbd05
b375fd98a21d11af6f34d6c3cd6a96860b7a0ab6751ec010df498269b2772f9e6b42e294e509a02d
214401dbe11c0e5cef0b114b42f0517b69d0e92ced6120ce380960cb4c69771deae14678e8cd253c
ccfb4e897e7fda51fafb574cc6ac938b759df20c6efc5836e78217e0e7456366c9f8b01d330e9668
e7ab71c40b2d52b086fb4656e97a0909b1f53623df0e3b5cbce4801c88e6378fd0ad4c6b955da3c5
96f1b426b964815751599169eb4fc59a1c84e63e0ea0d9a41c33a2c39a6c2318b29be9326cfd7232
4407aa3c66f0b579f8001e40fe90bbb2e1681a8753f130384da59c8628d6bf06eceff42c304841ae
4bb0245a71c6a6380f1ce197decf3791634d8feba382440cf837911f2a8ab6ca8ac408577f0c0750
a7b6fc5b3275fcc8bac4d2cc00a5ea412238c8296ee0fbb7f0f60001f9f57e79bccb1d5bd5058ef7
b7cb7a4119378585685e865233bbc83e7569d77e6f46fb031361eda43e37b9db5fd0e7c0a8df22aa
e76d69c1d0784b02fd084c299fa40556eecc1d33be8483b1aa294ad1032e44c1baf9ab825925b2b5
027df68baaf602d397e6d6a4d4776be5c2dec3aba72c41ba4be3a082fa372a5454e688817ba5e232
d4ded32118f63ae44d104171383fe7754ddd18db61dc589556905a21288120391ff916918f207649
d640b233bc4ab10b4e640d88401f5561215754745296d95534a4b35a0d3c3eeca1c13e5905f52c7d
53fff594b7f3d6fef9e582f26882270c766a64a6152025a73fc115425c784d7346a5cbc3470472e6
9ff0bc082af0b1e0a1831fe3ccc8bfba4e77fb1d303e028841d0af24de1c041abfec0c3c42933a87
33046522bc72ce0fc60967d4cdbd95d40baee5e8ce5315e08ade1898bdb59eccb9aefa38181711cb
39ea65064c37f6b586fca2afb4f25b91702b2d6750c47dbedf67e93c09cb98d3e0ae5a055ac66a25
30969bce8f4b86c7a7bff88d8221ad075f61104f8b3f1cd37f9cbfcb117f1263c52ce283fbee5d3f
35d221f0b19b57e152a0b56882278cafb13441fb351e43a8d6194604841ebdd09326464982658236
3b93fad5de0d78f57597a8e8465e7b0e5bdcf2d11c39bbdf9fc14bdd79ec32fd2d4d59605fb37d27
2fa5d5c462507c15cd6d871cbf89d18a80d6c34cc023f8983e9332bdbc6a73764e1d0e5e3c75b6e4
ed4521f3e8ecb18a8ad76ec133f0dd6a9a0b21f7d83cf4d6dc1d60ef4ff887c7b660412cfef76bb4
117a742696929f55cc2107da93b724c2b1ce9027464301a29fd8565074617afd74eb524dc7457134
f53e3e71779dd6da0fa9543b0ed9e8487134508785930e0fb9a5f382fcbd42caade894130a379bb8
7939bb1f14a2908933359868ce70c5ce92d24c6b0d4d2c39f7903b885667dfd6215be1d71a0faf8b
f19d6441d030206c1da8fed522f760a31f684ef83aff20812a366315f3bb03f81e5e9f4eb481f9a3
cc525d09278f82c99141da29fbb306f8cc6c7af6a3364be055df82f935cf7a419acfc3b731c42a3b
bcd00a1b517b6be5bb9aab4c6eae701d6c9b2bbefb04ce524702e5d3de6a468f950bbbbf64c491ed
70b548e37e2b46cb22f8d6f382068fb3c7ad4b534f9a8fd0dbb49f7f09a4e1de1cf3f8faa2108831
da9f3930e17615b50ac22d0d32253f76914db7745833861e48e5131b8c66711ab0e0be8ccac078c8
c659510ae483c992d2c070decfd2c1172b59449f96a2fbc38c51ea1badac20c469751c0fbe271b69
94bca2ed83210292f5dcc447941336e3d6c0d0ed8c1fe3bd707175e31ab3829eb548112fffb74e2f
e0de10d428d4e95a9b2161e14bd4402264a01e8555e8cca56bd5faf7fcca4a2036c6430997de4d59
a2bf5b30d087df630095dc1d78379204dc04e6b9a9b7cba072aa6730794b2521fe59d32f56b0fed6
25ce92b4dd9a68104598bd9bf63f791252833777b925cda2fbfef95ea7c529183cc14f61c4956c79
2da931504da1efb40140f8a35c99f5fd58331f159956cf53038321c5fbf160b1ae16561cc18fec4b
cf88a73fcb9a43ec3d3b98a7c56a968071edcbfef7941c369eb42f623f9b33902dc12e2d303210a2
8e5f97d95ea2dd0846d13982b694a79ae7a9a490a7e4ec3c76ebc4866a539ccdc3d78c62c54e32c2
268b1bd4e0dd7fb5226f32f9c3564aa0efddb4301c5d5f2caaf9846cf14d5014ca281d2dd6771402
9bacb54fdc8ff44c7b3f543ac36918917c6a3884717e63b930bd3796d313ebb3837f78255d46aa4c
1f7d6520ad27e5d2e4ef22e2ad97f6f1dd41da7ee81adbe81c19dda934efcd7f106674abe0eca9e0
6593ebd6a8dcec0f41cec574034b96b9d9c415cc8e118770ed8ca40d2bd04ba2caccedf27ee22a5b
ee676a951133c41262a2dbb937bacb2c19e6533b8a3efa7ddd895c0d392ddd6dcff6f3170d76ceb5
6804dd8ce1a7fd24518e22de4b31d476dab47832d4095f0760cbd507b590661036d4805a1cc87fc5
08ac951c5ecc3c2d192c5424573d38517a07920b5e7ea9ebe04c807b6c0b0d41bc89bf05be8978d6
8688520efa4f08f01050548f61320c43ff525f4e29843fe13695353c4449a04773593a6fdf52f6cf
74ad4dc6f02c2108b5a00b39b61d6320caf87b0732540f523cd465f3e5fe0e761618c5813c53d4a3
0488d11aaf0d13b7a5b8021d6a41fdf0532d9adadc663a7cb0518b67e1dba20fc7e02d749a9a42a3
8f1bcbf1c0c62b5ea9ba6f1473df9b1124186acf7ec7bc33649bcc159698f171c3f8aae6068d3845
02f3a83e97d842c5874d566c70a065717376ae9bd1832100c5bd8df921e31be8506bf0fe361242c7
7b366e653648ad26e21cb8f52ce9d671dd0b59839d22ce31432f3be31db1f6a275c94e786bc822f4
c9a8a78c5dd8ce9b72f3720c67a1daea0ef7569bdb7d44d933abde7b96779fcada2abcec41ed5dd0
774e6ff59e1368ed235692cc6a6ed7fc81128b8cfa5aada8a041b68bccba6aa6305cf9d110514073
bc3d641d40a4f1ed1dad898f0d4eb825ec2ccea2290e8e682734d8f8f1b892f14882237514c5fd80
2c6f9bf1271f30502e85f91cf4308e40ddff3c78da1945d7fa4697e55fff1e0f3c7f814b33e6832c
549322c729c23d70dc494060a003d30eae306f8adc91d14352638a296c027920c52a08d21430fad7
8fe8c29839789a739df18eae77e6ff983188a4f7e2ce2690f83dfd73865abad292331e68752bda46
4559668709cdb16b052c8bb28f74e93502133cdd6be53a089c9addba3c3c296975ec81154d192ef7
3be7fb9059344a220c1afe86bb832cdd296a065736e53d836e86828398e54b4489a16410b22df46c
a975403633c6e6841585da5e25881e061af061c237312d8304c634da073bcad0a26a6c63b3b7ed4c
44426b0206c78a40cf01aa6f6d1405277ca5cea8ef8b20b9d4d2aa8ebebc40e0be190a92280557ac
1488c6f8968af6c6a61bfe507dc260ab65b3c43fc2087e739168125ebbe1e014e2d891879a283eeb
117fff76ac61ebd31f5ba3dbb939b74bfa48653730351ab3c5aa3c93745f6026d64238db01f6f32e
167564ac2c6b7f4dce5f640d5cc7ff52b5e1ae8aa73cd0ef0876349266d73b34c52cb966edd25f24
c920a6f978435620721213b8c28aa13a414fae9578392664c6eb8da5f9ef962162a299f4f5bced2c
5fac790daeaca047bf27c45c37657ca283a750e9d85547b723c3446d69284ad52ed160b1ef69b9b4
526387521d2240199ca39333ca7858d55b60b2420f5a83ef623cd999df0960faf9f6c9a30d41c9dd
026d1f52bdad9628545dba809135b3b66b08da2291e887bff12593d668f11f4f936c75f044e41bbb
8a315586f2d2b3b6e3ea4a5bbb9ed1ef3edb6a0951b54490e8b0060824a31e291f5ded80cd8b4a89
275e567353c6b488561edc831a185a35b0424eb2b6808929b2c9b948fe77f9a7ff725c679dbc625e
2db47b0a0fd4b6e36763c86b4c863739ce7755405d552d121840f411f778c12f65e0ad2c130baf8a
0b1aecf2c90b98dccaefd34564a4fe68fef1979d6a1102af79ef04b23b8d56f6c0f2f323dbb8ae7d
aa4bf114aacbe8d7ed02a945ca25f42736070f4bcac5733bd8250116265f119fb0829e73b13e3dec
30cb391f40d5e9fc0a1145385e665658698bff601026ec79469856df28a94ba213e5b463d874fc16
6e155aca94ffb57a49cf32fd1ea5b9e6c64243c6fdee4c6352b20e87c6c8f472e5f9498b0cfa47d7
f0d3ecb6973a7bad7fe538fb4e73bd22575373730e112e4a848db3d585e0cfbe0277efe63ee71502
41644c2d250fea1dadba1b441afa18dc61b5dbf674642196d5b1480f88978b921b956218585ebbfe
4b852129a72cd246d7c346545fa435423894323681a3683c91d36353e5383770a4ab370ca340752c
480f2df4633079d824a6b6bcb398828edd7fc3ad86c63660f0a54443b475816152a0c285d43231d8
ca1c24401d60c32ee5181e93acb6deccc10805791c1efab8876b3d3937b6cbb41a47edb31287ba6d
547c094027b3b5bf49abcb4e7cf7f87765cf5207b335e54cde507583dc83d1e9a93acfd6d0c62f7e
72141c925ef31be03050a9c4bd83faf5530e7f1c38327d4e9f13f2d4e2147184f7b5461563563ded
e6078aec85c488cab6ba9faa6e4304e4047e80cfc217a43565db7f1fb07a13e04d90c3817174aa7f
e6419f4fa3d62339e4abf5106d6f8a773c9795ee678ba9a49cc17c4736acc39daa70fac26c4ddd3d
cbb3e966b8cd3837ba3a520a7554961326cbf1d980f094825b53f4db2073b899a5cd87eb6d2d3e85
b6c090aee079149d6edb51ac2bdfc49f323fcae426c0e4c90abdb0c2248a1c6b7ee81c437ae37acc
4adc41ef36121d6e96e6bd8c9876c37a0abd642341128477345e32904a5a1d553bbe77871990e2ad
21b30154ede52a4c1ab96175cd175fddd03be3d281fb323cc190f639db47ba25ab70dac426ac9449
ef4f59bda95808588ba14bff65428dfa01c063e40f1849f8108e6a153aa55088b09eddfedf954b36
3952f17d96adbcbe1986eb72842693b78b9a4b745c4c15b7496f0569ab7c818c05a2018e13cd7880
f50fc6c9a6424dd8d997b0acf7db255f29da1b8eff6c713d4728bd30cfc2e53ecffd77c1a3285f95
9a2f01c6d4af95d8ffc1ab1001aac90dd95b5c1a3e6542daa6fc42fc19208c2ea884ea55bbf58228
91e7903d20a2758c633ba51804b5de37070d4f26040f8db007de381e379e58dca61ace06e0dc0d3e
03b5979dcd2e270206d6a310e322ff2d7d533e7267990ae32b71075c1481e73a8d64b6b39deb331b
0b76af3306f4a9e6968fab8c1d61e7b518ae962d0b9edfd98ce2920ab22689766beb08e1669c74f2
167fcc02ad79052a7cb1e84ea275cc2f9a35001fcafdcdfd5fe9c191cbb7f81e60053691ed00f3a8
0e7fc0ebcbb75bce0c7e963de1666ecf29e0340379b7e0bcea1220ca71fd31d7b2cb312fdacc1340
49cf0b6259a3bea2d8ca51becb3d52e382e1f70d81e59256d42b3a79c8a094ab0447009c2b021970
93b231436132bccea13ca65f2e8baf0c7b72b6f32c3bc0d4c4f102cde13cdcbdf75dade7898b39a2
409b0871a81d5d73ec00c64755f60743759fca44254d0a1ab9e2dda37d2c37bf41be8330dea53e41
e22664968c619d
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
 PWM_ramp_UP <Virtual>  0
 get_X_Z <Virtual>  0
 HBW_manual <Virtual>  0
 lift_sequence <Virtual>  0
 load_conveyor <Virtual>  0
 Unload_Conveyor <Virtual>  0
 Unload_Rack <Virtual>  0
 reset_switches <Virtual>  0
 VGR_pickup_conv <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_MPO_dropoff <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 HBW_PWM_On <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC400 C400 17"

// Rung VGR_Copy_State#2
// Offset 8
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State#3
// Offset 25
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State#4
// Offset 29
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
OUT Y23

// Rung VGR_Copy_State#5
// Offset 32
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C411
OR C412
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State#6
// Offset 49
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C411
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State#7
// Offset 53
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C412
AND Y89
OUT Y25

// Rung VGR_Copy_State#8
// Offset 56
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C413
OR C414
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State#9
// Offset 73
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C413
ANDN X27
OUT Y26

// Rung VGR_Copy_State#10
// Offset 77
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C414
OUT Y27

// Rung VGR_Copy_State#11
// Offset 80
NOP

// Rung VGR_Copy_State#12
// Offset 81
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C415
OUT Y28

// Rung VGR_Copy_State#13
// Offset 83
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C416
OUT Y29

// Rung VGR_Copy_State#14
// Offset 85
NOP

// Rung VGR_Copy_State#15
// Offset 86
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction#9
// Offset 56
NOP

// Rung VGR_Suction#10
// Offset 57
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
NOP

// Rung MPO_Copy_State#2
// Offset 1
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
NOP

// Rung SLD_Copy_State#2
// Offset 1
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
NOP

// Rung SSC_Copy_State#2
// Offset 1
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block get_X_Z
$LGCMOD get_X_Z

// Rung get_X_Z#1
// Offset 0
NOP

// Rung get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7640 N203 1"

// Rung get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5300 N203 1"

// Rung get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 2900 N203 1"

// Rung get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 450 N204 1"

// Rung get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung get_X_Z#10
// Offset 81
RET

// End of Code Block get_X_Z
$LGCEND get_X_Z

// Beginning of Code Block HBW_manual
$LGCMOD HBW_manual

// Rung HBW_manual#1
// Offset 0
STRN X0
AND C2
OUT Y51
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_manual#2
// Offset 17
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_manual#3
// Offset 34
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_manual#4
// Offset 51
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_manual#5
// Offset 68
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_manual#6
// Offset 70
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_manual#7
// Offset 75
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_manual#8
// Offset 92
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_manual#9
// Offset 109
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_manual#10
// Offset 111
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_manual#11
// Offset 116
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_manual#12
// Offset 132
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_manual#13
// Offset 148
NOP

// Rung HBW_manual#14
// Offset 149
RET

// End of Code Block HBW_manual
$LGCEND HBW_manual

// Beginning of Code Block lift_sequence
$LGCMOD lift_sequence

// Rung lift_sequence#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung lift_sequence#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung lift_sequence#3
// Offset 5
STR X10
OUT C200

// Rung lift_sequence#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung lift_sequence#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung lift_sequence#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung lift_sequence#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung lift_sequence#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung lift_sequence#9
// Offset 33
NOP

// Rung lift_sequence#10
// Offset 34
RET

// End of Code Block lift_sequence
$LGCEND lift_sequence

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4 0x0 MHR1 N300 1"

// Rung HBW_Copy_State#2
// Offset 13
STR C25
OUT Y39

// Rung HBW_Copy_State#3
// Offset 15
STR C26
OUT Y40

// Rung HBW_Copy_State#4
// Offset 17
STR C27
OUT Y41

// Rung HBW_Copy_State#5
// Offset 19
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block load_conveyor
$LGCMOD load_conveyor

// Rung load_conveyor#1
// Offset 0
NOP

// Rung load_conveyor#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 54 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung load_conveyor#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung load_conveyor#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung load_conveyor#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 54 $HBW_Encoder_X.Acc
OUT Y6

// Rung load_conveyor#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung load_conveyor#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 54 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung load_conveyor#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung load_conveyor#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung load_conveyor#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung load_conveyor#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung load_conveyor#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung load_conveyor#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung load_conveyor#14
// Offset 125
NOP

// Rung load_conveyor#15
// Offset 126
RET

// End of Code Block load_conveyor
$LGCEND load_conveyor

// Beginning of Code Block Unload_Conveyor
$LGCMOD Unload_Conveyor

// Rung Unload_Conveyor#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 54 $HBW_Encoder_X.Acc
OUT Y6

// Rung Unload_Conveyor#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung Unload_Conveyor#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 54 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung Unload_Conveyor#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung Unload_Conveyor#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung Unload_Conveyor#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung Unload_Conveyor#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung Unload_Conveyor#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung Unload_Conveyor#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung Unload_Conveyor#10
// Offset 68
NOP

// Rung Unload_Conveyor#11
// Offset 69
NOP

// Rung Unload_Conveyor#12
// Offset 70
RET

// End of Code Block Unload_Conveyor
$LGCEND Unload_Conveyor

// Beginning of Code Block Unload_Rack
$LGCMOD Unload_Rack

// Rung Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung Unload_Rack#9
// Offset 32
NOP

// Rung Unload_Rack#10
// Offset 33
NOP

// Rung Unload_Rack#11
// Offset 34
RET

// End of Code Block Unload_Rack
$LGCEND Unload_Rack

// Beginning of Code Block reset_switches
$LGCMOD reset_switches

// Rung reset_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung reset_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung reset_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung reset_switches#4
// Offset 6
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung reset_switches#5
// Offset 8
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung reset_switches#6
// Offset 10
NOP

// Rung reset_switches#7
// Offset 11
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung reset_switches#8
// Offset 13
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung reset_switches#9
// Offset 15
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung reset_switches#10
// Offset 17
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung reset_switches#11
// Offset 19
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung reset_switches#12
// Offset 21
RET

// End of Code Block reset_switches
$LGCEND reset_switches

// Beginning of Code Block VGR_pickup_conv
$LGCMOD VGR_pickup_conv

// Rung VGR_pickup_conv#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_pickup_conv#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 1880 N1005 1 0x0 1850 N1006 1"

// Rung VGR_pickup_conv#3
// Offset 17
STR X25
SET C600

// Rung VGR_pickup_conv#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup_conv#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup_conv#6
// Offset 24
STR X26
SET C601

// Rung VGR_pickup_conv#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup_conv#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup_conv#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup_conv#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 810
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup_conv#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 810
ANDLE $VGR_Encoder_X.Acc 840
SET C603

// Rung VGR_pickup_conv#12
// Offset 64
STR C603
CALL VGR_Suction 0x1 DST511 "3 545 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup_conv#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup_conv#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup_conv#15
// Offset 82
NOP

// Rung VGR_pickup_conv#16
// Offset 83
NOP

// Rung VGR_pickup_conv#17
// Offset 84
RET

// Rung VGR_pickup_conv#18
// Offset 85
NOP

// Rung VGR_pickup_conv#19
// Offset 86
NOP

// End of Code Block VGR_pickup_conv
$LGCEND VGR_pickup_conv

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 5 0x0 0 C600 15"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_MPO_dropoff
$LGCMOD VGR_MPO_dropoff

// Rung VGR_MPO_dropoff#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_MPO_dropoff#2
// Offset 8
#BEGIN FMT_COMMENT 
"Should be really close to all the way up, but reach limit "
"as vacuum dropoff does not guarantee this."
#END

STRN C600
ANDN X25
OUT Y22

// Rung VGR_MPO_dropoff#3
// Offset 11
#BEGIN FMT_COMMENT 
"Rotate to MPO, two preconditions should already be met for "
"safe travel through the factory of this function won't work"
#END

STR X25
AND X26
ANDGE $VGR_Encoder_Rot.Acc 35
OUT Y26

// Rung VGR_MPO_dropoff#4
// Offset 18
STRLE $VGR_Encoder_Rot.Acc 35
SET C600

// Rung VGR_MPO_dropoff#5
// Offset 23
STR C600
ANDLE $VGR_Encoder_X.Acc 3300
ANDN C602
OUT Y25

// Rung VGR_MPO_dropoff#6
// Offset 30
STRGE $VGR_Encoder_X.Acc 3300
SET C601

// Rung VGR_MPO_dropoff#7
// Offset 35
STR C601
CALL VGR_vacuum_drop 0x1 DST511 "3 2000 N1000 1" "3 C613 C602 1"

// Rung VGR_MPO_dropoff#8
// Offset 47
STR C602
ANDN X26
OUT Y24

// Rung VGR_MPO_dropoff#9
// Offset 50
STR C602
AND X26
SET C603

// Rung VGR_MPO_dropoff#10
// Offset 53
RET

// End of Code Block VGR_MPO_dropoff
$LGCEND VGR_MPO_dropoff

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_vacuum_drop#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#5
// Offset 35
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#6
// Offset 41
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#7
// Offset 48
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#8
// Offset 54
NOP

// Rung VGR_vacuum_drop#9
// Offset 55
NOP

// Rung VGR_vacuum_drop#10
// Offset 56
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R103 50 R900 R902 50"

// Rung $tFirstScan#3
// Offset 21
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST2
RUN MPO_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST2
RUN SSC_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST2
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR ST1
CALL get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#3
// Offset 22
STR C10
EXIT

// Rung HBW_Program#4
// Offset 24
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 32
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#6
// Offset 34
STRN X11
OUT Y7

// Rung HBW_Program#7
// Offset 36
STR X11
SET C110

// Rung HBW_Program#8
// Offset 38
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#9
// Offset 41
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#10
// Offset 44
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#11
// Offset 47
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#12
// Offset 50
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#13
// Offset 53
NOP

// Rung HBW_Program#14
// Offset 54
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#15
// Offset 56
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#16
// Offset 59
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#17
// Offset 64
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 N300 1"

// Rung HBW_Program#18
// Offset 75
SG HBW_Program.S0

// Rung HBW_Program#19
// Offset 77
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#20
// Offset 78
STRN C100
OUT Y50

// Rung HBW_Program#21
// Offset 80
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#22
// Offset 82
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#23
// Offset 87
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#24
// Offset 90
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#25
// Offset 92
NOP

// Rung HBW_Program#26
// Offset 93
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#27
// Offset 95
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#28
// Offset 100
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#29
// Offset 105
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#30
// Offset 107
STR ST1
ANDN C102
CALL lift_sequence 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#31
// Offset 120
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#32
// Offset 125
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#33
// Offset 127
STR ST1
ANDN C103
CALL load_conveyor 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#34
// Offset 138
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#35
// Offset 147
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#36
// Offset 149
STR X2
OUT Y48

// Rung HBW_Program#37
// Offset 151
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#38
// Offset 154
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#39
// Offset 156
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#40
// Offset 159
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#41
// Offset 161
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#42
// Offset 163
STR ST1
ANDN C103
CALL Unload_Conveyor 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#43
// Offset 174
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#44
// Offset 177
NOP

// Rung HBW_Program#45
// Offset 178
NOP

// Rung HBW_Program#46
// Offset 179
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#47
// Offset 181
STRN C100
OUT Y50

// Rung HBW_Program#48
// Offset 183
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#49
// Offset 185
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#50
// Offset 190
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#51
// Offset 192
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#52
// Offset 194
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#53
// Offset 196
STR ST1
MATH D103 "D102 - 380"
MATH D104 "D102 - 420"

// Rung HBW_Program#54
// Offset 213
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#55
// Offset 218
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#56
// Offset 223
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#57
// Offset 232
SG HBW_Program.S9

// Rung HBW_Program#58
// Offset 234
STRN C103
CALL Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#59
// Offset 246
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#60
// Offset 256
NOP

// Rung HBW_Program#61
// Offset 257
SG HBW_Program.S100

// Rung HBW_Program#62
// Offset 259
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#63
// Offset 262
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#64
// Offset 265
SG HBW_Program.S101

// Rung HBW_Program#65
// Offset 267
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#66
// Offset 284
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#67
// Offset 287
SG HBW_Program.S102

// Rung HBW_Program#68
// Offset 289
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#69
// Offset 306
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#70
// Offset 309
SG HBW_Program.S103

// Rung HBW_Program#71
// Offset 311
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_Program#72
// Offset 328
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#73
// Offset 330
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#74
// Offset 335
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#75
// Offset 338
SG HBW_Program.S104

// Rung HBW_Program#76
// Offset 340
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#77
// Offset 357
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#78
// Offset 360
SG HBW_Program.S105

// Rung HBW_Program#79
// Offset 362
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#80
// Offset 379
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#81
// Offset 381
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#82
// Offset 386
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#83
// Offset 389
SG HBW_Program.S106

// Rung HBW_Program#84
// Offset 391
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#85
// Offset 407
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#86
// Offset 410
SG HBW_Program.S107

// Rung HBW_Program#87
// Offset 412
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#88
// Offset 428
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#89
// Offset 431
NOP

// Rung HBW_Program#90
// Offset 432
SG HBW_Program.S98

// Rung HBW_Program#91
// Offset 434
STR ST1
JMP HBW_Program.S97

// Rung HBW_Program#92
// Offset 436
NOP

// Rung HBW_Program#93
// Offset 437
NOP

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR X60
ANDN CT5.Done
STR C419
CNT CT5 V400

// Rung VGR_Program#3
// Offset 13
STR ST1
CALL reset_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 21
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#5
// Offset 29
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#6
// Offset 31
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S100

// Rung VGR_Program#7
// Offset 33
NOP

// Rung VGR_Program#8
// Offset 34
STR ST1
ANDN X25
OUT Y22

// Rung VGR_Program#9
// Offset 37
STR X25
SET C500

// Rung VGR_Program#10
// Offset 39
STR C500
ANDN X26
OUT Y24

// Rung VGR_Program#11
// Offset 42
STR X26
OUT C501

// Rung VGR_Program#12
// Offset 44
STR C501
ANDN X27
OUT Y26

// Rung VGR_Program#13
// Offset 47
STR X27
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 56
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#15
// Offset 58
STR ST1
AND C300
CALL VGR_pickup_conv 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#16
// Offset 69
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#17
// Offset 79
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#18
// Offset 81
STR ST1
CALL VGR_MPO_dropoff 0x1 DST511 "3" "3 C603 C500 1"

// Rung VGR_Program#19
// Offset 91
STR C500
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700

// Rung VGR_Program#20
// Offset 101
NOP

// Rung VGR_Program#21
// Offset 102
SG VGR_Program.S20

// Rung VGR_Program#22
// Offset 104
NOP

// Rung VGR_Program#23
// Offset 105
NOP

// Rung VGR_Program#24
// Offset 106
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#25
// Offset 116
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#26
// Offset 124
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#27
// Offset 149
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#28
// Offset 166
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#29
// Offset 170
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#30
// Offset 174
NOP

// Rung VGR_Program#31
// Offset 175
SG VGR_Program.S2

// Rung VGR_Program#32
// Offset 177
NOP

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

NOP

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program"
#END

NOP

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW_Reference_Switch horizontal axis"
"X1","HBW_I2","","HBW - I2 = Light Sensor Inside"
"X2","HBW_I3","","HBW - I3 = Light Sensor Outside"
"X3","HBW_I4","","HBW_Reference Switch vertical axis"
"X4","HBW_A1","","HBW_Trail sensor LOWER"
"X5","HBW_A2","","HBW_Trail sensor UPPER"
"X6","HBW_B3","","HBW_Encoder_Vert_Imp1"
"X7","HBW_B4","","HBW_Encoder_Vert_Imp2"
"X8","HBW_B1","","HBW_Encoder_Horiz_Imp1"
"X9","HBW_B2","","HBW_Encoder_Horiz_Imp2"
"X10","HBW_I5","","HBW_Reference_Switch cantilever front"
"X11","HBW_I6","","HBW_Reference_Switch cantilever back"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR_Reference_Switch Vertical axis "
"X26","VGR_I2","","VGR_Reference_Switch Horizontal axis "
"X27","VGR_I3","","VGR_Reference_Switch Rotate"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_B1","","VGR-Encoder_Vert_Imp1"
"X57","VGR_B2","","VGR-Encoder_Vert_Imp2"
"X58","VGR_B3","","VGR-Encoder-Horiz_Imp1"
"X59","VGR_B4","","VGR-Encoder-Horiz_Imp2"
"X60","VGR_B5","","VGR_Encoder-Rot_Imp1"
"X61","VGR_B6","","VGR_Encoder-Rot_Im2"
"Y4","HBW_Q5","","HBW_M3 vertical DOWNWARD"
"Y5","HBW_Q6","","HBW_M3 vertical UPWARD"
"Y6","HBW_Q7","","HBW_M4 Cantilever Forward"
"Y7","HBW_Q8","","HBW_M4 Cantilever Backward"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR_M1 vertical axis UP"
"Y23","VGR_Q2","","VGR_M1 vertical axis DOWN"
"Y24","VGR_Q3","","VGR_M2 horiz. axis BACKWARD"
"Y25","VGR_Q4","","VGR_M2 horizontal axis FORWARD"
"Y26","VGR_Q5","","VGR_M3 Rotate CW"
"Y27","VGR_Q6","","VGR_M3 Rotate CCW "
"Y28","VGR_Q7","","VGR_Compressor"
"Y29","VGR_Q8","","VGR_Valve_Vacuum"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow"
"Y41","SSC_Q7","","SSC - Q7 = LED Red"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW_M1 Conveyor Belt FORWARD"
"Y49","HBW_Q2","","HBW_M1 Conveyor Belt BACKWARD"
"Y50","HBW_Q3","","HBW_M2 horizontal Towards Rack "
"Y51","HBW_Q4","","HBW_M2 horizontal. Towards Conveyor"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","HBW_PWM_Conveyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW_PWM Horizontal Axis M3"
"Y82","HBW_PWM_M3","","HBW_PWM Vertical Axis_M3"
"Y83","HBW_PWM_M4","","HBW_PWM_Cantilever_M4"
"Y88","VGR_PWM_M1","","VGR_PWM_Vertical_Axis_ M1"
"Y89","VGR_PWM_M2","","VGR_PWM_Horizontal_Axi s_M2"
"Y90","VGR_PWM_M3","","VGR_PWM_Rotate_Axis_ M3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C9","sg","",""
"C10","","","Software STOP"
"C11","OUY","",""
"C28","stg","",""
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C400","","","Program/Sub Reset Flags"
"C500","","","VGR programflag 1 "
"C501","","","VGR programflag 2"
"C502","","","VGR programflag 3"
"C503","","","VGR programflag 4"
"C504","","","VGR programflag 5"
"C550","","","Vacuum On"
"C551","rst","",""
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C606","","","VGR subflag 7"
"C607","","","VGR subflag 8"
"C608","","","VGR subflag 9"
"C609","","","VGR subflag 10"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C614","","","VGR subflag 15"
"C700","","","MPO material in oven"
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N900","","","VGR progshort_int 1"
"N901","","","VGR progshort_int 2"
"N902","","","VGR progshort_int 3"
"N903","","","VGR progshort_int 4"
"N904","","","VGR progshort_int 5"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"N1003","","","VGR subshort_int_4"
"N1004","","","VGR subshort_int_5"
"D0","ON","",""
"D13","jmp","",""
"D103","","","Rack Unload Z-height Lower"
"D104","","","Rack Unload Z-height Upper"
"D200","","","Column Index Sub"
"D201","","","Row Index Sub"
"D202","","","Starting Z Lift"
"D203","","","Ending Z Lift"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"SK1","End_HBW","0","End_HBW"
#END

