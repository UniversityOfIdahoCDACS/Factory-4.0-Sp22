// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jeffr\Documents\Robotics_I\Repos\Factory-4.0-Sp22\Factory-Sp22.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
452a986278aee20c07821a5eb3f3713726171eaef41c46506feef40632dcebaf7fc2c7261600d88a
426cfb704bbbc6241ece62adfdf9ec85f6ffef954593fed7ef0eab8456f0dca47d0e61b963f3e804
307fe06651f6050581aa085e0ea9b787067c1f8c1774e96f55a31fa5974ed1842ce4b3f86859bdef
93d04e704bfb799801b72eab023f7935d2be2d2cf00266b44e44709079f345910be7b7022f066fc5
a6ab50faa7fe4dad7ea2d94254126f07028b99f6f4d43feac69bd351ad691416a3d0a41b87ab0500
c1004ef6084e4a2874471ba80826f3c136516e27a6f994fb5810fd387ebca436eb541cd7017c011f
b9499a9b2981c70081edb96a692e87e46b3fa6bd5a6421a81964335c83e9d12aacb68b34930a90bc
96683b8808aeb5de5052d01230ece47c8dc71819701e82dbe07fbbf4be5b38e3952af582808f5a25
cbd8052605d75be3b8b18d21c9ed7ed9324868f74f307abfb6cf7972fb9737a27248430fc0e8adf3
ba92eb6a4b53143a5315175d7fb2c88a79997f9090d166b78a0db540b25eb448ef43279c10e64476
324473b1972677273376896f0fede2dc8c84ada595ef8249dd82da65bd161d35281347be51d99041
6e99cb94e4018f13695e160fedf2d8af44f6458b6002d40eeabaccf96cefd18fbcc8b2de015e3adf
30920d82c5b83d6e63bb8449d79ba14108d3ab0413e4cd7720566c523e860f3376466e6b7d32e015
c7e4f93180adb73cb88c219549e937840ec1f3075cb3073229ec3148c103641be526f1c5cd27cfcd
bd7cdbf1a6ce4d62cab60f5651e5706c4e0d86fa2d14970dc61cc18b869c187bd29723945f9551ed
8fd647c8e84ef969a76b56af3b519c69b1df4141d31c6d3ae5f43f14a3c5f514e9884b178eb1d3bd
074fcd57c100a4c7ab3487c433c252b5b1aeb0e2c6d6d44ce22da7e201470e3b113e9bd95482d35e
be95e9354d6309822b95a7da06ac3a0f2aa6e6971f142a98f407058201de7ee55cbe589b5abf65b1
f1c15823bdf6444c0ab61f7c2c080b521eed0b001f32390969a992e68f0765a9b8b1dcd6ce93dbb2
0ca861fcf3b31af477548aa624fe130b8a709c2eb8921e3867f9b550f1deda084677bfab970bb2f9
32575b9eed5205e052b788a7ddc89c3bccdcc0a689b23c50a9b910321c062421a4a2f46b9ac431fb
d12c00172c9a89e597789de1116db8d3ab6ab954eb00151bd7adb88d5a3345d9df45b6f9a1e52ab6
072275d9c30292fff1201a6ebc1ac197ccc9e16c1f3e9c134807338d341655b1f39a90d4f8cbc821
b7687b8c89528f86f6984d62dba319d0662caa7d807ee381f8fb638da32ca6eab8c28b604cc557e3
de5bf8284d073ee2d09cc654f33bde85640bad09197825f8e47dc5369d9e465640e0236b8a31dd3c
6940f50c90bb534ace999069d077d5f3d617443a73e55da2653b7e95a949f17cc0a72b33bd2e845f
7730ed623bbbeffcf47768722988792851060f2cf96bf34c4c2b8593a94fa8b121900dbfe41f3023
bb4ab180567f5400e3f63edc11e80bd2380ab5397d3b58c7e9d45de58dd1b3b7008a88112a07289a
cf06ffd7d5db6d6133ef53eb7c0a6d7fe82d8b990e7f6f2e048a4dedc7c39d8ef3ac41a5210b546b
5afecc9bc33703bfb6285e8744f7d260f0bbf91351fa11998cf537b6de9b0f59bed26ec3d05cd93b
91c7cd3e7930763a1b760a4cd91cdb33d44486f22a973a0042ef7bc0ce488cf7c445c8570e817e69
e680c745d043e7233b464232f8a1c63bad0786a0c3bb05216c667cc27dc45939bcf448460e6e5d64
a42230b934eaaf800a4733cc0a8db9e2d8858cf56e2e02e00c51c21c5976004c38c70186b269d2dc
b01d9652fc755eb9052cb206a6c6e6d16c63b472c7846022e51d362d51eb568c3a355ce3b64d7c05
8918fc1738c146c3f180d5bd5c1d8348a2faa0f49e9c11c82b41ba62add5f5b24878530960b47157
0a13bb2963036cf3785abc75fbfa6fdb28d4dc09d2d8b2e460f326f9d37342462f0223c12d708e53
16931783bf9325309d20ea1eac6df82bea936cac8b653e9901947dace0e9b9e7430f223783e9955b
a95e9e01a3c787c23bb7547a0e6419dc5942bf79a086a711ccc13b14856724921dbfc9f071322c6c
3a7830fe1d84f50994c7e06069f2969ca57ae621d43a4226eb24a45320b3794ff1a836e3ee3328c8
41c839972fb1eb5ac62fd66611e30e761fc0c11f9ee073e798a12601429602d62f075a61d13ec702
7ea2fbf1af1cc9129a7cd68d035a4b85155735b295d707134ab199ccd767689356ea0af92ac93ab9
692ad37ccb8cd268c6162a8055623e704d8bc9174d0b895c2bf73d81001030049e4aa893668af59b
65703ce0f6cde4bf17d47276c9c5f165abd13f69c804b07245ebf7f9f2d52150de62763ab01298f2
5908b848d2496a18ed0bdc8eb1fcc9e990ad352d3749683aa972bf58071635f45b222449bec24e62
20b981c889a7b617134edabbb42e09e3ed3769afd347c729de8c2402351367d87851d47f721cace2
c75d27c00f7e8ced08aaf01dc0026f157c498def06b3127e8a79d347412e1147067a8e7f7ad71167
6d386b9b78ab5022b449d5a7a066d4e9ba256e8617116e114776d023e919e9f94731d436ac4cab9e
88c202fefe6167d118c618b070dd8f38ad34091b66fca2ba80ae768d4d0a1f766821b3d50b6ad5a6
0fa701203e482a27129268ee46c6ee251796403dfa5dfe59358ea9b6a65fbd811a25670e5892358a
3a0c2ca52b7b9aae6fbb0a68beb5086384d56bb94646556a62bfc2ff5464e4298bff5dba2077c8a8
541f8b8b792b088810e2ca2e18003d8368b1fec093414e8526b3be32fdc305aedaffa18f60baad3d
b84874af8c4581e50b5c3846bf335523dc02cea1caa39f145096e9ef15c8d449fe030287d1c5e8c5
0cb3f1b6c95ba13b0379dd21b3735d7d3c50a6180da6440c297233156cd74a55c5c69a094f83602e
c865fef08519612cb692c0b9f101cb8f1517ea78af9d274d2f3caf82e7b6d351bcf4eff3b9217b95
74ec757b1abe650038d9fbfe9ae0306a40fe83b8caa2654d341753f12c4dce0dca3fd0a380357b14
8982d05cbcd47f36e43e2d7d648bbf9c89b5f0a5576e8a525da43079fa90fa9c939b333150b97898
4ada7a3a853b1b63c0d70252c582cb02f6c4832d23f8896b31051c38dbebeb61c1f0c4723937f7ba
924aa5aa358e7481f7863aad65a527d0512fc709774298aee31987429738a1e9437a8537addd6095
c8318d51517817a777f50532b65a50b6d7982e21065a8a50a6fd413cf6a282909f754128d1b1dfe6
904dc7f7b5a13acf3fa306ccc04b00f1983a6782050a8618dd0847498a8bc9fff0f0797b9ee02d6e
ca1d8625b9ea8a89fb3f8f609afb4727ccab03a1c585807fc98c58d0c3d84a55ab0a9e9cd49dc550
4db809a7900e17f071af38086e17fb6309c01a9542f952a3908100f34508dc5447ac3d4f7b3c19ee
5a172265ac886a16f7136b071694ff213b7b7dcd3cfd6d6d3474f3b86775f659d1c7f19775867cd6
10aac0b4f5adf36524c3d105bda29aea7db6be57f3cfc622febd0bf00fd7bffe5945f36954b63c80
b6cf2ae12b4f852f44cc56e67b286f3fa0895684be774d15a817d7552fdc7cb956e6f8f33453715b
4618bd25a72149c0652b0430efc3dac197e9d2a649f0a6c7c0358e17b5c19f8f1d7eca3c8f56137a
5bc28db6ac91fab262c25a9f6fce52df7f533e973f7bcaf13f1d9bec7839e9e9790b34600f7bbaf5
c3c92e07f3cf9663f0cff5aa21d9c2f3ed43a903961e8434693a9dfe140b03d2e829134bf6564688
6ba29947add0d1da1dfaf5673a65c0581a9e161d1b7c3968a430eed48c318191ad3d9d16e8c643d7
97d3714658fac4e73cf146e8bdc9c1eeda1084625800bd12d2ba2a8a01018f73e5a5e1f3cb42d896
b4cddeebeb9621f175de8948b76f0786282e9df783c28ad4ae496094768f5bc9f6cc4b43b0b98896
38de74ebc591c790c3e05419502e7879865e36379bdda917ba27500e36d10e0342edf209b87d7a07
63305736dcc3bb6d1abbfcced676ea9202a22949c7d3704537625d437a685005d6931e9543a17662
5883e507f42e876c7420e11257553fa0e805f99fed623c35570306c841272fa3b8585f9df48d1cd9
274670924195381ff8973c204739789b11255528b9a1599168c2517f8068fa09c5d7ffeee35596f0
8a926bdac4fcb587c9ef190c8a4ff7cbc73994c3a245e877620cfd91662ff47b864da2b3b3459d26
5c418fc84521dfb6d8f44a65bfbc53f37d48fb0d93e0cf1d02e1299fccffed98c102f1b6f4dac732
0c0a5336f09f567221e37fa9959ca3975dc942883911a010877dc1ce47ad5084d64b80e1d3377854
207691c275126726b76ccc41c824c1e19250c7eca43f3da421449c2d20695700e107aaf6c064ccd2
24edd709e518d4861bd04d3e59c5b99abf23d0e680f5b4e525b13837611e651b0e393aa71a760e82
b7e300f7b911153b5ea630bd6152e601708d3f2c96dccde7c41c1ba88fa6ef4e6d276f81bb61cd7d
5625a85946e6b02d3d9bd4226be40d33e14fda784dc4fafe7067431a4da271678a8b4290939bc7c5
91cfe3e20422a2165e9e7387d692ec1599ff8df0da785da1b5468fae311de9d5191384c9c2bbd922
5deb8714e1d130fe992ab70254fe787d227d877c08a28454e9562706a54a771f3f3abd1b73e40116
ef45258437e1898c74004e1ef52673e21decf946955904c8336c8f06cd0051dbf08960e9fb1c00b0
58f75b8d4b7c5e95a4c30635e0233a3fa1c4d4332f9f018500f0ec1288073474cdc63309192aa0a2
d1043dec1b0307856e3480482bd37677f009ca58bf83f8ffe120da14403ad5acff797a31fbcd5206
abb3ef7abd26beb077907213098db748fdb054e52eb6d69bda8549409f7ba456b4d5cf9d78d48678
59144bddad0155746b429e7a65e734d8964b0cee06a4c9a72d18c0ffde05ca51f16a2f2b55d88f89
f6ec1cdf2ce7cda0de58131cc0349074778b93482135dc1c0a57bc747c9b662083cbbdba5074e525
1cbd824289440a326ae2858caf4e5cec6a284c377941d6bed0281a7d2d03af9c0fb6f425e63edc2d
58684ad6c1c44dc5911eee2d5ce85c46ee36f944525bf270bb842e229847bc0125f58d4f52c4453a
d38deb1877021ec4ac33134eb46459c6e0f09f71ba2a9fc70d132b376351f3d277c67592c15c435a
74308b3f46f495de4bb992fd6feeb11c11e423486bae4405923e94ef1679779b60e11ce9435fd5a0
55be15e750f296866f0aa6600aaab2e7d010e348e130f898fea525ba1b9545dc3c2c5e11262f349a
40e1201785f84218e027ccc65b465c24a4e0919bea066b2d269711959065ab47adb73ce7c6a0203c
0a6a1abc71ef42160e35a9b2819617605a0b483c61f015f668cb0454c926f84b3c07408c155b4373
b4353b87e1f48ebfbf08f50897b4d3b9e17c0aae08b61bdc69cf4640f615b82efbb1c2cf44239d25
15d0fbaca5df070bfc3309c551f1aa83393935827d1aa2115b4c4e9a34a2604609ef7da41f586eee
53be3b99ecd304b770ca9e6ddafecc368360d686bf186e63d572566422e0e0da21070297b1130d15
9da7f9b17b9e952dd008963ee1dd314275c18af50d2bdae4f7c2593ed21e2297b9e8a8f366dc0014
c04405f1a01d381adfa360c76d601684195c4637612c054add12acbf85f8a73b349cbbb08e3a7083
d5c49bc18a2e6a4650a74d0a7b1d6b7a5cad17ee4e9be1dc1f6bfb7ed8ec489a37c38894be96e105
cb501b52aa9d502e5f617267955d621f07272fc8b5121297a1fc099dc21995d7c5ca1c26c24a41a3
f76b823857f3881c094969c52c98b1a4903b59e6db5887d7009fc970c6f2151414256c53ecec3e60
ca0cbeebb8db897ec885023aa8f339813cb20261b5f34b777c01288e5e6331f05453f57a97f7a234
390a85b18eb1f0d4761e1bc8bf2b895865acbf666f04f159d0f8933f593fcd459e5aa00d0c4fddf5
8d313ddd7d1ecf668e4c99e02c42c6d3ee4a326d620ab781f5ac83a67c3c9bbb703e964584cf2952
42b51b74f7deb5d716bee5656f7298b50288fa64ccf75f64b24c9014b8fca178cc74c6e1c3babdfe
19793680d46f2427738cad55ffb5eb215aa93bd9781b17ace739eee5824da05d63cdc68710f695c1
f2097e31c123ba081e3c13b85da4d0dfe2a061c527ff233e7854a598777ff9a0a86e483b5e58b987
aa16f8b162dc86d58d70da5d3f2014ac37931595b6d1fc1f8b6956abc10855afc419ee1c42888121
ca10685f1d59ba0f16717551e496bd21c96975d18959aacbc4eb86c7386b9c1dfc300fe4c889f811
3d06689d591c39ad426cd427b134e22d075d290cc1c941d66d1d233d1debca33a454ccd25744ed05
c05f34deb7b29dea17d5582adf441282dd1bcd006b2f72053698cbcfc80d87af9a1696671cdc9722
a28845b407c03a3fddfb7e6c6f67ed4d48d0aaad7cccb9c4d32f92eeb9d0a8921db03ae054063397
d62e6476107d9bea628f92a04f1990392996f8213f6da657e2ca21b4d7382a5e0ee64b09ea30c392
bd5dec697b09f65c02f39b715daa2e5ecb57bc0e5f7fef7514388e85442df915c4d959b76a0e6680
9689cbe48c3f45bae5cfd771bfd25a926ece1ae039ea5ab5be5adf41ac114a2e18fa9d6845a51101
590e9e81c00964718eff7127234fc2d4eff6e2c8a37c6f961e2c5e982335a5fbd33e7b974c46bffb
e5cd122f2714d28d2273f450a03e8b4b279841f9bf73eafd86f5fb701a7c6b5416121d2efec6c2bc
85082670bda207c5bef31ff7fd0480537b3c00083bf3ac832ac66c614958563a044e4a65af513854
87ecde6631027368737e998f4bad18014a676a09d3990e71e2490c43f5760cadc8d82076e639fe25
e8cd260a5cf832429efc25fb43401c91bd56a883ade30227a000d79a341576a6fc15facfa4c0c936
047411c37fca035845ee886e20812e8f08630d4c5cca2accd89897bc5a0cb9ec0756938d5dd764e7
5a53344935a5cf3d24327b1e885d45d5c9a3f9becea1b4f11d1a3c4d2a4723cecee017b183c24245
0014dc5742bbdbeff09f32351c11f7a3a5f65c4939b7de106a935a6de7329dcc4b006ac94439c3c7
9a2299221e1d653fbdb4ba139ff2814e26f8d41a8cb1876ae928ef3d395f08f4e46918708c2814e9
0641e88a0a86259d16f3c67e6a66114a1b96eaa2ad02e77a932240207955b393dbc4b3c427574534
cbbd59b899da20bc24d037aba72d4a7cebae09ef0885cc581d559a43905470ec51ee2329c4020445
037202952e909e14d06137f38c5d0527bc51bc3300c6934c2b612f0df728b572e2d53414fa7736dd
547845cba7c9bfb02303bc5205efb4a6c9834c726c8978032ab1d0312931fc82ade7a9f2c12f7f5f
67453f501c19dcd6425f36a6a7fa01b3574cef196056c8df9ce01cb4b5f149124674a7a21ff0f520
a309135cfc02930605b8ffb50404d8c8b3a4bcba494e57bd69051688a8b0ca224b0ad461851227e0
2dde546a06eebc7f63805b971dd601b4b70d0c34445b04b7e43607e2174b11836055e6e67893770c
76a6b51ad89d7beab9a95c1b4ac6c31c60cef1c71952511b580a4ca80742764eb296af4121a863d6
68e8c27a5a05e7190fc85c6ae204e4f89853efe93f3354a43cce5616ff73d6f101a25a8335cd3f8e
1db4472d9b7da276802f943f50943b825ce29925502f6a19c9d343556281249946f4a364c15aa10d
d0bd7cf4740527950f5fba8d97644d4a2f59bd8a7fac4fc7f1b9bb5f1440f12a2007d5d45d5733c8
17fc4ce9a127e9d2aa3685cfddc694613fe6cbde9818995312d5aa88e58fc81cb87391c355cfe114
b2945cc65f242f31dd766b38953016e3f0b1bf2ff6a76682824e8b9ca8599257527d94959589df1e
c149803e25c9ca493c81967c3cfd415bc6438fa69342d7e8152076703801d665294018b357d226b1
d5477adaed452adb006df5603fa40b60e4559a61bf439f532f6bd968a7a500dea43451fd1aea4aea
b9f0d15f3ee0613c9274123988a1d0206d7925be6d805972cfd79694a276858aef05d625d2fc827a
8b8a717afca39e773963a6afc72d267576fac4b30eaadd0d00a675693b173d48d3c07a5260b03663
2c8a80d0546aadcfd60bf3ffdc36cad6c5f650216e100f54c23e21a45e00c98c2c001d5a767e38ca
e4664ac4ffea75254af98767efd5403ffe139f6a5aa75510bcc519bc3041bb849599471efc6c2b2e
c65d9bfd9b207e878c9fc2fbd8e7cf378cf7fb13e84420b291b94cb419fe05a0013f8bc6cdf6d745
01cd25f90133d7ff9a8f7918adebab39968c17a385350c72419b48c069d99269a03bfb9d3de2f612
32444bc708f01b2369fd78589e66094f1ff093e29571795a7d9c57671fca8100361d773051d64970
ed2df77a640202d70ec5cfeebc231bb051e74105b8f2c0b270dfd33be63153042754773955b7d420
6f870e6fa0d6809a2ae71665d925c876e73822c2985249f1a6c5e7f3bfbf228f395f9bb7086abba4
4d4d30d91d5fe405c8abba5bd03d5f4197becac56c2dd8ddbbce0ceee74845de8790a4cf4b800499
38d3647e0a77ffb553b79b363d07e838788a4747dff8f2d719879b363bef92783afda914c8ed4d26
b26264c8c49e745643c2ea268a8a2754cc5e428e35ea7ff48744caefa3eb1b728ad7396612fe52ee
9a709221357caa6d98d4b9bf798567c2c89fb3005190538e9d3c2117caa685a74afcace328667475
7dbca4d26440211331b43d54798eed46b86878fabae56e6cbc7384771dd0afb4793b34faecdf6884
242efe4d82f535cc64407b7ad40ab99cb3ea978c3da510079853e9c874d518e571b57776e44e84fd
7a65d44cc7af813920e48eebabbb0531c641eb8914bd71b41054bfe0a3bbe4836b6d78431e85ea36
e308e97787aa7437fca97536a5503c88a47fd9bb7547a492d1f27c4c324690aa154cdb432a91ee98
8ede1d73f486c6a8ca99ce7a28bbf1f43d97f788cdafc3755934a198514155f181d7e7e93c926b07
609142e7b4418104613782f1aad234d4bc283590073bba251951046c1cadb7eb6740a0b8256a0645
5f8f5809d84d82c6886270fab90247da99839748f2afc7bc25cf9779ed8480e148478f1dcd51fc8b
2932252b066ca2015d07fefae1eb2083e4083e566cd8fe1c112e40f598dc93c9d197d2757d5e1a9d
933eb093b72c51a54c0b9bbb456e6b6ac8cea52656c24828636e28921863bdabc5e32acbe0a85488
6f202cc30d7a3b50c8077d2ddf4d7a239f9c3f0bfb56d79cbe477a636bee92b6d3868176834e7523
d65067ed2cad94adc0d8cb2a4876225f2df863881e958e7624a80bb16c3893941197b12a11008e67
60285ecf1d20170eb1cecc62575ca8c6b601503e159c67609d4fa916b885f373fac95e83a363b853
652a2c67c70a0e243522d43dc8e71a319d821b1f28c07beaf6f1d3a7eefebd781e2f6e49aaf9380c
9075b1db2859d69d46ebb1130705e8f2c00f88ea4c9a09910a8148bee7790a1e25e6b21864d3641f
a602e27ed16b49302dbb1fc7e4b7c0f799e6453f9ca2f85c93dc3ebedf4460bc6c4aa8af9d051b94
66a7499dcf8424c1294c76af1eb18404a2298af74e3239de41d8473e67103feea7456d7e09d754b5
491b4fda230fd7f03e5d3e635a5515a9750a1c6e09e344059a8e02c698d83ca13196abf4ace872ed
3c6eef8033ade6f4ee5529c25c6c919b53937d126b31306f7e4e2d3732029eeb6df4277bad98022d
286b8f698f205cc14ca9dce05ea18b16414fb572ea79fe0fa74f687d830e320d623d50adfb590bbe
f5d491cd19b2f1d9c87f005486cc3687d135812f9bd386c123cab52353993be33b80951ce936cedb
9e52b09708d135d2c432d4e20fd94b8aa584ca02527b223120907dcce7f628e3a47091dc5513989a
a7c138c6913aaba285811010f1868f48c1a38c7b05b246a4d7feeda3d732e381b0423c46ac7b0654
45287e5cfe8cda643972cdfeb657de4dbad23d16a3620db70a6c2de570d9a306c233c0f8f64500fb
1f13b32f804722ca9f0ffed0c4151b4beb874702b27950f62671c34b24d290300edccfb02bb70767
17c76300bcfb61807080b8b586ddf5bfbae727873ca19743ce6807d9c77c80412eb2774041fc73ea
0df93e2ca9f66451ab4285aab211635471afaf139397184e2f2ab3d8bc7c07bc5e89763bda42f0a9
58a6a1ff7705e1b28c556c9d78171a3e472ae3c4b8b5cbba240bfbaa1eb39e7393f05a43b8fb7322
60bb92c6bca47cd83c8d4015ab31dc9d6a179215503890f8de8a3040412abd622768d5cdafae9389
9217f002226754faad52509598d99fd72620c2b9cd4b945294643c2074789ccd55143354a0916375
51c200ded4ecd53263cf1f525d6d2764e0afb653715a423052a06faca98c1e0f681715d2269872fd
18c1d3c08cdd73905aa0f8ccf55040a8c3f53311d363c36e77c450725a3af53389e38a319e2aafcb
332f93d7899aab11b1abe75dc57288cf9d2cd056745977bd4b2a6d354bf3c418031823fcd23ea498
cbe10c58b0d79fd0153dd287b2205b7481964623a2b5144fb3d947a3748638b5e585c4b6ec5ad72b
a36d463b0c62d7f4964693ee1b33c8b92298f5ceca08af2811d2b34b018f64c9873c51c75e49bc41
276443b4e41041a96ccf703c8ac1474570415c457c100d21ade2c41365f9e217f609bb21d463ad66
fd675587e3a52a77dedbe791364a8dcd81ac4824bdbc8b35898760ea0097aa65ce6f516596a7a0bf
57c1002e4a4ef5727eca2101385bfbf1c25a0469136d807ff7cf7d23069cd99d86c34c5ffcb711ed
680dff3bd136d83a342df0dcb0eb7ced247a16ebf50b742536894d59f9dc386de9182c478d4a08fc
f07627a1f59ebdb9633188d8d78206468a5cd1b3e9c858aec972b990b63f117d1dc0f9349b25abd4
ed2d648c901b3f00db6b1f4b8419db7d91113a137b4f084b467a843f94b7c5063162b184e9c1779e
ca0d43c30b2c35e78a31a403bc7446459657aa8027d411e89831f48edc25eec53fe9efc205b602d7
3369e3840459d531f82cedc2689a4b702840baac3df2d0c9bdb990e7c3c50bd73e10687f7df46806
2c5036517431eec7d7fa92ed4e88915cda416b9bf69c859e98452011a0b2c4b7138c83af28bd8abb
a1d61755f97e3cbe4314e74a9c5e8c42c6c3956797b0134f3d0b4d429d042aa24d5f690075f324f8
e50faefc6d536e221864ea730e7859ee7b676acb50bf33df5e9478ae9fbcde2cc6a88b1a1008764c
04d1581b496895ad08a6492a2d6af29bdcf51a9b97a848a38494a98435636fd4d6ee5cd582975cca
71d4715a9fac47ffbc681b7ce7a3d18385ebfe09a9668bfe5b4cad1cf85f43efb6a5736508d1eaf4
7f997722f1e21741dd71bb89d97c2ea38bccaa8853501f3c4f21d784e813b3039bc4b3a7de1b6849
71c731a926c90f42019be324302f418febca983a4f7b442042b344a7870b77057f4d6845db2d903d
6ef0839f201fc4c70b234bf0c2f22a529fc949ef19b96a8fbef2deeab8292bf611b25eebf4073560
45d9d71073c4fe78bd79c60c3d746248d160966e5d8fbb265f38725c25118ee7a1063d124dea1b7d
8de588d774aedd69ad39ae6b474034bd9f87d3982b68ec6f46ca1b496d166ccdfd58761e0c47ec11
0f6345f31f7cbffe74769b2efd0b7fa4d87dda462da7c7e9fdb3e370d98fa19bb46f06b7be146a84
79e1ce57061e1e2d5b0cd899af2927d0a9e1b504da47842c132012f105b5e5962aea064c3074bbec
a153238fcb38fe7bc0233d9b423a525c17b7fe8e780a0f3e97c7bda92ffdd4583420322f45957c30
468e6d354db0d78462ee5c9ccd3fcffd59123d1bffd1d5116ba766dfa7edc8cf1d9c6dc86f32f391
f5b1c52815343be4f2cb81df1f35c7f7eeff888eea586632b0dd334e4cf4ba8fa46006c799026b38
c3e8a75aff1f8e0fea96a01302651b8eded52397773f1495ced6a0e4f910c8b065f956a2a816ccbb
6c910648dc60bb7d63da64d01dcb7d4d16c3412d79e8e9854fc71627d68fe6b33cfcef4e2ed3e6b5
379f94c84646010c99694df470d74810553403aeb3dee0051cd1b63c4e61b938fdc8479f519447b9
a5db26a91b8747d6d6288d2733d612f49fd552011275b39153575405ab26f41dcae1f721742e05d0
e0d2e716db18e15eab84935a1fc1473fc8cac0a4fab0bafb07df26f5cb0375f6a1299874b0a19aee
eae02130fca95aa104bf1af00ca87d1e5cae77341dfa218b9676fcfb26802422c622d080d063b953
e71d62cc3f6671cc52cef7fa63646bbece24e88a701768bd4f94947c56647a2be33554aef3cb244f
650d5ab65533081bc071f992e9cf6cb58afcf437f1089965efa2a6ff6262bb6d8f3c1ffc92259072
551d3d18f893f04d6a2610293d45253fbb9994698b336f6922755712e7e24672f1ec245cb5276b17
c0f7d5a4e592f8382f0cbc1b0a7660ce10172d92aa6ce4adfe4331c8704c99066c20598911f9be56
7d0076049b290f3bd790647b723e01bc83a5b6d42d503c47b0726dcb4113fa6413b8b95da310a54f
f9c8626b1d20bfffe889c07e2d1960ae29d66cd4b77d6541a98c45f28529290b75ad84ceee41e6dc
00c3bf6fc619c69880dbf346f31644c34e42dc8d47d9769f34c5437bd064bb4dfe90b16f95860b44
abdcbae5848d3f9faf2ba78560bd0c0dbdb32d14fa50db5429d860a8924cae67664720b46b2e337a
12a974121720877b9665ee025eb2ceb520c634b2de241d877faa144d40af61f9d05172a7d3a824a5
26d6602a8b91ac7f0b6f16da3cc18c24948ad4471f9cdc0613dfd3e079fa31ccd4e9557d6020069d
31337eb9bb48d317f284bba31889b2b75e72131cd6c1deef5280a9e6352a43eefb921de8bb3bbfd1
a96cd8cb51c0c8a23d13b244a092d37c211d755ae8bf8c05b643813bc5f9cd897b617e12
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_vacuum_pick <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
 PWM_ramp_UP <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_manual <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_HBW_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_MPO_dropoff <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
 VGR_train_drop <Virtual>  0
 VGR_train_pickup <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_Rotate_To <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State#2
// Offset 8
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State#3
// Offset 25
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State#4
// Offset 29
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State#5
// Offset 32
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State#6
// Offset 49
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State#7
// Offset 53
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State#8
// Offset 56
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State#9
// Offset 73
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State#10
// Offset 77
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State#11
// Offset 80
NOP

// Rung VGR_Copy_State#12
// Offset 81
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State#13
// Offset 83
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State#14
// Offset 85
NOP

// Rung VGR_Copy_State#15
// Offset 86
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_vacuum_pick
$LGCMOD VGR_vacuum_pick

// Rung VGR_vacuum_pick#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_vacuum_pick#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_pick#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_pick#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_pick#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_vacuum_pick#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_vacuum_pick#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_pick#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_pick#9
// Offset 56
NOP

// Rung VGR_vacuum_pick#10
// Offset 57
RET

// End of Code Block VGR_vacuum_pick
$LGCEND VGR_vacuum_pick

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
NOP

// Rung MPO_Copy_State#2
// Offset 1
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
NOP

// Rung SLD_Copy_State#2
// Offset 1
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
NOP

// Rung SSC_Copy_State#2
// Offset 1
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7573 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5231 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 2985 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_manual
$LGCMOD HBW_manual

// Rung HBW_manual#1
// Offset 0
STRN X0
AND C2
OUT Y51
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_manual#2
// Offset 17
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_manual#3
// Offset 34
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_manual#4
// Offset 51
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_manual#5
// Offset 68
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_manual#6
// Offset 70
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_manual#7
// Offset 75
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_manual#8
// Offset 92
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_manual#9
// Offset 109
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_manual#10
// Offset 111
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_manual#11
// Offset 116
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_manual#12
// Offset 132
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_manual#13
// Offset 148
NOP

// Rung HBW_manual#14
// Offset 149
RET

// End of Code Block HBW_manual
$LGCEND HBW_manual

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4 0x0 MHR1 N300 1"

// Rung HBW_Copy_State#2
// Offset 13
STR C28
OUT Y39

// Rung HBW_Copy_State#3
// Offset 15
STR C29
OUT Y40

// Rung HBW_Copy_State#4
// Offset 17
STR C30
OUT Y41

// Rung HBW_Copy_State#5
// Offset 19
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 60 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 60 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 60 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_HBW_pickup
$LGCMOD VGR_HBW_pickup

// Rung VGR_HBW_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_pickup#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_pickup#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_pickup#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_pickup#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_pickup#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_pickup#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_pickup#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_pickup#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 840
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_pickup#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 840
ANDLE $VGR_Encoder_X.Acc 870
SET C603

// Rung VGR_HBW_pickup#12
// Offset 64
STR C603
CALL VGR_vacuum_pick 0x1 DST511 "3 545 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_pickup#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_pickup#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_pickup#15
// Offset 82
NOP

// Rung VGR_HBW_pickup#16
// Offset 83
NOP

// Rung VGR_HBW_pickup#17
// Offset 84
RET

// Rung VGR_HBW_pickup#18
// Offset 85
NOP

// Rung VGR_HBW_pickup#19
// Offset 86
NOP

// End of Code Block VGR_HBW_pickup
$LGCEND VGR_HBW_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_MPO_dropoff
$LGCMOD VGR_MPO_dropoff

// Rung VGR_MPO_dropoff#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_MPO_dropoff#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3520 N1007 1 0x0 3550 N1008 1"

// Rung VGR_MPO_dropoff#3
// Offset 17
NOP

// Rung VGR_MPO_dropoff#4
// Offset 18
#BEGIN FMT_COMMENT 
"Should be really close to all the way up, but reach limit "
"as vacuum dropoff does not guarantee this."
#END

STRN C600
ANDN X25
OUT Y22

// Rung VGR_MPO_dropoff#5
// Offset 21
#BEGIN FMT_COMMENT 
"Rotate to MPO, two preconditions should already be met for "
"safe travel through the factory of this function won't work"
#END

STR X25
AND X26
ANDGE $VGR_Encoder_Rot.Acc N1008
OUT Y26

// Rung VGR_MPO_dropoff#6
// Offset 28
#BEGIN FMT_COMMENT 
"Rotate to MPO, two preconditions should already be met for "
"safe travel through the factory of this function won't work"
#END

STR X25
AND X26
ANDLE $VGR_Encoder_Rot.Acc N1007
OUT Y27

// Rung VGR_MPO_dropoff#7
// Offset 35
STRLE $VGR_Encoder_Rot.Acc N1008
SET C600

// Rung VGR_MPO_dropoff#8
// Offset 40
STR C600
ANDLE $VGR_Encoder_X.Acc 3300
ANDN C602
OUT Y25

// Rung VGR_MPO_dropoff#9
// Offset 47
STRGE $VGR_Encoder_X.Acc 3300
SET C601

// Rung VGR_MPO_dropoff#10
// Offset 52
STR C601
CALL VGR_vacuum_drop 0x1 DST511 "3 2000 N1000 1" "3 C613 C602 1"

// Rung VGR_MPO_dropoff#11
// Offset 64
STR C602
ANDN X26
OUT Y24

// Rung VGR_MPO_dropoff#12
// Offset 67
STR C602
AND X26
SET C603

// Rung VGR_MPO_dropoff#13
// Offset 70
RET

// End of Code Block VGR_MPO_dropoff
$LGCEND VGR_MPO_dropoff

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 150 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
SET C601

// Rung VGR_SLD_pickup#10
// Offset 73
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 76
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 80
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 86
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 92
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 102
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 108
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 116
STR C604
CALL VGR_vacuum_pick 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 128
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 132
STR C605
AND X26
SET C600

// Rung VGR_SLD_pickup#20
// Offset 135
NOP

// Rung VGR_SLD_pickup#21
// Offset 136
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 870
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 870
ANDLE $VGR_Encoder_X.Acc 900
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block VGR_train_pickup
$LGCMOD VGR_train_pickup

// Rung VGR_train_pickup#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1"

// Rung VGR_train_pickup#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_pickup#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_pickup#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_pickup#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_pickup#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_pickup#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_pickup#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_pickup#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_pickup#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_pickup#11
// Offset 60
STR C603
CALL VGR_vacuum_pick 0x1 DST511 "3 2819 N1000 1" "3 C613 C604 1"

// Rung VGR_train_pickup#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_pickup#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_pickup#14
// Offset 78
NOP

// Rung VGR_train_pickup#15
// Offset 79
RET

// End of Code Block VGR_train_pickup
$LGCEND VGR_train_pickup

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_vacuum_pick 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R103 50 R900 R902 50"

// Rung $tFirstScan#3
// Offset 21
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#3
// Offset 4
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#4
// Offset 7
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST2
RUN MPO_Program

// Rung $Main#5
// Offset 10
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST2
RUN SSC_Program

// Rung $Main#6
// Offset 13
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST2
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR ST1
ANDNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#3
// Offset 26
STR C10
EXIT

// Rung HBW_Program#4
// Offset 28
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 36
NOP

// Rung HBW_Program#6
// Offset 37
NOP

// Rung HBW_Program#7
// Offset 38
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 40
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#9
// Offset 43
STRN X11
OUT Y7

// Rung HBW_Program#10
// Offset 45
STR X11
SET C110

// Rung HBW_Program#11
// Offset 47
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#12
// Offset 50
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#13
// Offset 53
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#14
// Offset 56
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#15
// Offset 59
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#16
// Offset 62
NOP

// Rung HBW_Program#17
// Offset 63
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#18
// Offset 65
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#19
// Offset 68
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#20
// Offset 73
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#21
// Offset 86
SG HBW_Program.S0

// Rung HBW_Program#22
// Offset 88
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#23
// Offset 89
STRN C100
OUT Y50

// Rung HBW_Program#24
// Offset 91
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#25
// Offset 93
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#26
// Offset 98
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#28
// Offset 103
NOP

// Rung HBW_Program#29
// Offset 104
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#30
// Offset 106
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#31
// Offset 111
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#32
// Offset 116
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#33
// Offset 118
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#34
// Offset 131
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#35
// Offset 136
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#36
// Offset 138
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#37
// Offset 149
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#38
// Offset 158
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#39
// Offset 160
STR X2
OUT Y48

// Rung HBW_Program#40
// Offset 162
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#41
// Offset 165
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#42
// Offset 167
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#43
// Offset 170
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#44
// Offset 172
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#45
// Offset 174
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#46
// Offset 185
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#47
// Offset 188
NOP

// Rung HBW_Program#48
// Offset 189
NOP

// Rung HBW_Program#49
// Offset 190
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#50
// Offset 192
STRN C100
OUT Y50

// Rung HBW_Program#51
// Offset 194
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#52
// Offset 196
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#53
// Offset 201
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#54
// Offset 203
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#55
// Offset 205
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#56
// Offset 207
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#57
// Offset 224
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#58
// Offset 229
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#59
// Offset 234
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#60
// Offset 243
SG HBW_Program.S9

// Rung HBW_Program#61
// Offset 245
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#62
// Offset 257
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#63
// Offset 267
NOP

// Rung HBW_Program#64
// Offset 268
SG HBW_Program.S100

// Rung HBW_Program#65
// Offset 270
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#66
// Offset 273
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#67
// Offset 276
SG HBW_Program.S101

// Rung HBW_Program#68
// Offset 278
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#69
// Offset 295
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#70
// Offset 298
SG HBW_Program.S102

// Rung HBW_Program#71
// Offset 300
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 50

// Rung HBW_Program#72
// Offset 317
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#73
// Offset 320
SG HBW_Program.S103

// Rung HBW_Program#74
// Offset 322
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 50

// Rung HBW_Program#75
// Offset 339
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#76
// Offset 341
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#77
// Offset 346
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#78
// Offset 349
SG HBW_Program.S104

// Rung HBW_Program#79
// Offset 351
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#80
// Offset 368
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#81
// Offset 371
SG HBW_Program.S105

// Rung HBW_Program#82
// Offset 373
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 50 50

// Rung HBW_Program#83
// Offset 390
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 392
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#85
// Offset 397
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#86
// Offset 400
SG HBW_Program.S106

// Rung HBW_Program#87
// Offset 402
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#88
// Offset 418
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#89
// Offset 421
SG HBW_Program.S107

// Rung HBW_Program#90
// Offset 423
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 20

// Rung HBW_Program#91
// Offset 439
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#92
// Offset 442
NOP

// Rung HBW_Program#93
// Offset 443
SG HBW_Program.S98

// Rung HBW_Program#94
// Offset 445
STR ST1
JMP HBW_Program.S97

// Rung HBW_Program#95
// Offset 447
NOP

// Rung HBW_Program#96
// Offset 448
NOP

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#11
// Offset 61
STR C31
OR C1701
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 71
STR C32
OR C1700
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 81
STR C33
OR C1702
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 91
STR C34
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#15
// Offset 100
STR C35
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 109
STR C36
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#17
// Offset 118
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#18
// Offset 127
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 136
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 145
NOP

// Rung VGR_Program#21
// Offset 146
NOP

// Rung VGR_Program#22
// Offset 147
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#23
// Offset 149
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 870 N1007 1 900 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#24
// Offset 169
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#25
// Offset 179
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#26
// Offset 181
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3550 N1005 1 3520 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#27
// Offset 202
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700
SET C701

// Rung VGR_Program#28
// Offset 213
SG VGR_Program.S2

// Rung VGR_Program#29
// Offset 215
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#30
// Offset 227
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C35
RST C1701

// Rung VGR_Program#31
// Offset 238
SG VGR_Program.S3

// Rung VGR_Program#32
// Offset 240
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#33
// Offset 252
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
SET C35

// Rung VGR_Program#34
// Offset 263
SG VGR_Program.S4

// Rung VGR_Program#35
// Offset 265
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#36
// Offset 277
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
SET C35

// Rung VGR_Program#37
// Offset 288
SG VGR_Program.S5

// Rung VGR_Program#38
// Offset 290
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#39
// Offset 300
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#40
// Offset 309
SG VGR_Program.S6

// Rung VGR_Program#41
// Offset 311
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 50 N1005 1 20 N1006 1 320 N1007 1 350 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#42
// Offset 332
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#43
// Offset 338
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#44
// Offset 349
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C35

// Rung VGR_Program#45
// Offset 359
SG VGR_Program.S8

// Rung VGR_Program#46
// Offset 361
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#47
// Offset 382
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#48
// Offset 388
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#49
// Offset 398
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36

// Rung VGR_Program#50
// Offset 408
SG VGR_Program.S9

// Rung VGR_Program#51
// Offset 410
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#52
// Offset 430
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#53
// Offset 440
SG VGR_Program.S10

// Rung VGR_Program#54
// Offset 442
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#55
// Offset 462
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#56
// Offset 472
SG VGR_Program.S11

// Rung VGR_Program#57
// Offset 474
NOP

// Rung VGR_Program#58
// Offset 475
NOP

// Rung VGR_Program#59
// Offset 476
SG VGR_Program.S20

// Rung VGR_Program#60
// Offset 478
NOP

// Rung VGR_Program#61
// Offset 479
NOP

// Rung VGR_Program#62
// Offset 480
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#63
// Offset 490
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#64
// Offset 498
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#65
// Offset 523
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#66
// Offset 540
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#67
// Offset 544
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#68
// Offset 548
NOP

// Rung VGR_Program#69
// Offset 549
SG VGR_Program.S100

// Rung VGR_Program#70
// Offset 551
NOP

// Rung VGR_Program#71
// Offset 552
STR ST1
AND ST2
OUT Y15

// Rung VGR_Program#72
// Offset 555
NOP

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

NOP

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program"
#END

NOP

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW_Reference_Switch horizontal axis"
"X1","HBW_I2","","HBW - I2 = Light Sensor Inside"
"X2","HBW_I3","","HBW - I3 = Light Sensor Outside"
"X3","HBW_I4","","HBW_Reference Switch vertical axis"
"X4","HBW_A1","","HBW_Trail sensor LOWER"
"X5","HBW_A2","","HBW_Trail sensor UPPER"
"X6","HBW_B3","","HBW_Encoder_Vert_Imp1"
"X7","HBW_B4","","HBW_Encoder_Vert_Imp2"
"X8","HBW_B1","","HBW_Encoder_Horiz_Imp1"
"X9","HBW_B2","","HBW_Encoder_Horiz_Imp2"
"X10","HBW_I5","","HBW_Reference_Switch cantilever front"
"X11","HBW_I6","","HBW_Reference_Switch cantilever back"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR_Reference_Switch Vertical axis "
"X26","VGR_I2","","VGR_Reference_Switch Horizontal axis "
"X27","VGR_I3","","VGR_Reference_Switch Rotate"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_B1","","VGR-Encoder_Vert_Imp1"
"X57","VGR_B2","","VGR-Encoder_Vert_Imp2"
"X58","VGR_B3","","VGR-Encoder-Horiz_Imp1"
"X59","VGR_B4","","VGR-Encoder-Horiz_Imp2"
"X60","VGR_B5","","VGR_Encoder-Rot_Imp1"
"X61","VGR_B6","","VGR_Encoder-Rot_Im2"
"Y4","HBW_Q5","","HBW_M3 vertical DOWNWARD"
"Y5","HBW_Q6","","HBW_M3 vertical UPWARD"
"Y6","HBW_Q7","","HBW_M4 Cantilever Forward"
"Y7","HBW_Q8","","HBW_M4 Cantilever Backward"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR_M1 vertical axis UP"
"Y23","VGR_Q2","","VGR_M1 vertical axis DOWN"
"Y24","VGR_Q3","","VGR_M2 horiz. axis BACKWARD"
"Y25","VGR_Q4","","VGR_M2 horizontal axis FORWARD"
"Y26","VGR_Q5","","VGR_M3 Rotate CW"
"Y27","VGR_Q6","","VGR_M3 Rotate CCW "
"Y28","VGR_Q7","","VGR_Compressor"
"Y29","VGR_Q8","","VGR_Valve_Vacuum"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow"
"Y41","SSC_Q7","","SSC - Q7 = LED Red"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW_M1 Conveyor Belt FORWARD"
"Y49","HBW_Q2","","HBW_M1 Conveyor Belt BACKWARD"
"Y50","HBW_Q3","","HBW_M2 horizontal Towards Rack "
"Y51","HBW_Q4","","HBW_M2 horizontal. Towards Conveyor"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","HBW_PWM_Conveyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW_PWM Horizontal Axis M3"
"Y82","HBW_PWM_M3","","HBW_PWM Vertical Axis_M3"
"Y83","HBW_PWM_M4","","HBW_PWM_Cantilever_M4"
"Y88","VGR_PWM_M1","","VGR_PWM_Vertical_Axis_ M1"
"Y89","VGR_PWM_M2","","VGR_PWM_Horizontal_Axi s_M2"
"Y90","VGR_PWM_M3","","VGR_PWM_Rotate_Axis_ M3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C9","sg","",""
"C10","","","Software STOP"
"C11","OUY","",""
"C12","math","",""
"C13","st","",""
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C301","","","HBW conveyor factory side empty pallet ready to load"
"C400","","","Program/Sub Reset Flags"
"C500","","","VGR programflag 1 "
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C503","","","VGR programflag 4"
"C504","","","VGR programflag 5"
"C550","","","Vacuum On"
"C551","rst","",""
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C606","","","VGR subflag 7"
"C607","","","VGR subflag 8"
"C608","","","VGR subflag 9"
"C609","","","VGR subflag 10"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C614","","","VGR subflag 15"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C1700","","","SLD Red Puck Ready for Pickup"
"C1701","","","SLD White Puck Ready for Pickup"
"C1702","","","SLD Blue Puck Ready for Pickup"
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N900","","","VGR progshort_int 1"
"N901","","","VGR progshort_int 2"
"N902","","","VGR progshort_int 3"
"N903","","","VGR progshort_int 4"
"N904","","","VGR progshort_int 5"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"N1003","","","VGR subshort_int_4"
"N1004","","","VGR subshort_int_5"
"D0","ON","",""
"D13","jmp","",""
"D103","","","Rack Unload Z-height Lower"
"D104","","","Rack Unload Z-height Upper"
"D200","","","Column Index Sub"
"D201","","","Row Index Sub"
"D202","","","Starting Z Lift"
"D203","","","Ending Z Lift"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"SK1","End_HBW","0","End_HBW"
#END

