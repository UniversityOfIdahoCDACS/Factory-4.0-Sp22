// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Sp22.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
ae67a0464dc85bf282bb42b5fec9570052bcca75f5f0040f1e1c145afe97c00163315a3a38d115d4
5f0a218b03757c82990a7993754e910ad7fbd01eb59234cebbeceeae0f5bc392ace9a50046324742
91798a8b96ac4935f202d3ac7a6691aa149925ed41efb7cd74a9fe1e62c27a32d81edcb5c997dc12
95412ef2b072bbf5e6cafd0ff8d7e7c6f092ff28bffbc7603c436b9a8072371fdb8421bd4061f20c
87a9a6ee9a9f87c51b7e4618de6c8aef39906c844c37c4aae2a02daec97a81e9807cf2ee110c5398
2ac89649f6b506c67f431ef00accc905aa41d215240178f14caed52e957d6d3946ab2b14d18e4396
670d49439d6539f8d891765a0c6d0193e53b6dab403db4401c495ed7ed478965f66831ee0d691d1b
21de58462e51a7b7d6062828204575cbe103fe7cb423d4128e9bb2b7c5a6b454045bac63910a69c6
3750357056621f05881d2382baf8320f0f6c09bd2a5ba012012b1e4ed497bccdeb184d7c152fb0b5
9d0bc0901216d513b929fb4f1f3996cc32d86c6b11ed8b99debdf2a7892caba37a902787ff91d4d6
c8f7a3f8f4fe90c5d5cee185eb2d38eead4c46bff2ed48cc64bf9dc378027bd6054a7fe22bcbab91
7bdd2c9fff3ff4734d02eba7a3ebbe185e72f0584c402d4e592345fcd4d0c4e6a0e1866c2764d771
f8dd6756f1a6ddc70eea171e5c5c97ac3d2d75a85632a3890e845c2326a1f84012c0b4bd90d096c3
0965791a78ec36039255bcc379e116e83853c9046099b6f6006f523e4422cb9ea301b90885ed659d
5797b4a0f7aef8f38be6501021c621f4b1d1f376312711c7ff4b8e516264563c8e09d4b3c3a31dc3
1b5fb9425cc5620465e3200ef69a319a1c0de83a53904cc90f12768cab302fda958d6f4a746dc5d4
38f8d5c3a6144f8fc21b7defc574201d8d5837b58c8240b4a2a1c37cf67fb30242cb409d89fc3a29
099538045881d604ae532deabb21ce415a9434289828bf06eddbd96a07806846dabad395eb93360e
eea216ba85011821a2259b8958e819db72a521cbd87d633fa70ec02e2c85068f65dbcc196b29c406
4936bf849ae8e9457c7801006246f006a6ca4337043e17dc9933d0a9536a331172f40433c93ece56
16d79691877b61f558fc0e9a7c3edb3722101be8df400f633a9438f7028932c8d4c56695441540a9
c4447bc2d4eba9ebfd4b67a021d47aa6c0780d567b535be85b572035d67ceb8e5d367a692dc823d2
8ecd1ae329a9cd06771b832e103b5fc7e1e0f829adb36b021657d708a63c1e7fb9139b48d3129a20
97524ea554b0055548a3564f5315fd7fd8115123ef0a8d7056964ac954bd1f73a121b57aa39b9307
355715bf09bd7f01d2377d45a5b1584a9bfcddc7972eba05d22a049ba04b5676205bbda1488caaf5
0b499333cb2335430c8514e08bc0c5d6aec270f0b43ca2cd605aaf0f47bc7098e24fd77720c818dd
d89b069ff1a9dd3342d03d79ba809e6007d38c9fd819978bdb3c1b1438da2c177874f60b548d8b56
07e1d5ff16b3d1e5d0412c9d4015c31920f3391a6e7f587b26004780dede927dd38919a21aa536a1
4243536ea6d7c9974708ce70628307fef2e2a911f7e88008c2cbd83e73ac9debd537aa3b937d2ecd
54596d70b12f38dd9d68b8fe4ef0ab3f4deff58d0f68e280973b93254fd4b334802649f0c67d4ac2
e2a3724473e0bc44a9e42474cd8d5dbf199ed691ea52ffb3abfe931e0b4a7bd4fdb54fccef01a412
15b004ab2fb09444d80dd946765dfed9f0755d26706b2dc0490b30cc4b3438ce0a52c4050397ba0d
1db2c9acac5e763c75f7a9be599321bb55be90071f27aa29ce717280a8621496c8df38f240ea7839
9b168ce41975ca8264e8bb5cb0b7e38d65ded8b18ec6958516dc71edf89b1d7f496772ce14e3da04
e1a297aa80873cdc3282d22bc647fbad480833b143b85df764cad8dbc9765a0d48ec6efad79ab70a
966d1ba652712fcd466af8b73e75b0da65a7b1f0bb36bc255a171f11b586386ddbeb41c5cbcf7cf7
63d8615800155bd2c904072eb4074671445cba725b2165209100b66bc2a3a7dd1da99f22aa70b8cd
13e244f56ef2c5124dea7e3e9b28a6347782689f12f8aeb583f6372128e269af580c3160d9950aa5
6a11d8250bf1ca4062c7db4aab3484ada21c85957da75935f0154821e2131b75a58a1fcac6f90f18
f1c32be11ff066a22e4f68c05d32e2c33b6fa78af6dffad0d0f415352c692c170844203e5e5c4a17
1738923a796a2b7099f7910429557d5ef4795fbe96afeac3eff0fc9887e7faecb1575930764eeff4
f7e0a6a0beac88a685dd11a022fb333aea0aa0db57da6b08d23f3ad6247d79162d262cbc607ceeeb
1cd985ac69fd659c62b566c60618224b400a06ef5b0b465d92e88501001a76e4f60bce22a9e1680a
da96ea52cbf3daedc7a50a4bc18a3dace29dc60b26143e477ae284deea6d79da2ea62d77665d9c33
66bf2b18d1bb528131e635d01bf8935f6c7bbf0107b358fab0cb451fc790339360d697276e56c00b
3cb02eeffe70bdaf0335bea7e9224f9b2dd1fe0e42ae3dc6fc152f06a3616b8281d403895ff59e10
81a0c14f26a0909dee145ddf6b1e127ddf263a331b84323f620c67684b726a87ebf95561bc750216
f8659e86a6287bd7d7799a21d00760f4838cfce295c5b9f61e05e65a87cc72d93418b35d8e486cc7
612336626ce096e3db9458fd0e12f2da44edded85da37feeed75322df832ec8e91615d77802042da
b28a78ef8a46b915fc151d731447f9235af0c08038bd9ce7b5b8b21dc064b63f87494d217e65962d
d7cb50dd97b40e295ced9486f98e62e2145181080c0af7576514a9eca1b30d5e2d79b5539978c254
03353a7c9088325c3e256d45b371aaf4bd042781c31ba667a5e0f798ee1721a4f21ed7956fa275a3
40888b4a424766fa8e1369e33a75cf25a6e34c44a228728565d409250cb9e0c6453e7a77ae53c501
364e84b34d56056cabdbe7c0c40050b5f362271654e06b4cd3f1694c0b3c5af568fc3cf6628a005f
bb5ad4d3b50e38aefcbdae84ea99d32eed63dab05463859fdf8a8e4b21077e6d76dcaaeaafd82d90
3958f2bbaf53be8d00204acf7f5e2c149db90b76e8cc54e897966519c67731c62d7d16891e6a2e77
6d444fd02b618cf6e2fb86e4bf2adb87e9f55010e8febe30b44c1d6e0f4d87a7ca1ebd07889805ee
2dba0c0ba42fb1b440c1d51d7b1f1018dc4acfaf864a66df33abe599050a939623b1e40709c9b26c
922d8775ab3d97e8d4fceb748fc52812d2831fd1684f270e4cf226ce8b680f2f3c26f026fcb6c694
9e3ee2584403b2e836a11710bfbb9465e919eee82facb963957ed255468b00c221886a1ac81e9fa0
c02700c2a6a1c877f2e8650c0eac981f06a35e9841671f417f3e99f3734604abb9c1ec17be9d41f5
f8c923bb979210fce9a17de7926eb45d0f62ffa28a8fa7869085c44a9cdd7a10103a104c689f1f03
8dc6495bd8770f19639e462edf75dea51bb62b7b4d10f7de2a48b1f5fefb5a26297aaa4f88fa0fa5
9e168c3c1d0e4a1a85ac934868a19bc37ecede5c06d0edd7f0f9c7d9e8f658e49eff38a0e90fb0cc
7f31d01922acc32581b4c6734aced334a565487dd5f56c2360faf1f85ae628b7c66b9610b1bf3333
193a72fe8055c48a83baefc0c58b6955db626ae487588e25abc240bd3b9ae824df5c30d535469445
f9f49d70d7cdc601e6f3b1aa1ee85b6a6ef0d31570e1d7dcd34ec31438ff98af3134576e3a6ce516
44bd6de9c29504adead8c06cf0b727870c220c099cdc988ab0792bb14aeff8a535585cde0892797d
df63ad2c5d0c571f58b4788ba685cd4134611bdb74e52547a2f29f9b198f15d613146925b4261461
24758478359ca6e051ea27255c4e762358bd0d6064e60cd68ed1ec0aed7c2e666e4175b54920a3cf
2a0a7b79caade7c53c2c71ca52ffe86b11e025225f9300b2e17e5768b797e5769d993e2e18f9300b
d53904c01f013a19b3206e4c353207dd16dcb8f822529691ec8017c8f2473c1202fc2fd869cbbfe1
c4eeed59af1c1bfe0a2ab3fc3fa44f41e35f51c782e11c9a3b29e53677be9ab8c510d3abc7d6da11
eaf7c6d876802a95bbefb9aefd4a9d15aa745a13a537eabdec9978b3cb0ca35a3187d05bedfbc9b5
eae381d5d07a1745ba67bd8d05530debd4ce39cf2ebf71826c3c991c848ab2162ded90000a796edf
78e89c67a75b46cfe3f6beffa601da58d749590435fc267ef4f27c7da37dc867cf13046e1ed002e8
55f4ff3c54b340b629a41ed6a3243dcb92cab11f49ffa71254cd81bbe5daca324610277407f5a521
d2003a15835d6643d6959fd682a73fd5902d8e58b88f953530ee2883362fc0ee50f9a4edef0b87b2
c297a8b6c5d2aaff2c6964dce06ad3d5dbb8de241de8d6a22b9686f663a8aa438910adba558f670e
78150780998eb29365216b731155f2e0f44dc29e78f9396b8e823e0288310c6a32bb9cdcc4a3d677
7326c8f7d3929c22457a3b1d0ae93370562b4f612f1de1b5e67d34f9eae5d63c635f78a9b531f5bc
17f36a4baafc62eb7c44b468c8613237911ee35cee8b2c0f1a4c5f0a707f89f4eb362d50de36b995
b1229f4741ffec6340602d26752ec08af96f8b7ec12e7e8ccd424eceed1bc3a0119757e70982ca4f
3d4598d71e073de2cf4e5fec19ef13f2597e4e868e5d27c1148a154270849113e3ce33314912f1d5
b4282a6c10230c1bd16be6c46a9dfeab017e2e437bfbfe788492b12186380c43e8c83c8c9e28c341
0113312ad48be226eb752c166b865e0911a3b107ec187348548d9a7d5056e231dd934eb595ddd7cf
1f7271f700baccfa69a0ca5cce305b337443300e479a68dc46d6f7159be95977d325c455097993ca
17826a0f615306abb3ef7abdf0b7eaaa4df229f5d347d75e7c12ee9b24918cd0458219818f287c06
2191b93d4cd18d30ec9a25501d7068fbefd5958887b1b5d05b77957ddfb2dcd61639d2126be12e2c
9491f850f134e76d36b4c6b8999728414ee8c773ae3ab8db2ca200e7beb72c4673a755552ad1fe79
2ccec7711e45d4d735fd4a2e3e142748db990386d0ae792ef50c107b9cecd7d4bdff7775bd602ae0
46e5e9533216f13f541e0f9169f9c176b3d611bf6c9ba317c319f222c3d51189e0a6904fda522b9f
6052cfc90ecfa18bc4b23365faa45e8f0d8e85df85be40198f5cc310c45c7c2b55c6d4d16af5d586
a7e1b23a3ecc8f7753df1c8800770a312747c05ea98fafe2778bbda8a2fcdfe7df508591000abcd0
77053ffe7859ca3b5984dcda29be4552876910cbd9c0078cb3d2f30a8afc011557b2bcae5e8ff75d
2533b120277474fea180964e5011feaf52d01fe7d688a106b37b22ed4b6aa62f1ac1f76c2245d894
66e2b79d25423effbce551d725c2a3d129940ba607b0a9b105cf7bafb8d10a45b180ff99dbbbe500
a0c05388dc28a412a85a5c2efca2aa8a00c864e01695814a28cd588011b28a0ac75828a8c3bd5589
f3e05801cea32b590020fb34ef510a4921addd472296fbeee25bfe34e5040384257aa6f06dca73e3
f40d7743b251d58f30b87c16c7bbad7e3075bae511ec289d44a51790c8a3fc1f8e897209281000ca
af29e64cf3a93760e8d95b8719bfbbf045671090cf1b3fea7a441b78bb9c0f522e15d22adc2d73b6
bf912ae7d17617d3cfe482b4d27ad735a5d8464f2382c66da912371856ddb15c4edb6800270d9122
a1e4f4ca5977335000af3e7d4a0288dff68501c3e33355fc67493843be7f0f5709196faa3cbf9691
e76ef86a06a1f8b31495a3082722d647fc482e0ee7fabf2cec18d09480316fecee0dc6747bcdf2ff
6f67b57671385a6f4ef50972c1350324cc7313c9342f2653cb7ac71506d6748f4973d60f12f9e2c3
549342402e511869bd0d0602147b90c302c6df3bc8c2a51213e5017ba7f9d7c2b8573953e333d7b2
c8de8a1299f9b00d28b8a7cead81831f67f0a7042d2b3e32965e98561f63c72c6c31ac2c447a8cb4
76c0c513c825c863f8f2fac6b360ec8a8d438686f776bfff966f39c6facf90a7c1353a62528eb22f
baf9877a8df3ecc9847cc28d8a7e11fe501f3521e5c34966c9654571e6c010686cc22bf7cbe56d75
a52edd09fca5fc74bab9dc24b8eb44cf756a388c86328d15469fd43f5639fd82bfc270071bf0d64d
7a945521f92ece12f63dc58b5ff8812799b6a34d5a9f311a2f6ecac0c95755034f0cf7e47aade03e
4896c6df4f5e503b662f6f145026f73bd67b213022374f1cc7191869533360bb4e1f80ec919e2c06
e8583b198e67c7f5b19480d14853092d8a8e4af082c9cbcdc759da437bf23b8eb9c23d38165a9bdf
6707e176e434d2ba8602bbb4660fb49aa1c679cb8c1b1224dda05d8e309d1f2792a507a02fa6d047
375ef03c9732782a748871d45d8ab4aacdc4f7fbd472d30b2d943d183897b037b199d952245f5263
4dfc681125483bc40bc7be3693e8dce00688e2f2e90c7da506479f448513ae4acf618e0ef20d3b59
cfbe2f84b5a93daa36c76ba0af52c70178914213ddd464e79d02d12ac538c20500c19fca92d91bf5
c32ebe902f86f5bcfddb2124d247e1c3e5936ba9adbe62cef9451c4c3391a7e5ce78e819a76904d2
486421562c96d6d39809a69fec2711f40cd956465d46cb6c793df16d1c56b03d6dc1b43493e18f81
556bf5ac9ae91841beedfe8c4af127f56f9c6fa554cd454a8e92ba659314b5aa4ebf796f81d7f616
e14377d9c57769ccf90057e62bd74b9c16241f3683616c36d16e26fb36b37cf0640b711b7e0a852a
c64f93a3b2798da59651a860b54ff20fd5d661a1c58560348ce23497ff794117c875109c53a7275d
f55ecac0d522cb22454f3ea857f7c531b7070e34a9dea68f5614f11b91fe280863053a0c26e1bd0e
1ce3e69483cd795c0f59a6c0bd6b74408804e7878c4d5f0c2054f528d90198c0211b9f05bd1d8539
ad205b2c7f0ad38ca658573904090b8865725d9aa6539c17249db47f926dbd7c4001a2b15e552878
746eff79a08ece55a29741a2de33094ecfba03b719c935788b072d60e2f8e63bdc5652957ea5c862
c8f4a27efa38f94c78bf57c0350e93e819c67a51f573038d292b6136161319f464b0e7b70384228a
28c819c875f97e3541ed31182e3717edc73631da4586c117bc94f808b3dd5cee964d7ee8a321281a
6c78b8cdeb13c185de1f7aa7d603ad689e882f9ec5fda93d2eb97371373e901cce707a3bbe062cb9
20f8ec10989fa0cc9236c02317846f11a9acbf6202848493d4531c115fffc1b9c468d84d4e6e2aa2
28600d0296a402807b34faf76fe5d6d11207a01a9d1b4685068358909c32f25ee92bcbaacea464c3
3588abd12c5f668dd7bda9e2b4fd50d58061dc995e3dc0d77ee220dcf6324765a3646a174cd6368c
2f505217f5345537e1a61a1c93dd995ebe7ee8e737088bf36f5df939dfa02b6aeb651800d1475bfe
ad14b0a2309c461924e2dbe960fdb44e3ab807be4fc374f1677efa8dcfc79fe821858658f9072e71
515ffd5681fc90596a521d2ab0ec86df8cac572d29ff4ba8d4aa9f9433d61bf3f1a9b5ff154b7482
6bc2902541a3c886af7c83976bd5a88515536eb345600d4e3b82a3a3f6fb9b50ecea3c3017e77f8d
1555bc301532c2619940f60ec8c0b599aedcf7cf1a6b60755e2f12a4cf66b9cbf9facde406f6bab1
bfb668aa99bee4ee44c842ed9ec24888ca45beb16bea0e2cebe0be76601a19b937a1720ed630d336
906d48e9b5dc1b4400f5b3d4895b6ab4177a90067468b4a51889e642f9c3769fdbea2d485c22f015
a41d41e803bd9e80e19a420ca103ddfda13023191cc5b0863679d67ca5bc346da7b793cb78568f6f
fab1af4d6e41cab7091d45ea63be474fa65f8e33deff0427f44e66581e0af6fee10ae9a60175a4d0
004c0f63b665b2a3bd35c29a74267ad6fdee4a35572a2ff533d0d78661920086c472227a0ff74885
04f28343d22ca40b87b410a72cbd1f7f77def85925119e4a1438a9eaa58e130b7977bdf6f01bf3ce
1523b4197a61df6bb09e60fc322a1bd4c3d5c84af0d9e163f0bc6137659b5f7991de26ca65cbb370
299aff684c42ae2265dc50822fc2af1ead8f3a7238779844ac3d7cd9563461134758ae715a7328ae
12725f11b401fbbfa38e253bf0bf4f3e98c1cccaa9e20dc78498ccd7e8b1624032545bed110299fd
ee4ed5e741a8257206e9db7800cb5b6b6e357e19e278edf1d51c6786a291991550e221e146321f37
cf7865c84b50484bfd5ab481416cc66cded99da4ec885898dd6f779b43f7a42c7adb003448ae5b7e
a31ab1d13cfa2ff136e804aad629a2bbe2aaea1c00b6b639ca7bfbff4ee138773499c45405e96f31
bdab068743dae6b353d64bd8d032f71657819af097ef1d622c1c473300fd855de0aef319a2e95e37
16bcc9d3a67a667fb2e418151dc524e6a450fd33ff03e755b11d870eac27f54ebf3cd50a7c9a9d94
ff047dd7d159a1328e29635d6100dd45c53ddbde9a9a14c26bef4f664fde14874c7564c0108c30c7
5f68de7f3ec697692a9651c64856bafd5c24720d7335f453fa96bb5fc7377401eb8d0b9c31684811
8df698de51f172a31b487f1aa4b6f2666faf8d8caecab87c57f591672bb7089c1cd62ba19ffd38d4
1ed7b4511cca3f996b8f4fbbf112c0e00a60aac5dab6d1a2f6d2a02565b1373bb3e6030c99af520c
5516bf9315342d2cbd1962060f47b9d969eb6ce3eb552accc781ddef3dea1531fa08b2d3463ed066
539e6956e86a83b4d4da5b2eb5a7a6f52fd740422757b73f7be4b1b6a0b9963aae72755da0d713b3
105e4d9f47c7182896b949b8f5e6413579648df915a5b819f36b0c5d2320f44ca008ce326b709067
488ff1ebc110b627526e2ec80215f8e1c5182d3b0ed73d8137bd1006b918451f40147c4a43d7a851
c7ae47fb3f8d9e567787d42520c947973184e21c6faa417a7a84c0accbbff361226777428fea0e70
e2698b7f5956e796771b6f9d8aac41bddd852bd191c478b37f4c69e4c3e3cd8d2cc6e637e41325b0
2bef2dee63ebdfdb407c7c32574e43e420f4104f8ae88436777aafe3bac21807a0d3d6b5fab4f31d
59b0a576f22e4c45dbd3b32c3f9a9eef6392cc03e9b10cb00240f8da333a83ceac4a6334c7a057b1
03e9b585ceda75f5fb6fe9d75c87b26b3180b69693093644b965fc9d3c3e40f53cd65feb8c2f77e2
276fd364fa9ef2922a4c8ae608109e7a8180b6535762ea9eab9ce3b3969900d0b36e093b2eb9278b
09d5734dbcdb414dc98caf605439627e5d90016ac7a8bfacf3ba13238b7378b79ee3b611890f9488
93faaba8b2af547520ae5446719d6d9b249937fbcbeb95fbc9f10f1f828f97c30a9fbff7e843fe57
f949a5428ffaee026e001a4a3fb4d01de95f9ae32650e4d546bd83ae283b4015b2bb6881b2c6f400
1fc193713afc874d0286074bd9bc5da080d03a4969200a4c3aab73c91e107e4ba3fe9004ffd47eec
e1932da4a956d2f007d1a141385ad4583bd3e606b35bef5b9f18b8ec39685c48b868b28b8e6a700b
b3f81559b8e984c2984134eb47bb2e54b1133f50acf610cd9bc3b4011fcd7f5aacdafc3e5ab8fe2a
9d27ea4e773e7def1f0e3a0f7727482e2b426914b1287d5d0a49832fe3180f686e225f89be04bf88
79d78789530ffbfc89ec92f62ebe816cf9292a96090ffb77d7f03ef4338a4cd3a99d9df58c83d021
87be459cbc3680dfd1794451fac847ec9ad9b3f97a0633550e533d79e05c3a1ad55e88a503057b5e
c162b88d45045d04b64a0519a3bccc64c720ff479784e970a9a6f77013c104bd60ab2d23cf78e073
f29bbf050158320b1a917c74fbb5dfd8fcd24d21225ffa789fd5c65c7c877b96bb75ebac789e4b05
d4d71eff5cd05e8481274e9ff8d9cbf6a3d1123ffe3d3344f3de063c19b3b6d000c7fc1ede7a16b3
a6eb2588c2e3fac620d33599a42a2c919a4b0dfd423867af2ce0b776f16b1c8b6dbbf779016e483f
91ad82aded8b48a77ec82d58b10a67bce21a8a6cf46833acfe0cad4090882cb543164d5f5b2d0010
96e564df23c1aa1febf4a2b82f51b3739bf4c9f16f486e79e79920bc4caad4ed23e02eb52f569bf8
bfea5f3bd455c45506a53b021c36fa4d08f4cc6b2f6d8ea32cf69f25300aca35ba262ed5a5ed0097
ec7c15e44d88e20b54c8640601d422c48cb784ebdce371ea94f038804af7a1003791f9a8a6bfb80b
e730cccb388663a0b5526defb2cbec4ec39dca39cf45df1a0b75d2a2f6bc95452bfeae2a227c7799
f511064ff0b8d9e6d06efb30be8c74f7dbb6f675151a661ed0bcf0c12e5d5a67d812b266c22e7182
4e69803109d8263cd6320957e7e21444f8fd76435b4fc83e27edec1cc99586a97cd5700914c1a5fc
b01f16f7c0b21a5b194d42490bfe42498f46a3c561b637717d6a56d09aaa8ff6ad4394dd3804e514
bfd40e751875f2ed74cfceb31b76ce0b1d4b2abc253e4c737b2ee5936588a5c9d3d326aaed60dfc2
7bfb4c608682ffc6665a5eb714d1d9d983512542b36ff23d5a290ac9830f0c53fac6a83ac47b1d2e
0cc423ee0d0c37a491c45af8d5a8a490f1226f96e129148ab3e5a468aa0ef28ea2f66063452279d9
05164bbd44c23c9177568daabec4de0388e58a7f262539fd67b4c0ef46da7f03bcaf550670769ae5
ca0f49abed0cf5195cd40fc246d342b718a6277cd78f4ad347dcc9305d98e50c3e6445399c80254e
2a7de00fc30d761b2812da1ec7c24c610c773ca7975bfff46dae00c7c68597fc740d5e384d09864f
44b7ea8fcfc566fc77a2ba5ecbbed03c4db330834be090d2f2f315c72cca603e35073b0d0c62dd40
0dfadd861a4935426e390ee30c363d190f7e86740097d156a12eb665261919d1fcba10fdc17f7eb3
5eb15d979fbdf6e30e3df1b60a1c9f015b7aee1807bc775e78b1df7311c8f13c936dc6c320eb6e9d
86ad69568d3d493df26fad0be7674c650dc384c7cafc02b9725123e0d7845762cfe64edb8f4c02e2
2a0d343b3186550c12284e04b0ab82aa13f39ea583b51f0725cec4a10af6fbc7353afeb5904ad407
c77a23a802f2bd2a31a2ee14b580f2714144204bec9f614b2f3f10f0f637493e5dbfcc6360f8434d
8aebc4d52104e66df5402cf133a208bedea7b03cd8e5816aeedfdd9e02fc27bfb19e7582906e4804
b2c88524dc343e1ba5567cff155df895966e474e16ec944a7a15507864fdc7b76bfd9b4a76e44420
8c7019113ff1ddc7a33b8f4c05f7938f44c222d0a0a97860745810bf7fe7c1c7c6a2524fab58fba5
9fec84a6a4e54cab1de2d37cd337acd8bdb262ea34e3c6ab8214959ba4f00429ad634299b6fafae8
615648e1ac4879b4f4d322e90cbb00031f231116325c46afa8dfc5b780a29640a72635688e80670e
4cd6ee29bd9775a5b1f8bb21030ab76a2b295f90fc1f83a0a1f93e1a1819e7c4e6041de11b7bd55e
650a330c66427a18b6c22721fa45910072c9bfa9f2ce4c0321ca5d1b3fc3eabcb06d0ec196b404e7
32f1c72c1e33c6ce5d8e75372522703dc42bb893c72d96840f0b8d8eef6add30e670a1bf9b3bf005
2c7f901f74b076fa74594fed462da8c12ed577fb4f0ae7b0b617d0549c0b60652889c296d80acec0
0a08a3b6ce756b5d275c2818769737e9daf0b54d3b0b3b55d00d98849c6a94160580064a3ebf53e6
ffc005af19ce92119a4b58b6c8bc17ba106e7b22e39204a79372fcbdf6da94d3490f0c58d2049c41
04489a6e6a3442805dcb2c34bfb8f27292601fc6a98764983ede2aa4d00a4e287f3222a82e5b23c7
9505c36c1e5d0579067c117907d88484da596dfa1af1c25e70e7bb666ebfb5032fa66500da9d0825
a2860d620fc0dd9cc2d6514283caa2434a12ff2b77c30fdfc59a4b8c8bceea8bf93c4b300632c201
8ab71a48f9142892766d0d877dd3a4b7517254a24cffee7834665c90e09969efc45befc90b7d7e34
81016da39385af1c6d0bd569bf20c072b76aca22fc206d1d6cf82804d2a7b3c72e245657118b5547
9df1e40b1cc5db1ea2be8b6c77423f43a511d9af435fefd73b681c4af5c3ee4d0e9fb7cea7a4bf13
e06511a45fca205cbf6e11f3ec7322a1d4326b366961b9ea159062a56d1a4d1dbf7b41ce7d17f195
0d4e25a6870be096cc7cb7c2f640e01b12282236c2c5c5590aada30bea88b4e653a745533582a78a
c2a024ce33dd079eef2562c356bb72ac7824a4a1d7927892fbe7422d6d0c0846d3ea96675398eab1
734f39ec4454b094a9db69c0ba50e41e197702e6215add9d8e41041a8c38a6fb4d22d85a256a270b
672513ca95f1bd573169693f25e16f2f4ae1cdfbecb06b785010e6795c3aa7cc19b7b41833a27d2e
7bd54eafe9b705109809e1b5b4c96075a3f33b15dda2c09aa0d98c81c1f0528d13248180705161df
ac0c4f5c8f8dc6d6352f232e81408d30479c1f64c70a0f1e59535cf523d237652d655c4fd46f561f
14647e1f2b11842c66652b6f72bb9d74fe10794f17bec521a1d705ea21cee791eb65044274ebc390
21beaff07eff198ec283c21a81a888f23e4440d77b2d38c7e397d14e0cded29ea921ded96a8ae44d
71a4fbeac72664c7d43e54b56509645ca5d3cd3d3161009149e4d18af989694828ca3369df1c35cb
084792494e2002070f32b8ea77109d8191baeddb5fa1b6db16a34de9c6b657fe54956ac8dc70e6f5
2170b0977281144b09a53607a49e9dd0ba8b7ebd1365b6c4fe9042841f482c078501bc5f57d48e84
933aa381bf09f96f2b19eb45ea4ac487fb9e180f19d22693c7cbaac360c453449ce635053a2555f5
904e66e319024d9ed9937b4e85c47fa2674b2224612d04d33e41b6ae6a36d9c487fd86f4e11e3656
6ff17683a4196992060500f33c10c9c94a01aa5a107ab872a94b9003faa3165678e74badacbd1ebf
104df2256acc5c5176419a542f9dc80d6c04eccf3cd3111eb4132763918bf840
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 25
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 29
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 32
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 49
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 53
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 56
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 73
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 77
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 80
NOP

// Rung VGR_Copy_State_F#12
// Offset 81
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 83
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 85
NOP

// Rung VGR_Copy_State_F#15
// Offset 86
RET

// Rung VGR_Copy_State_F#16
// Offset 87
NOP

// Rung VGR_Copy_State_F#17
// Offset 88
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#18
// Offset 133
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#19
// Offset 166
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#20
// Offset 173
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1"

// Rung MPO_Copy_State#2
// Offset 55
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 116
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 125
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V1600 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V1600 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V1200 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V1200 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4 0x0 MHR1 N300 1"

// Rung HBW_Copy_State_F#2
// Offset 13
STR C28
OUT Y39

// Rung HBW_Copy_State_F#3
// Offset 15
STR C29
OUT Y40

// Rung HBW_Copy_State_F#4
// Offset 17
STR C30
OUT Y41

// Rung HBW_Copy_State_F#5
// Offset 19
RET

// Rung HBW_Copy_State_F#6
// Offset 20
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#7
// Offset 73
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#8
// Offset 114
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#9
// Offset 121
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
SET C601

// Rung VGR_SLD_pickup#10
// Offset 73
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 76
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 80
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 86
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 92
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 102
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 108
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 116
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 128
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 132
STR C605
AND X26
SET C600

// Rung VGR_SLD_pickup#20
// Offset 135
NOP

// Rung VGR_SLD_pickup#21
// Offset 136
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 870
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 870
ANDLE $VGR_Encoder_X.Acc 900
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R902 50"

// Rung $tFirstScan#3
// Offset 27
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#11
// Offset 61
STR C31
OR C1701
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 71
STR C32
OR C1700
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 81
STR C33
OR C1702
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 91
STR C34
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#15
// Offset 100
STR C35
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 109
STR C36
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#17
// Offset 118
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#18
// Offset 127
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 136
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 145
NOP

// Rung VGR_Program#21
// Offset 146
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#22
// Offset 148
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 865 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#23
// Offset 168
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#24
// Offset 178
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#25
// Offset 180
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#26
// Offset 201
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700
SET C701

// Rung VGR_Program#27
// Offset 212
SG VGR_Program.S2

// Rung VGR_Program#28
// Offset 214
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#29
// Offset 226
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C35
RST C1701

// Rung VGR_Program#30
// Offset 237
SG VGR_Program.S3

// Rung VGR_Program#31
// Offset 239
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#32
// Offset 251
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
SET C35

// Rung VGR_Program#33
// Offset 262
SG VGR_Program.S4

// Rung VGR_Program#34
// Offset 264
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#35
// Offset 276
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
SET C35

// Rung VGR_Program#36
// Offset 287
SG VGR_Program.S5

// Rung VGR_Program#37
// Offset 289
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#38
// Offset 299
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#39
// Offset 308
SG VGR_Program.S6

// Rung VGR_Program#40
// Offset 310
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 50 N1005 1 20 N1006 1 320 N1007 1 350 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#41
// Offset 331
STR C500
AND ST2
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#42
// Offset 338
STR C501
AND ST2
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#43
// Offset 350
STR C502
AND ST2
OR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C35

// Rung VGR_Program#44
// Offset 362
SG VGR_Program.S8

// Rung VGR_Program#45
// Offset 364
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#46
// Offset 385
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#47
// Offset 391
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#48
// Offset 401
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36

// Rung VGR_Program#49
// Offset 411
SG VGR_Program.S9

// Rung VGR_Program#50
// Offset 413
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#51
// Offset 433
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#52
// Offset 443
SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 445
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#54
// Offset 465
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#55
// Offset 475
SG VGR_Program.S11

// Rung VGR_Program#56
// Offset 477
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#57
// Offset 489
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#58
// Offset 499
SG VGR_Program.S20

// Rung VGR_Program#59
// Offset 501
NOP

// Rung VGR_Program#60
// Offset 502
NOP

// Rung VGR_Program#61
// Offset 503
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#62
// Offset 513
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 521
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#64
// Offset 546
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#65
// Offset 563
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#66
// Offset 567
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#67
// Offset 571
NOP

// Rung VGR_Program#68
// Offset 572
SG VGR_Program.S100

// Rung VGR_Program#69
// Offset 574
NOP

// Rung VGR_Program#70
// Offset 575
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
SG MPO_Program.S0

// Rung MPO_Program#4
// Offset 16
RST C900

// Rung MPO_Program#5
// Offset 17
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18

// Rung MPO_Program#6
// Offset 29
SG MPO_Program.S1

// Rung MPO_Program#7
// Offset 31
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#8
// Offset 35
STRN X24
JMP MPO_Program.S4

// Rung MPO_Program#9
// Offset 37
SG MPO_Program.S4

// Rung MPO_Program#10
// Offset 39
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#11
// Offset 43
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#12
// Offset 45
SG MPO_Program.S7

// Rung MPO_Program#13
// Offset 47
TMRDOWN T2 15000
OUT Y16

// Rung MPO_Program#14
// Offset 50
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#15
// Offset 52
SG MPO_Program.S10

// Rung MPO_Program#16
// Offset 54
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#17
// Offset 58
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#18
// Offset 62
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#19
// Offset 64
SG MPO_Program.S2

// Rung MPO_Program#20
// Offset 66
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#21
// Offset 82
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
AND C700
JMP MPO_Program.S5

// Rung MPO_Program#22
// Offset 85
SG MPO_Program.S5

// Rung MPO_Program#23
// Offset 87
STRN X19
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#24
// Offset 103
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#25
// Offset 106
SG MPO_Program.S8

// Rung MPO_Program#26
// Offset 108
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#27
// Offset 112
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#28
// Offset 115
SG MPO_Program.S11

// Rung MPO_Program#29
// Offset 117
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#30
// Offset 133
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#31
// Offset 136
SG MPO_Program.S13

// Rung MPO_Program#32
// Offset 138
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#33
// Offset 142
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#34
// Offset 146
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#35
// Offset 148
SG MPO_Program.S3

// Rung MPO_Program#36
// Offset 150
STRN X12
OUT Y46

// Rung MPO_Program#37
// Offset 152
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#38
// Offset 155
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#39
// Offset 158
STR T9.Done
JMP MPO_Program.S6
RST C900

// Rung MPO_Program#40
// Offset 161
SG MPO_Program.S6

// Rung MPO_Program#41
// Offset 163
STRN X15
OUT Y45

// Rung MPO_Program#42
// Offset 165
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#43
// Offset 169
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#44
// Offset 171
SG MPO_Program.S9

// Rung MPO_Program#45
// Offset 173
STRN X13
OUT Y45

// Rung MPO_Program#46
// Offset 175
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#47
// Offset 179
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#48
// Offset 181
SG MPO_Program.S12

// Rung MPO_Program#49
// Offset 183
OUT Y47

// Rung MPO_Program#50
// Offset 184
STRN X14
SET C901

// Rung MPO_Program#51
// Offset 186
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// Rung SLD_Program#6
// Offset 30
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 32
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 34
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 36
OUT Y30

// Rung SLD_Program#10
// Offset 37
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 39
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 43
STR C1704
TMR T11 1500

// Rung SLD_Program#13
// Offset 46
STR T11.Done
JMP SLD_Program.S2
RST C1703
RST C1704
COPY 0x1 "4 0x0 30000 V1601 1"

// Rung SLD_Program#14
// Offset 56
SG SLD_Program.S2

// Rung SLD_Program#15
// Offset 58
TMRDOWN T12 400

// Rung SLD_Program#16
// Offset 60
STRLE V1600 V1601
COPY 0x1 "4 0x0 V1600 V1601 1"

// Rung SLD_Program#17
// Offset 70
STR T12.Done
ANDGE V1601 19000
ANDLE V1601 21500
SET C1707

// Rung SLD_Program#18
// Offset 80
STR T12.Done
ANDGE V1601 7000
ANDLE V1601 18000
SET C1708

// Rung SLD_Program#19
// Offset 90
STR T12.Done
ANDGE V1601 22000
ANDLE V1601 25000
SET C1709

// Rung SLD_Program#20
// Offset 100
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#21
// Offset 104
SG SLD_Program.S3

// Rung SLD_Program#22
// Offset 106
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#23
// Offset 110
STRN X36
SET C1705

// Rung SLD_Program#24
// Offset 112
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 116
STR C1706
AND C1708
OUT Y32
SET C1701

// Rung SLD_Program#26
// Offset 120
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#27
// Offset 124
STR T16.Done
OUT Y33
SET C1700

// Rung SLD_Program#28
// Offset 127
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#29
// Offset 131
STR T17.Done
OUT Y34
SET C1702

// Rung SLD_Program#30
// Offset 134
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#31
// Offset 139
STR T13.Done
JMP SLD_Program.S4
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR ST1
ANDNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#3
// Offset 26
STR C10
EXIT

// Rung HBW_Program#4
// Offset 28
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 36
NOP

// Rung HBW_Program#6
// Offset 37
NOP

// Rung HBW_Program#7
// Offset 38
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 40
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#9
// Offset 43
STRN X11
OUT Y7

// Rung HBW_Program#10
// Offset 45
STR X11
SET C110

// Rung HBW_Program#11
// Offset 47
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#12
// Offset 50
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#13
// Offset 53
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#14
// Offset 56
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#15
// Offset 59
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#16
// Offset 62
NOP

// Rung HBW_Program#17
// Offset 63
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#18
// Offset 65
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#19
// Offset 68
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#20
// Offset 73
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#21
// Offset 86
SG HBW_Program.S0

// Rung HBW_Program#22
// Offset 88
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#23
// Offset 89
STRN C100
OUT Y50

// Rung HBW_Program#24
// Offset 91
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#25
// Offset 93
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#26
// Offset 98
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#28
// Offset 103
NOP

// Rung HBW_Program#29
// Offset 104
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#30
// Offset 106
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#31
// Offset 111
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#32
// Offset 116
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#33
// Offset 118
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#34
// Offset 131
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#35
// Offset 136
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#36
// Offset 138
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#37
// Offset 149
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#38
// Offset 158
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#39
// Offset 160
STR X2
OUT Y48

// Rung HBW_Program#40
// Offset 162
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#41
// Offset 165
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#42
// Offset 167
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#43
// Offset 170
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#44
// Offset 172
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#45
// Offset 174
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#46
// Offset 185
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#47
// Offset 188
NOP

// Rung HBW_Program#48
// Offset 189
NOP

// Rung HBW_Program#49
// Offset 190
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#50
// Offset 192
STRN C100
OUT Y50

// Rung HBW_Program#51
// Offset 194
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#52
// Offset 196
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#53
// Offset 201
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#54
// Offset 203
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#55
// Offset 205
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#56
// Offset 207
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#57
// Offset 224
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#58
// Offset 229
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#59
// Offset 234
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#60
// Offset 243
SG HBW_Program.S9

// Rung HBW_Program#61
// Offset 245
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#62
// Offset 257
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#63
// Offset 267
NOP

// Rung HBW_Program#64
// Offset 268
SG HBW_Program.S100

// Rung HBW_Program#65
// Offset 270
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#66
// Offset 273
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#67
// Offset 276
SG HBW_Program.S101

// Rung HBW_Program#68
// Offset 278
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#69
// Offset 295
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#70
// Offset 298
SG HBW_Program.S102

// Rung HBW_Program#71
// Offset 300
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#72
// Offset 317
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#73
// Offset 320
SG HBW_Program.S103

// Rung HBW_Program#74
// Offset 322
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#75
// Offset 339
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#76
// Offset 341
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#77
// Offset 346
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#78
// Offset 349
SG HBW_Program.S104

// Rung HBW_Program#79
// Offset 351
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#80
// Offset 368
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#81
// Offset 371
SG HBW_Program.S105

// Rung HBW_Program#82
// Offset 373
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#83
// Offset 390
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 392
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#85
// Offset 397
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#86
// Offset 400
SG HBW_Program.S106

// Rung HBW_Program#87
// Offset 402
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#88
// Offset 418
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#89
// Offset 421
SG HBW_Program.S107

// Rung HBW_Program#90
// Offset 423
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#91
// Offset 439
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#92
// Offset 442
NOP

// Rung HBW_Program#93
// Offset 443
SG HBW_Program.S98

// Rung HBW_Program#94
// Offset 445
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Color_Sensor_SLD","",""
"V1601","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

