// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Sp22-Python_integration_wip.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
9cbac3d1074ba5ae2bb81a8723a8c248c350bc82ce1c9fc0345debdf221551810a5f37d3af09d5af
ece07758bfc3212bfb5798d8dcc9a0d3dacab060b6dbf264def1e4a6e9661cecb0c8753f637d106b
22badcfc59ceb28d60ea7cc13dd8124c72afb42f9b9ef47e7c6cf737f6fdc3a9cfb1892a33d321c7
996a37902020771ed65162229d13be537ecfdb3ec519c17796f377c5656b9f4228d28b4442ac34be
b1e5fc8ea063275918a11fea1163f5af8017258f66f226e7bc72bf236550527fb46bfb8fa75ea9af
de5191564239425333e1f0476e5883ac816e30534fbbd024ec1c2a536249f3e9789186403f88aa1d
289651ccfbf4f39385eb6b1126fcf2a649eb328c84adbfc757b813c558437c8fe31ac2bf0c9841b8
2f4a1acb7b6968daa7f6c1ab76ad09acfb018b48f57f66c5d79638cd10be8f03e33641ea07f0b435
c688417f1d46573f85e588ac755f67930f41a7e516efa9e4f9c36f55ca8b38dee718dd1de4aa6fb2
5c41fa9ff44da439b5453aa543c714013207b284ff0dc23cc3d5eaa8998f0577dafcfb4a546fe675
4db062b23b4f75f4a8aa6bc792d3712abdd0eb92dc6d7b394a914dccbde6a75a512b6492fd6ecf5a
7e280d4d8a5035adf5e0dd9961fd4c6ac93548462ae07d52c5c4ddff5a880b758a5606dd55ce8f29
f79271b727135c36785f195e554929486639f6fe8f6ff359d6081279115fc67a8a80c9eca3b788b3
f000b06c9ef3d11a2e7ee89e63f60dae3f16c9680b1aa54a7cc045e1b8e866673370bc7df3847ef1
b5bf228c3f80000687450f33db37d06d495d25b527d6193efb2c5c51d774f2b29bd0f8df6aaad118
80c02441165ef2c79bee7cbabff04f28bbd63a1164efe6b621f9a028ba305566d3b8191ff9899af3
169f00b7ec423b77bf97019057e9720059f7dc647806796d784ca1d70a06f9429949b8269940fa73
57a5a011f84c3161a5a9d33e57bb232bcd9912f09bc9fe2f2fb16d4413e249b49d83e5c0633487e3
40a0c5436b4ccb1553934ea3c10a72cc025bb13dfce74c2acd33ae8b449edf35fef020aa920a4fcb
1b3ab8a39f2540c5ad859eb0a7630cd9d52221d2eb64def9b356efb09f2a51c49c7b7d0f601decff
86bc1b0b6a62f7b661a25bb1fa2cc1d44852bfa7d24469af5c11e9164c05fdcff4bcafe350e514bd
697395ad2be06575f1621eca35d805a7918f3d34253e03d8e4ecff6415e548a40ebc30a8e884161c
a6522bd185722ca7082edc5852658e39bc8a518ab7db147528b9354499c01dbaa38d2ba878a3c636
8828a2e082420e02ba90cea953dcedec4c1073f4ce0e8812b3dcb951a4172825e20d7ea62d83724c
7f6e1be22d53442467587c8df841d991a99c34489a9df7841efe2aaa0bac301cc40580390db2fb70
6901e03fe3f275562efa642f75dfd72a2e9f2340a7e5a624f1357d30ae8ab1b39e33aea157fbaccc
f727e34965512de0c9c92b108f44cf9ce8f7ff7c2254d09aa31bf97d19daa0a2d1687931f4650300
e2860eb4426df2ef51569401a7d709c78be9d9ad53bfd760f0152671846b29a8bdb3c96470ea2f1c
e854f2c20f5e3ef5d7b13b6937e2b186abe1fa8a5f7a1d14dbdd30a6c4cc9d0b3874c94439b0749b
ef3cea9fd5766041852978b3732cf361b950002ae8208e1daf09135ab0dfff9b06b27dfa7b63ef72
a02c4cfeb3b7ad816d710cde41ecf5d3a1dda425c94e7769eee8990f67f2db14580c256f6f4f9f7e
c3dd1ecb54339e9b5b4f9afcdd079426022208cf442217636ac098b94b8f083c578c78e91de6a68a
0498ef0516305876d24162708e5685a707c634a5fbeccc6ba94457711968cc5f7c6e9048fb25d109
ce5ba45057426e48a6b66461ce489995b90931b85f65991fa3f510502bcd7f64a4528a11f35c83f5
980508c012c42bfd408ac5f4001e2f39184049f06d1ba474de68b236663240a1a44b95b9bf39e3f4
0e3f1e4ae7ac1f941195e4fbb0d1b82cde849ad06a516f4cbdd0a61909e99e521d84afd96ce2025c
b718cb557a3a43c97989ac03b89bdbfc1007620c84ce39d4980b482da9f0d1b0c8d10d250412079c
1143e5d06096c0f25acaca17104a519d60c155573f7a5f4efaa43d313b5f706d3c810c89e05fc9fd
59497cc5674089590f551bd69c9c384c7d7b620043b24a6a3f4aa763c4bcc0a91c0360916fbf29ed
7d1f1cede58a5a6ba5f1321f630a872c4aa510a8c430c341f977bfee382f883d6da71cb4a7b4f536
8868032d3bfdb817e74bdb6fd7bf53a06297c1068a5dc70c7b5577f2327e4ee32f8862df444fec34
d363141a56d42740b3afe1adf1f24212b66faccddf93d182a978c8fdb2dea40198c7c7667e3eb066
07e3d73ec78309006f53db9064e66f6bbb9c2abd9b7feb913992e569fc62211731503415918410d6
4a78195ad09b3cade31850fc70e8e9d32b8e241504281f2447fd60c00760270200a2a68e98dfa370
7a8307147ddaddd7e9e9bcbb2ecacec39dc5f78d0e62c1e1474be3b8afeb099c85eb204d99032fb8
415b068393afaf2a321c32430fe370837b8f7a8f3c3b1c97a89e128ccdd3b5f8e4703b3a5355676a
d99fa44a9a3c535d9cb1f354407387c741699b1365f4f741fa1ce804bb1905a3a12434422dcbf91a
afe9874c4dc1723849a713171c88927986447590b61ce36a3ff83e8aa71671a74f21b3f6a88ee77b
39a595f705f72882fb089d1ba161990d83472b0a3243438485c07f032212ac13d16a0bb72f672e86
2cd14cd8a19645b8ddd765b3cbf0983757f5ae8db33f98e41339cd72819075bf8fd752ed820620aa
822c3212d40955830e2108afb02920b1931c3963b226fef61ae5b8b833cbcdc9f892cbc849e9861a
4134e5340c26b4371104673d7e38235dfa5dcfeeba8f93d00e33d8d39e4817780b2e6d4d1a1e8720
094d7c9d8b47fe4c624a4b27538fe7eab4c08241a8ea3df507ad1cced3d527e923384617227b2137
b7c5d8086d6afa25e45d087b30a914050b282f59c027d9f2baf26e19f1b38c9d365424b53f1e2b8f
ba83d584098812707f79e49e51300d624266e461f558f1f2ef3763d388440328c9d1d28f6bdf7317
b91c7115239611ecae5d8a60ec6fbb5dc5457a63aa08d2267881b0cf40932eda5bdeabbf588beccd
a0eccbe7e45bfb9f29d70eaa9f02b3225986b192c800f003bb3edb54160a4bfde5a2294ecd913571
1b031feb0816594d6a3259f7a49bf32a313c5c9155ad7c0c6d1f273653f4c81716753a034b6d74d4
e96bab9be58d71c4ad91b69a992686931665173907fd9aba4950c6139c4b032f1c86f594f4008ba0
68d35871af4222107a627e7aa67ae514fe2b7b529fcbebf9361ec2a49afec18c29ebe1c8c80ddb51
872de776234ed39e362a8ac875657b55c85e1ebb08e2d09c5ac527ef590af5977d835a3fb30b1147
d8b2f9411e2252076fd7dc211251fcfc7ccbbf56ebf8f33c5403f100f41ee9647a2956b751d677f9
754d55037dc6b53a49cb7328dd0ecd3c2f02d9ebc7009f9c0580a5957d2a4f711735b908d079504d
5501c0337af8d86c22a5bce5cc5e615b7c7729f4381698212d2342681729ce65aec2848d416e294c
77675648669aec1d605376f5d6a45c8c082374e54502302884182fbf1f94ba94e97d3d796b511891
dffd84b7821ee6eb051a92447e87bde558b8a8ac9af499a14f8f19591dffc4605a2abd7670595d6c
72dc2288604e1a4c7b287b8252d625f78d4392657b6367695655c9f8acfa4764f054bba0cc2be7e4
cae9a1cdb9f6331813718932ccd7979121d2138282db5bd32cbafb1fc3a81ea55981e9e8414761a2
659d98161a176db22b12961c5270091623f132a5e9a01e4908f72f4746eec8d58140b3f4f6ed5917
907d8478e9c1db567127795f3fd5ca124514df722c7ad3d5600a7ebfe0d65a562cf3328ba4f16b90
35326f8dce5d10599b8d4720c2312b81cab20ca13c724447f3bd3a035a0bd577801a11effccdd37d
9b31d6f8acfaadfe1da9e4add38544b9610908a4e29a2489147f21b95e818ccd627d81f034334e2a
799efd170870a6d17c3b0911b12d55c565ee8e0014b085f7a29d83b80cfa492ecb57ed4e9a7a6747
18324d73c4edd0fbda2d6921393a32cc47f1e7d50517795175306dd62d0c415b167880ba41d34c71
64f412c646899420cd6523390dba76592afc0500f1458473b17b86e01a94b714d5646776101b3083
48ee4b8c355a53c9b052d6526ac91f3c48899f35de860e5e14a4f7873464c92e45b5e71aa960b61c
cf42f83045d811eede8a8ada315f61e0208437ddef6f3bdeb65cc033b7f6694eb8fcb58d9059799b
cc4544b0bab43f184a14a2c5b0f1e0310ba49fd76ac505b7c7b4146906f0d122113c29bb9e6db931
ad30139de9031d65b0873b0048f52d3d3be4381dcb786124890ae2bdd8e68089a699a740e962c351
d15a446aff68b7ad96b59f42910e0c951174d46568215f083985bef64b7fcfa4ca61a3c014f81c55
c355a07a4bb04a9ca8cc0e903455133f0b98996bc269f89dfa97971824a0c1de742a463f6443a009
d37d9b44dd8ca0b5626011dab5fbb5eff905b14e24bb7de0d8ce5899ae3dff4036112c7d8479e319
1eed4d54e4633fe0a2be999ec6bdb431897bf7ca5c35b7857a4a0245fdc58865753cc2ba97fd218b
318691be924fe95c30bf139e87dc51b51e183a51d45f9d085b2f3ac6d481c1ca1db27bb3d4123c7d
0e4899089e6015379192da60f6b88d3f036ad57f4a9e843eac405b07d54d069ede0c8704bc4980aa
e92a734934d9015676d213ed1345d8bb3bb800f5e463c4c7568b15ea3babbecfdca307b153b81099
4e18c234d544a82602e171db7b169f881ea79cba878536078729cbbb4447ffc7d4332f9f76d5f9a9
3c9c43339a95e2b8c2dcf7021d20e815b11c47d6cd7a9b13e3db6ccade1ba48ef7d7c315a308d89d
dcc667aebb8fc7ac946dbe556122ffa5a5066264d689616581d56c834cb1acaeae376f2137b57311
b2b4f5866baa7ce5094d1c1927ddee157abf5b483e889a6c99f30e9e54c9a3647c7e9d3a15829411
da1512702cf989d13cf36449c1ccaf6391d047366aea5832ae2a162fb95389fb514c956f6916752f
f431e5084d5fa9c3bd68234eb36222a4b356b6fbe3e51167728b27387e4b90b44fbfdd56698b21b5
6d3dc6312e2fdb6b8a54921146459108d364fe47ed7a74b2e2aa91e4751ab995c75fbf3e76abd133
913af690c964635dd9820b34c6c0ed7c56afed9e04e450775254c33d7647ab07b93c18e698497ac3
51b9e74a272c13bdbae11a8b38139eda0926fb63bbc2a2415fbd616d5ccd59370a60d8e4e738614c
0b72ba42930fc7d8b495f9a798acf875ecaffeb3028ca97f0440a978e7dfe284eeee6512236e6b53
fa7f24882c694131f400d1945b95adb670a5695dae41d2940cb97be9e1a048348bd537bea27502a9
9fcee590d8ef8f26a81815468c039f2b94c0159329ea8b396f98890441ec87a17412652e0e7ee911
ebf0fe8aa6c1b8d636b6244f5f5539107f2ed6bdfb2ddba867c6a4702ffc523f8de92fa80d88de7d
530640afb4d6de4aac521b653c3e9554b556031c6074c3d03d55865c3763520695b9ee82fb07f88e
680022c1a834b5a817787cab116f65d336f6fb985bafef3933110b2d4c670093583c3aa0dfbe94a9
f852a676d6e21db8325e1cdd417109c2ce850a0eec4b104559af1bf094d1d742461c1134dd0f9fef
f804d8d080d47964d004f4064afe7f3c06655df6a11bd53ec30ff4f2065a004b1c6c3ab79edc0e89
26e1f35d8fe0d2b2bc0d30d2321d49a2177a14cb2ccd761d03c5d024e6757ea70a20af475cbf79f9
ce673c587759c4f11b3e6921c574513ca99f5c3bd062a69b243428e5b280ebba6f0bb552ef79d108
f0cf166aba251bd804f9164d0f1512ba3ed27923dce5fc63533ae1543503948aa309467a7a9d5b73
3421fb1bada305eee0d2dc514ca26deb592accb1c03645c0bbc12b280ce41d91f7a61a21aa31dc84
496c4d2797f14c8cee62c68c04100164c5a553c6581736ca3544d11595dcc595a11e80ed998b0ccd
bd3650633e2e5fa84bce3c088a8b3018e5f2ad5dc916245f54917b42334c5adb2524c159e8f6b277
d79b9eb839f1cd793890160f439b40d22dc3a1ab8b3308442cfce8a5a043e28925482465334a894b
f5a583054593d61e0fcbc2a0c18efcf75d56a879535bc630b9de75edbf25dbbbdfc5054bb2220014
69a169571a35ed43f7255df00c859d737b2ee18ffb918410e494dc50d10f2b55780ca64e4b1b11e0
22a16279b8f16639c33d35bb999919aec1e3346165f742edcd6321abe0a2cc2e71cf1ebe5dd9b173
08fb1b0f8e46d1943bb9c6941a9e6bf7301b2c9f6b35fbf24229f3fb45f2b85fe08f72a06c9dde8a
639eadf1a236fb892e1be47446fe0d4bc106e7da15c8af1790df8c7d5be69a50c427f309d0c58da3
aa4a780bc0d5601d054b57fb633e0f9c657ffe58b0602338cbd9a525dd336887ac51130926b32cd1
5faa36e48560221638d1c2be28472c626c0d5383438d923803c09ea4b5b22f8fc93d292b2ebc8fc6
7f58a2155ab932a70a9e4f2f229883b07f7c34924f51e7f897149410c329b8a7e8bd93ead1bd7066
5df4082526812533bbd9d412c93aedfaf505cf15b31b684520bc8aa4f985e812b042c1b8db78a987
3fcc0e7cbab13b3f702815606c013d64cb507911f9719b6b9f0f0972a937b90f1b66ba5d22c3b76d
c4fa6ea5164f18533c55e6bb037b03bc249113b588f2d4d55cd6107d27cef6a8e9c91a3b7c99519c
132f3483b58d7546270b82cf96bfc1e8a1a6acf24f1d4233ce0cf7091891e025feb486688009d525
9e061f492942ca10b0d6c63e23b9fcba46cbcf9a9767f171ecbe015bb577bc7a6b9cedfeba985d48
f524647d836f40a7d570c769240a08c7ef0970eb7c6d30ac3d5437f7328286d383e7cdc96e258f28
3a22c6da35002edea19cee7bdd920a43822bb0d83f42623ea86579e9c6e3e34b402499bf63ceb301
73750fc1ce0f8ab65c13dd18fd645f2b47d0f5c5be884551782e39ed6616bb7bfc7accdc01118288
ed1905f345c52582c543a3bf25323e1766c699c632e91a7b9818008deab8ae09f2cc0b57ba2ce73c
38c98736d3aa087abbd0d063d4141acd01cc44198bfb1535b08c8f159e41f783168a45d994588dc2
b31535488b6204810b60752b22da396da45c8ed3540b7947716b7f31bb6471a0a82d8723a9fe2925
b0963b4ab9e308b5f53ee119001910018d9b3d3974b057ef9012a87af64d8e1bb8624f16e819f923
29414424ef5e0e2c8353b33b6d8f76311f62c924b2d08498ca1610f6c3388e910a42cf95065ae414
05c8bbda0bc2e5f2ffdcc18d178320c2ba2ac7a23c9253cb8c16beebb4da96275cd4ec85d9938eb1
5a89cf4fd7bfee8de296fb1a0654840e706b9381ccf9606b54b33f27ae1812b65891eaed246b4d00
94cd5770a8f61d6cb951058f85ad0f51826c53ce757a205a73345d8e1c38cb281328da779b15130f
8928e6eb37e2c4fe6c6b090e429073475052fbad3962fdb52606b4d63ce479a315745cbc25d1a08f
172c8d50d3eb799aa946b17e88a766c02f8f335f12704005666b4d943542f52bf0964acedef55aa1
df4a967e0211da467d966971e0a2d5a193d044b310d3f444442346ecce22ab0a4d4ad8e8f63f9a2e
a8ecc7a399c323b6d436246a83bf9216e01a31870f2443c0ff22d512fb40371db236e36873005939
8de7587c4a7114ae158981c446c444d25b5483ad908ee5a47da5dfd7ed0ee9f27aabcfa02bd540ac
6dc9bf8027dba5ee57a88a5475fc12074557dff050be8619d8d2641b9b919245e34a699efbedce40
a95a3c50347536704252721516802ac5356ac7b5dbe517beeb517673439fbd6a5bad3406bb4bf5c9
24eaef42bb2eba2a006885ca6c6d8c6bc025d8ea38461eb5515f12a7bf979eb504f0f9ba51a3ad3f
0bdb4d1c6143b469866b661fd0fef73669d6694db39e2931acd9f439ffc3e90e73643b23836007dd
9d5c58521e35905c33a58fdee1c6eb8ca46bcdb4c7d8a04c09bb98a0bea0c8dc33d6e47e348bf802
f54080b0cdc2989a5fdcf5a016703e2484ad616718415bb5d2a30560a51c1dacf355719bc4e07a3a
f03c1cc58df9dade6fa86345239d6bd6662dbb8c58ebb1d76a87736c3efdbf3bc6fee9699c798642
534de70a826c22bd4123f2cfe7d99c31671c44bfd8bbfb7530a310bcd85e7dc7bb438579318d12b5
c14dd325d020ea0b073aec6b3a68df607a7747a82e9a24753d0c1fd2fe720734ccaeb96def83084d
5b54ea1f2e7e11fb5f9e29635932fd3106cd60c3b0b9edc76dbbdc01e4bc805aa9ab68f35504e87a
b3e8435167c60baf78e516d00488381cd169e87a822f77c31eebd7f85fe3db3d225ed948aa56feec
7179220cae395653a65e5639b974b4c9a369bf44d4de157e41b5a9ee1f50db9ba4f3f527bb542a15
d8f4b0e0a2226d65e1deef774661edd6743be786f7f5ac3733d802b4b43d31976c2b367e72f0669c
5bbf369c184ea98a1181ec624e8e497fe14c76f8790f11f78145a752fdf0eb3225107b9f54108223
48f461d5ab6f003dbf304a2706eb565e0e6fffaae3d0e0a9a68356f9abc15ecd6cbf109bcc0360b2
82c48abc72730432bf5a38f0baf61e7c8c8703fbf021a70b9ba998d5778bd793d29f6b956241ed36
feb467b4b75035922fe5ab97f5a33ba3739825e298c0934d146d07af26dadc179bfd51a1956bb3a9
dc39bee1f4b9e91abc48d41244b4ce11c35dda68c9ded51b5bd33802ea1be40c333f88ac37dfdc82
a7756662cc43db2f1964bd0ac2d17db05ad2e8086bb461ce12613537a148af29146bf996cd7ff62d
205ea8234b65d8c1056b064656e8d621a6b68c55f4587cbc0904505c2db4316ef020299a8b13480a
2602c44710c15c44725046581fdecd3b4aef82576fcd07b830a4f1d4ef144f46d36d87a6d488ec1b
c0a41749eafbfa136a4ae922a532d2a1ce84943070da6005c4482408180632a2399713debb390e03
9695f41c19e659252d6dc1ecdb9eadf9833555c1b74829faf5cdd9ada0597e561e87b7ee92d6d137
50107e9f080163dfa35e71677c0d32ffef9997c10635649b1fe207ced37ee2bbdceabe88489b6a8e
45aeddc8544514aa9788631ffd62f32f1ce4f992a8d1b24808b97803dc032e1f10d959a67ee894ec
f50116d89eb092f107b9a794b43fc5f839e8065da9dab7cafa3503b1f52ff4f7ded9cf1d82f08fe2
e1cb787ff3e230958489ef254688361686acd436273cff60ea0cbe46dece217da83b4ecc0b68e7ce
678e1be8a45d5dca2f34994863918dfdbf1731370a11d68692b8fa7ae6040a1e4459d314e1ec2db5
96907283b6899e215e5cf2c54c3b5e2e99c8a6cd44bfb84011f649477a0c8c053699fcdc08d3380f
404613ad60644e5f6096bf4b6499b20e698084b35be0716d725024ecfbbf7a1c2d6c9abf3978d208
57c56df2a08f988f030415c4cc6486c4530c6d1027b04891552daf3a3715ae859841726433f98861
d99c26f432bee486a8e2e72f1cbe0578bd1cd2aab3c49fbfba234084e1c4e3763a58a134dbeba931
3334a172ce46be34aa28b5320e0c60449b118007de82b587dfeb9f0b206417f19e132697431a7846
706c9ad91763505abeffa2c1cafd262aa98e74416e7c4d87d08838e52a3a0ed1c2c02a065b4c4bf8
14b3e1a08a18a7fe053149ef6e670bd396f6bfe8d825b791d1aab996ad578d73743cc865bd47992c
d4eb7e71705e0e05f18e36be9b8f06d2672c0d6562dfd8e5187467a21ecb2e10f68be4d6a1c9cce7
8310c81317e5422f0df2e41a22c31420cc5ec4c37fdf67fb981d944c62b904f8f54c50490b3c5c83
a48a46fc0c3416c830c946f1feffbe28e3a6d8bce811e532cf9ab11fa778809d4087044cea9a8d90
7d34d8309db308a5b029d2edb5e412165a0afe03ebde3c53ba260b1e3fd453cbd80a43e29d2c7a8b
4c2a94dc8ce105a053cf53c1ec586dff7e663e95edc88008c30c7350683a449488d2594bdba787c4
c8e501f8464b42168398db69482c835f5c4d8650487331d68bd7e3de7838a2c9191873e538aeb450
47c7f950cf34b7feb45541c07e1171664293f3772f82649012b65fa87cd220e3b11d0117f0b64413
15f7d1f9cff0d51dba3f5a7adde84e62fe6fc63496120dfde912dea12df7298468973b0b52e16d43
9bfe2c6a39ff3465b789e5c8ef5ad8a5da458a19fc36fa7cac3ba2ce2d8a86f4c1d90a0072149968
faee3fb2cb8c5e8c3f5cb0850f2847aed8f4f1705e4053a24a67efecb3d6b806ad7b5c94bf422e84
2ca8121f7ee44af907bf4dbcf1351ca9aef0ea394d3c4f4a3e80832a664100d45e14d9f8a95fb6db
efa0d6a56be846e4c44ef7d5e13795018b739ba9bed2a9ed9b48df61c16a8c4ca8c4e9b55e08868b
28eb94f1cbf27078fbf650fb49e84ab20074b92a76bbbe2f21f50aadbc13d1834612a53bdf6d8234
f11287f32810f976ddfec81765a3260b6165509673e35b3a2143a422e270262eb405c93d864d06b5
7a0a67030c8d9c6ff9824837a3c9db7f384c9c8162de6f1714d3cadb03c475c6c9a987441a0f84bd
e7518a65b72dc19b345284e1cb8e897459f086e9cfd88db4bb885c49b4b268a2ad4656bf7ee92e60
16f56238c86251d3254c605766821ba548100cdc18bc96a44a4bb395ffc557a19a08d40404b088b3
a37b5895e8352c0308938816685a17c30624a362fcc77da5d5fcef30e5ec18c45c47829e61db942b
e35543a8c0ecee8eb9543c39cfbf2c1d94ab39424f4e1021734a1f8f555bb5187f5f98c170886e9f
099d6089c6af9b6878620d68504e4fc1666e929270aa61b1c78b8e053d35835fcd889c5091b8935f
4c3356d7304d4d1c1932132cad5bdba205e4b375c38624a94464106756b211d9326e56146840119b
31d6d6af72f2f58b2feaa2cbeeebeb5a0fef57bb07e321c14fe286a7bdcdbd0f00c7d80d78da3067
6d1bb826e20ebe25bcf563205797185b527bf261c422b7cc1d831e4e2f29b2f1443768dea878146f
a58c7395f489e61086a7c5019e9d68658d9b35f9c5272691ab6f4529ad09ad9df39ecd710ecaa7e0
4ecdc8ada9dd225d9efa906a3d63a7033a4bbfec584e2cf1eccefbb0f52bfe93a04e2a26d2a506e4
e9d64c94fb0116563b2bd0162b130113f021ba825adc00015cdad5440d87ab50a1a0516589c2efbc
dde158b5e16b8c1a4b8e6ad1dce57ea230a1d501d0457d592238963c69c36eefa530bf548ffde2ed
a239469a47d36877dc894fcd8e1a219d732b27c63dc7a9f631a913be360dd39ddde7a7b8701572df
d8d5a890462bfac29acb42d8f76a969f015f52feb6f268040419a63827083fcf2217e4d498cc077e
bb84265a9c0ee74abda4d0ef74418949b5c8986614f0b67ce77fb935f3f01a85c6cb33b24015396c
c6fde376b8d7cf50e31660a12282768cade4872698c6a69c3f8b831b6addf8b03a872125af1f82d6
60420578954bc40b4762bf877cd6c8f096dd778865bae2ad5d3d7141e9cbd1d516e08b4a1bb1e768
598be58cb0a3176fb6bff4ea6c12237c00a5157a19f0892c234f0bde427d504112fbc465097f4492
e60fd61b2539dffd6a05a003e45cd2630ceafe214eeb809db363b6bf52a69edbaf43055a6ae43658
23690bdd05a5b7fd3f3ed3c981d5198408bbd2d61744dc0113e90ef0791ecfa7b1e8e34108d2ff66
2f27cf637ea51044ef786b8dfc19c8dc24993f02629e3a1e103f0e117e1bd0d7e9cfebd39dfe8f3e
3e157120ff111d3f3940d204d9b76fd6f08d7a936f91722d32a4eef837fecc69b9efb0d616fce2c3
72cee13b9fe5b165e523bb158fc96edf254980db913405173cb772c56a8e088242fba84dbc352925
1d342345f1867a203cbe5318f75df6cef950c0a2c12f22ee67621f8cbcd336bc485db61079fcb162
a99ca654da0a4d61b5fd740d8ea57903694aa6c8c0ce5fef025c6cbb60aa235209e308b7dd404bf3
3758f6fd5fd032328f7133b1ad85b68fb2989d8b8c1a49bc6f5526c76e1257a7c82b2a7c2c3f8bb3
ec68a0b631ffed375b4e6d7aa3bdf823ba9d049084fd9977e5a46402bd8f92ea9cfc9a19e3a6d165
9ec0d7695adf5c9708898667d7a41f90e75a159f64536cec3c0f2c183677ed2e6e8dac17ae4c5b5b
6ded923d7a5606785f064af5589ae32ad3e8918b599c55f9eb0a50b8f1950552d7634743b8e8a9cd
145f5da87275e213d5615289c5307855e924af8de2194ab82c6056454810b4bbb538d49f47604c9d
fc2a4b5c7a994980bd8d30d9b9d2ce97f428b4f30d40000fa1952798d8d35755a57a1f4d89017553
aff6bc147e333ce4c20312f5e28fee783e2782c8f03a52c51b5670b106652b65b88b61e94d2af586
d99f137e7eb486dbb1167fe26cdfca42eb0357562b4a7f56432925faa3488627a3950733ab7e8aa1
f1c117c59a75bda0418ea0d9a61d0fd56fc326e9212c78ed8e9972bb94ed5e1b16270f6bba6d4763
891a77570f064165994234a6432265dfa3ea50766b92ba3ea86d29e366a377f9a0fed00cc5b92f0e
20fffc24e020cdb9a9f0f9d7c88a117261a86e7059e422a6dcdb4ce0b6a35c780c42dd9f0d014d7a
f00f08bb5b359ca0752a3b1677349704ee8465b5d9b088712739c9c594f564b4192c374434d4f797
759cc670b39a64a7e83de6e18fada8a09d1745d8bf2a3648633402f6081f72bf0ae4406f1cfd54fe
3fc06276da4c5a8edf1f38dd2ebbe4a60a99a80b31327f1524d112bcca196b513fed2bb0e783a82a
ae0be8e06b313b2c851c3e00b646d094a654228d2da3e09431b0a731d561d4804c2a43e042d5c26a
10c3f3ccd3a30366be961329357a89ce846c599253e934f1ddb4b2f77b52d94a35d2cdc9927d60e6
9fe496f30c34572eb037fa9d0000fbafafaa5996ba69e96a208b7b31519319c220fb6861388dcde3
7cd036372487e64b16b1662987171a3c0bd01e65e3b673127a92b1826d4307788a4602f0ea5f1b
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
 HBW_to_Column <Virtual>  0
 HBW_to_Row <Virtual>  0
 jmp <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 MC200 C710 11 0x0 MC220 C730 1"

// Rung VGR_Copy_State_F#3
// Offset 18
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#4
// Offset 35
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#5
// Offset 39
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#6
// Offset 42
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#9
// Offset 66
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#10
// Offset 83
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#11
// Offset 87
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#12
// Offset 90
NOP

// Rung VGR_Copy_State_F#13
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#14
// Offset 93
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#15
// Offset 95
NOP

// Rung VGR_Copy_State_F#16
// Offset 96
RET

// Rung VGR_Copy_State_F#17
// Offset 97
NOP

// Rung VGR_Copy_State_F#18
// Offset 98
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#19
// Offset 143
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#20
// Offset 176
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#21
// Offset 183
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC501 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1 0x0 MC450 C843 1"

// Rung MPO_Copy_State#2
// Offset 65
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 126
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 135
STR C2000
COPY 0x1 "4 0x0 MC450 C700 1"

// Rung MPO_Copy_State#5
// Offset 142
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3005 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC10 C4 27 0x0 X6 MI7 4 0x0 MHR5 N300 1 0x0 MC1 C301 3"

// Rung HBW_Copy_State_F#2
// Offset 16
#BEGIN FMT_COMMENT 
"Factory 4.0 read/write"
#END

STR ST1
COPY 0x1 "4 0x0 MC1 C301 5 0x0 MHR1 N1 4"

// Rung HBW_Copy_State_F#3
// Offset 27
STR ST1
COPY 0x1 "4 0x0 0 MC1 5"

// Rung HBW_Copy_State_F#4
// Offset 34
STR C28
OUT Y39

// Rung HBW_Copy_State_F#5
// Offset 36
STR C29
OUT Y40

// Rung HBW_Copy_State_F#6
// Offset 38
STR C30
OUT Y41

// Rung HBW_Copy_State_F#7
// Offset 40
RET

// Rung HBW_Copy_State_F#8
// Offset 41
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#9
// Offset 94
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#10
// Offset 135
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#11
// Offset 142
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
STR ST1
RST C210

// Rung HBW_lift_seq#2
// Offset 2
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#3
// Offset 4
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#4
// Offset 7
STR X10
OUT C200

// Rung HBW_lift_seq#5
// Offset 9
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#6
// Offset 18
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#7
// Offset 24
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#8
// Offset 27
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#9
// Offset 30
STR X11
AND C201
OUT C210
RST C200
RST C201

// Rung HBW_lift_seq#10
// Offset 35
NOP

// Rung HBW_lift_seq#11
// Offset 36
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 65 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_PWM_On#6
// Offset 62
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_PWM_On#7
// Offset 64
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 10 0x0 0 C200 15 0x0 0 N200 10"

// Rung HBW_Reset_Flags#2
// Offset 12
NOP

// Rung HBW_Reset_Flags#3
// Offset 13
NOP

// Rung HBW_Reset_Flags#4
// Offset 14
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
ANDN C602
OUT Y26

// Rung VGR_dropoff#7
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
ANDN C602
OUT Y27

// Rung VGR_dropoff#8
// Offset 39
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 48
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
ANDN C603
OUT Y25

// Rung VGR_dropoff#10
// Offset 57
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 66
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 78
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 81
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 84
NOP

// Rung VGR_dropoff#15
// Offset 85
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block HBW_to_Column
$LGCMOD HBW_to_Column

// Rung HBW_to_Column#1
// Offset 0
STR ST1
RST C210

// Rung HBW_to_Column#2
// Offset 2
STR ST1
MATH N201 "N200 + 50"

// Rung HBW_to_Column#3
// Offset 11
STRN C210
ANDLE N201 $HBW_Encoder_X.Acc
OUT Y51

// Rung HBW_to_Column#4
// Offset 17
STRN C210
ANDGE N200 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_to_Column#5
// Offset 23
STRLE N200 $HBW_Encoder_X.Acc
ANDGE N201 $HBW_Encoder_X.Acc
SET C210

// Rung HBW_to_Column#6
// Offset 32
NOP

// Rung HBW_to_Column#7
// Offset 33
RET

// End of Code Block HBW_to_Column
$LGCEND HBW_to_Column

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
ANDN C602
OUT Y26

// Rung VGR_pickup#7
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
ANDN C602
OUT Y27

// Rung VGR_pickup#8
// Offset 39
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 48
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
ANDN C603
OUT Y25

// Rung VGR_pickup#10
// Offset 57
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 66
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 78
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 81
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 84
NOP

// Rung VGR_pickup#15
// Offset 85
NOP

// Rung VGR_pickup#16
// Offset 86
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
ANDN C602
ANDN C605
ANDN C600
SET C601

// Rung VGR_SLD_pickup#10
// Offset 76
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 79
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 83
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 89
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 95
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 105
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
ANDN C604
ANDN C605
ANDN C600
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 114
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 122
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 134
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 138
STR C605
AND X26
SET C600
RST C605

// Rung VGR_SLD_pickup#20
// Offset 142
NOP

// Rung VGR_SLD_pickup#21
// Offset 143
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block HBW_to_Row
$LGCMOD HBW_to_Row

// Rung HBW_to_Row#1
// Offset 0
STR ST1
RST C210

// Rung HBW_to_Row#2
// Offset 2
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Row#3
// Offset 11
STRGE $HBW_Encoder_Z.Acc N201
ANDN C210
OUT Y5

// Rung HBW_to_Row#4
// Offset 17
STRLE $HBW_Encoder_Z.Acc N200
ANDN C210
OUT Y4

// Rung HBW_to_Row#5
// Offset 23
STRGE $HBW_Encoder_Z.Acc N200
ANDLE $HBW_Encoder_Z.Acc N201
SET C210

// Rung HBW_to_Row#6
// Offset 32
RET

// End of Code Block HBW_to_Row
$LGCEND HBW_to_Row

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5350 N1005 1 0x0 5320 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 775
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 775
ANDLE $VGR_Encoder_X.Acc 805
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_HBW_deliver#15
// Offset 87
NOP

// Rung VGR_HBW_deliver#16
// Offset 88
NOP

// Rung VGR_HBW_deliver#17
// Offset 89
NOP

// Rung VGR_HBW_deliver#18
// Offset 90
NOP

// Rung VGR_HBW_deliver#19
// Offset 91
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 31
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung $tFirstScan#4
// Offset 39
STR ST1
INIT "3 MC100 MC100 1 MC502 MC502 1 MC808 MC808 1 MC300 MC300 1 MHR0 MHR399 0 N1 N799 0 MC201 MC220 0 MC450 MC450 0"

// Rung $tFirstScan#5
// Offset 61
STR ST1
COPY 0x1 "4 0x0 0 MC820 1"

// Rung $tFirstScan#6
// Offset 67
NOP

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR ST1
AND ST2
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#11
// Offset 63
#BEGIN FMT_COMMENT 
"Presumably the VGR is in a ready state if in the command "
"queue, so always set this to true for the Factory 4.0 layer."
#END

STR ST1
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_Program#12
// Offset 69
STR ST1
AND MC200
JMP VGR_Program.S99
COPY 0x1 "4 0x0 0 MC200 1 0x0 0 MC300 1"

// Rung VGR_Program#13
// Offset 78
STR C300
OR C711
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#14
// Offset 93
STR C717
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#15
// Offset 107
STR C31
OR C1701
OR C712
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#16
// Offset 123
STR C32
OR C1700
OR C713
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#17
// Offset 139
STR C33
OR C1702
OR C714
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#18
// Offset 155
STR C34
OR C719
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#19
// Offset 170
STR C35
OR C718
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#20
// Offset 185
STR C36
OR C715
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#21
// Offset 200
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#22
// Offset 209
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 218
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#24
// Offset 227
STR C716
JMP VGR_Program.S12
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#25
// Offset 241
STR C720
JMP VGR_Program.S13
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#26
// Offset 255
NOP

// Rung VGR_Program#27
// Offset 256
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#28
// Offset 258
STR C300
OR C711
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 775 N1007 1 805 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#29
// Offset 279
STR C500
AND C300
JMP VGR_Program.S1
RST C300

// Rung VGR_Program#30
// Offset 283
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C711
COPY 0x1 "4 0x0 0 MC201 1"

// Rung VGR_Program#31
// Offset 298
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#32
// Offset 300
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#33
// Offset 321
#BEGIN FMT_COMMENT 
"Non Factory 4.0 Mode"
#END

STRN C717
SET C700
SET C701

// Rung VGR_Program#34
// Offset 324
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C717
COPY 0x1 "4 0x0 0 MC207 1"
SET C701

// Rung VGR_Program#35
// Offset 340
SG VGR_Program.S2

// Rung VGR_Program#36
// Offset 342
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#37
// Offset 354
STRN C712
SET C718

// Rung VGR_Program#38
// Offset 356
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1701
RST C712
COPY 0x1 "4 0x0 0 MC202 1"

// Rung VGR_Program#39
// Offset 372
SG VGR_Program.S3

// Rung VGR_Program#40
// Offset 374
STR ST1
ANDN C500
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#41
// Offset 387
STRN C713
SET C718

// Rung VGR_Program#42
// Offset 389
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
RST C713
COPY 0x1 "4 0x0 0 MC203 1"

// Rung VGR_Program#43
// Offset 405
SG VGR_Program.S4

// Rung VGR_Program#44
// Offset 407
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#45
// Offset 419
STRN C714
SET C718

// Rung VGR_Program#46
// Offset 421
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
RST C714
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Program#47
// Offset 437
SG VGR_Program.S5

// Rung VGR_Program#48
// Offset 439
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#49
// Offset 449
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C719
COPY 0x1 "4 0x0 0 MC209 1"

// Rung VGR_Program#50
// Offset 464
SG VGR_Program.S6

// Rung VGR_Program#51
// Offset 466
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 300 N1007 1 330 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#52
// Offset 487
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#53
// Offset 493
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#54
// Offset 504
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C718
COPY 0x1 "4 0x0 0 MC208 1"

// Rung VGR_Program#55
// Offset 519
SG VGR_Program.S12

// Rung VGR_Program#56
// Offset 521
STRN C500
CALL VGR_pickup 0x1 DST511 "3 20 N1005 1 0 N1006 1 2200 N1007 1 2230 N1008 1 3475 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#57
// Offset 541
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C716
COPY 0x1 "4 0x0 0 MC206 1"

// Rung VGR_Program#58
// Offset 556
SG VGR_Program.S13

// Rung VGR_Program#59
// Offset 558
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 2200 N1007 1 2230 N1008 1 3500 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#60
// Offset 578
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C720
COPY 0x1 "4 0x0 0 MC210 1"

// Rung VGR_Program#61
// Offset 593
SG VGR_Program.S8

// Rung VGR_Program#62
// Offset 595
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 20 N1005 1 0 N1006 1 30 N1007 1 60 N1008 1 2900 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#63
// Offset 616
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#64
// Offset 622
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#65
// Offset 632
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36
RST C715
COPY 0x1 "4 0x0 0 MC205 1"

// Rung VGR_Program#66
// Offset 648
SG VGR_Program.S9

// Rung VGR_Program#67
// Offset 650
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#68
// Offset 670
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#69
// Offset 680
SG VGR_Program.S10

// Rung VGR_Program#70
// Offset 682
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#71
// Offset 702
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#72
// Offset 712
SG VGR_Program.S11

// Rung VGR_Program#73
// Offset 714
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#74
// Offset 726
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#75
// Offset 736
SG VGR_Program.S20

// Rung VGR_Program#76
// Offset 738
NOP

// Rung VGR_Program#77
// Offset 739
NOP

// Rung VGR_Program#78
// Offset 740
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#79
// Offset 750
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#80
// Offset 758
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#81
// Offset 783
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#82
// Offset 800
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#83
// Offset 804
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#84
// Offset 808
NOP

// Rung VGR_Program#85
// Offset 809
SG VGR_Program.S100

// Rung VGR_Program#86
// Offset 811
NOP

// Rung VGR_Program#87
// Offset 812
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STR C843
AND SLD_Program.S4
JMP MPO_Program.S4
RST C841
COPY 0x1 "4 0x0 1 MC820 1"

// Rung MPO_Program#11
// Offset 59
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 65
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 67
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 69
TMRDOWN T2 V1600
OUT Y16

// Rung MPO_Program#16
// Offset 72
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 74
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 76
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 80
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 84
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 86
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 88
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 104
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 106
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 108
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 125
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 128
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 130
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 134
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 137
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 139
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 155
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 158
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 160
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 164
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 168
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 170
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 172
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 174
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 177
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 180
STR T9.Done
DUPBOOL
AND ST1
RST C900
POPBOOL
DUPBOOL
AND C840
JMP MPO_Program.S6
POPBOOL
ANDN C840
JMP MPO_Program.S9

// Rung MPO_Program#42
// Offset 191
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 193
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 195
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#45
// Offset 199
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 201
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 203
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 205
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 209
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 211
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 213
OUT Y47

// Rung MPO_Program#52
// Offset 214
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 216
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21500
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 22000
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0
COPY 0x1 "4 0x0 0 MC450 1 0x0 1 MC808 1 0x0 0 MC820 1"

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
STR ST1
EXIT

// Rung SSC_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"SSC Program"
#END

SG SSC_Program.S1

// Rung SSC_Program#3
// Offset 4
STRN X41
OUT Y37

// Rung SSC_Program#4
// Offset 6
STRN X40
OUT Y36

// Rung SSC_Program#5
// Offset 8
STR X41
AND X40
JMP SSC_Program.S2
COPY 0x1 "4 0x0 0 V2401 1 0x0 0 V2402 1 0x0 6500 V2403 1 0x0 700 V2404 1"

// Rung SSC_Program#6
// Offset 23
SG SSC_Program.S2

// Rung SSC_Program#7
// Offset 25
STR X44
STR ST2
CNT CT0 60000

// Rung SSC_Program#8
// Offset 29
STR X45
STR ST2
CNT CT1 60000

// Rung SSC_Program#9
// Offset 33
STR ST1
MATH V2401 "CT0.Acc + CT1.Acc"

// Rung SSC_Program#10
// Offset 42
STR X46
STR ST2
CNT CT2 60000

// Rung SSC_Program#11
// Offset 46
STR X47
STR ST2
CNT CT3 60000

// Rung SSC_Program#12
// Offset 50
STR ST1
MATH V2402 "CT2.Acc + CT3.Acc"

// Rung SSC_Program#13
// Offset 59
NOP

// Rung SSC_Program#14
// Offset 60
STRLE V2401 V2403
OUT Y37

// Rung SSC_Program#15
// Offset 65
STRLE V2402 V2404
OUT Y35

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR C10
EXIT

// Rung HBW_Program#3
// Offset 10
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#4
// Offset 18
NOP

// Rung HBW_Program#5
// Offset 19
NOP

// Rung HBW_Program#6
// Offset 20
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#7
// Offset 22
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#8
// Offset 25
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 27
STR X11
SET C110

// Rung HBW_Program#10
// Offset 29
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 32
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 35
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 38
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 41
STR X0
AND X3
JMP HBW_Program.S97
RST C303

// Rung HBW_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Presumably HBW is in a ready status if its in this job queue"
#END

STR ST1
COPY 0x1 "4 0x0 1 MC100 1"

// Rung HBW_Program#17
// Offset 53
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C301
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#18
// Offset 72
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#19
// Offset 89
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 N1 1 0x0 0 N2 1 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#20
// Offset 114
STRN X2
AND C302
JMP HBW_Program.S5
COPY 0x1 "4 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#21
// Offset 129
STRN X2
AND C303
JMP HBW_Program.S99
COPY 0x1 "4 0x0 0 MC3 1 0x0 0 MC100 1"
RST C303

// Rung HBW_Program#22
// Offset 139
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C304
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#23
// Offset 158
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#24
// Offset 175
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR3 0
ANDNE MHR4 0
AND C304
MATH N300 "(MHR3 * 10) + MHR4"

// Rung HBW_Program#25
// Offset 194
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N103 1 N204 N104 1"

// Rung HBW_Program#26
// Offset 211
STR C304
JMP HBW_Program.S10
COPY 0x1 "4 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#27
// Offset 229
STR ST1
AND C305
JMP HBW_Program.S100

// Rung HBW_Program#28
// Offset 232
SG HBW_Program.S0

// Rung HBW_Program#29
// Offset 234
STRN C100
AND ST2
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#30
// Offset 247
STRGE N101 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_Program#31
// Offset 252
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#32
// Offset 257
STR C100
JMP HBW_Program.S1
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#33
// Offset 266
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#34
// Offset 268
STRN C100
AND ST2
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#35
// Offset 281
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#36
// Offset 286
STRGE $HBW_Encoder_Z.Acc N102
SET C100

// Rung HBW_Program#37
// Offset 291
STR C100
JMP HBW_Program.S2
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#38
// Offset 300
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#39
// Offset 302
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C210 C102 1"

// Rung HBW_Program#40
// Offset 315
STR X11
AND C102
JMP HBW_Program.S3
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#41
// Offset 325
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#42
// Offset 327
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#43
// Offset 338
STR C103
JMP HBW_Program.S4
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#44
// Offset 347
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#45
// Offset 349
STR X2
STRN X2
ANDN T14.Done
ORSTR
OUT Y48

// Rung HBW_Program#46
// Offset 354
STRN X2
TMR T14 100

// Rung HBW_Program#47
// Offset 357
#BEGIN FMT_COMMENT 
"Non factory 4.0 workflow"
#END

STRN C301
AND T14.Done
AND ST2
SET C300

// Rung HBW_Program#48
// Offset 361
NOP

// Rung HBW_Program#49
// Offset 362
STR T14.Done
RST C301
COPY 0x1 "4 0x0 0 MC1 1 0x0 1 MC100 1"
JMP HBW_Program.S97

// Rung HBW_Program#50
// Offset 371
SG HBW_Program.S10

// Rung HBW_Program#51
// Offset 373
STRN C100
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#52
// Offset 385
STR C100
JMP HBW_Program.S11
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#53
// Offset 394
SG HBW_Program.S11

// Rung HBW_Program#54
// Offset 396
STRN C100
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#55
// Offset 408
STR C100
JMP HBW_Program.S12
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#56
// Offset 417
SG HBW_Program.S12

// Rung HBW_Program#57
// Offset 419
STRN C100
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C210 C100 1"

// Rung HBW_Program#58
// Offset 431
STR C100
JMP HBW_Program.S13
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#59
// Offset 440
SG HBW_Program.S13

// Rung HBW_Program#60
// Offset 442
STRN C100
CALL HBW_to_Column 0x1 DST511 "3 N103 N200 1" "3 C210 C100 1"

// Rung HBW_Program#61
// Offset 454
STR C100
JMP HBW_Program.S14
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#62
// Offset 463
SG HBW_Program.S14

// Rung HBW_Program#63
// Offset 465
STR ST1
MATH N105 "N104 - 400"

// Rung HBW_Program#64
// Offset 474
STRN C100
CALL HBW_to_Row 0x1 DST511 "3 N105 N200 1" "3 C210 C100 1"

// Rung HBW_Program#65
// Offset 486
STR C100
JMP HBW_Program.S15
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#66
// Offset 495
SG HBW_Program.S15

// Rung HBW_Program#67
// Offset 497
STRN C100
CALL HBW_Unload_Rack 0x1 DST511 "3 N105 N202 1" "3 C202 C100 1"

// Rung HBW_Program#68
// Offset 509
STR C100
JMP HBW_Program.S97
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC4 1 0x0 0 C100 6 0x0 1 MC100 1"
RST C304
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#69
// Offset 529
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#70
// Offset 531
STR X1
ANDN C300
STR X1
AND C302
ORSTR
OUT Y49

// Rung HBW_Program#71
// Offset 537
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#72
// Offset 539
NOP

// Rung HBW_Program#73
// Offset 540
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#74
// Offset 542
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#75
// Offset 553
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#76
// Offset 556
NOP

// Rung HBW_Program#77
// Offset 557
NOP

// Rung HBW_Program#78
// Offset 558
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#79
// Offset 560
STRN C100
OUT Y50

// Rung HBW_Program#80
// Offset 562
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#81
// Offset 567
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#82
// Offset 569
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#83
// Offset 571
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 573
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#85
// Offset 590
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#86
// Offset 595
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#87
// Offset 600
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#88
// Offset 609
SG HBW_Program.S9

// Rung HBW_Program#89
// Offset 611
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#90
// Offset 623
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC2 1"
RST C302

// Rung HBW_Program#91
// Offset 635
SG HBW_Program.S100

// Rung HBW_Program#92
// Offset 637
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#93
// Offset 640
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#94
// Offset 643
SG HBW_Program.S101

// Rung HBW_Program#95
// Offset 645
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#96
// Offset 662
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#97
// Offset 665
SG HBW_Program.S102

// Rung HBW_Program#98
// Offset 667
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#99
// Offset 684
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#100
// Offset 687
SG HBW_Program.S103

// Rung HBW_Program#101
// Offset 689
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#102
// Offset 706
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#103
// Offset 708
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#104
// Offset 713
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#105
// Offset 716
SG HBW_Program.S104

// Rung HBW_Program#106
// Offset 718
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#107
// Offset 735
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#108
// Offset 738
SG HBW_Program.S105

// Rung HBW_Program#109
// Offset 740
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#110
// Offset 757
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#111
// Offset 759
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#112
// Offset 764
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#113
// Offset 767
SG HBW_Program.S106

// Rung HBW_Program#114
// Offset 769
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#115
// Offset 785
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#116
// Offset 788
SG HBW_Program.S107

// Rung HBW_Program#117
// Offset 790
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#118
// Offset 806
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#119
// Offset 809
NOP

// Rung HBW_Program#120
// Offset 810
SG HBW_Program.S98

// Rung HBW_Program#121
// Offset 812
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C9","rst","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C301","","","Factory 4.0 Pallet HBW to Conveyor"
"C302","","","Factory 4.0 Pallet Conveyor to HBW"
"C303","","","Factory 4.0 Home Position"
"C304","","","Factory 4.0 Sort Pallet"
"C305","","","Factory 4.0 Manual Mode"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C704","copy","","Deliver Puck Train Depot"
"C710","","","VGR Home Position"
"C711","","","VGR Pickup puck HBW"
"C712","","","VGR pickup puck SLD white"
"C713","","","VGR pickup puck SLD red"
"C714","","","VGR pickup puck SLD blue"
"C715","","","VGR pickup puck Loading Bay"
"C716","","","VGR pickup puck Train"
"C717","","","VGR deliver puck MPO"
"C718","","","VGR deliver puck Loading Bay"
"C719","","","VGR deliver puck HBW"
"C720","","","VGR deliver puck Train"
"C721","","","VGR Manual Control"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"D0","True","",""
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"HBW_Program.S0","","","HBW Pallet HBW to Conveyor"
"HBW_Program.S1","","","Go to HBW row"
"HBW_Program.S5","","","HBW Pallet Conveyor to HBW"
"HBW_Program.S7","","","Unload sequence go to column"
"HBW_Program.S10","","","HBW Sort Pallet"
"HBW_Program.S15","","","HBW last stage in sort"
"HBW_Program.S97","","","HBW Job Queue"
"HBW_Program.S99","","","HBW Home Position"
"HBW_Program.S100","","","HBW Manual Mode"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S12","","","Pickup puck from Train"
"VGR_Program.S13","","","Deliver puck to Train"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"SSC_Program.S0","Reset_SSC","",""
"SSC_Program.S1","Init_SSC","",""
"SSC_Program.S2","Calc_Pos","",""
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

