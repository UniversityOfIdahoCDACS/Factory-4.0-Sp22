// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Sp22-Python_integration_wip.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
2a0c7567b1fd13189d0eac31951e74fe75e60a3478aa297682eb5d6994a3e737bce9816519bf6319
5a56c1ee0975979d4de12e6e6a7f16656c7c06d6006d44d2684752105fd0aa5a067ec389d5cba6dd
940c6a4aef78043bd65cca778b6ea4fac41902992d2842c8cada4181404b751f79073f9c85659771
2fdc81269696c1a860e7d4942ba508e5c8796d8873af77c12045c173d3dd29f49e643df2f41a8208
07534a3816d591efae17a95ca7d5431936a19339d04490510ac40995d3e6e4c902dd4d3911e81f19
68e727e0f48ff4e5855746f1d8ee351a37d886e5f90d66925aaa9ce5d4ff455fce2730f6893e1cab
9e20e77a4d424525335ddda7904a4410ff5d843a321b0971e10ea573eef5ca3955ac7409ba2ef70e
99fcac7dcddfde6c1140771dc01bbf1a4db73dfe43c9d07361208e7ba60839b55580f75cb1460283
703ef7c9abf0e18933533e1ac3e9d125b9f71153a0591f524f75d9e37c3d8e6851ae6bab521cd904
eaf74c2942fb128f03f38c13f571a2b784b1043249bb748a75635c1e2f39b3c16c4a4dfce2d950c3
fb06d4048df9c3421e1cdd712465c79c0b665d246adbcd8ffc27fb7a0b5011ece79dd2244bd879ec
c89ebbfb3ce6831b43566b2fd74bfadc7f83fef09c56cbe473726b49ec3ebdc33ce0b06be378399f
4124c70191a5ea80cee9afe8e3ff9ffed08f404839d945ef60bea4cfa7e970cc3c367f5a15013e05
46b606da284567ac98c85e28d540bb1889a07fdebdac13fcca76f3570e5ed0d185c60acb4532c847
0309943a8936b6b031f3b9856d8166dbffeb93039160af884d9aeae761c244042d664e69dc1c67ae
367692f7a0e844712d58ca0c0946f99e0d608ca7d2595000974f169e0c86e3d0650eafa94f3f2c45
a029b6015af48dc10921b726e15fc4b6ef416ad2ceb0cfdbcefa1761bcb04ff42fff0e902ff64cc5
e11316a74efa87d7131f6588e10d959d7b2fa4462d7f48999907dbf2a554ff022b355376d5823155
f61673f5ddfa7da3e525f81577bcc47ab4ed078b4a51fa9c7b85183df22869834846961c24bcf97d
ad8c0e152993f6731b33280611d5ba6f639497645dd2684f05e05906299ce7722acdcbb9d6ab5a49
300aadbddcd44100d714ed074c9a7762fee4091164f2df19eaa75fa0fab34b79420a1955e653a20b
dfc5231b9d56d3c347d4a87c836eb31127398b829388b56e525a49d2a353fe12b80a861e5e32a0aa
10e49d6733c49a11be986aeee4d3388f0a3ce73c016da2c39e0f83f22f76ab0c153b9d1ece157080
3e9e145634f4b8b40c26781fe56a5b5afaa6c54278b83ea4056a0fe712a19e9354bbc8109b35c4fa
c9d8ad549be5f292d1eeca3b4ef76f271f2a82fe2c2b4132a8489c1cbd1a86aa72b3368fbb044dc6
dfb756895544c3e0984cd299c369619c982995f6115310924783cb86183c070528851817e14d1a7a
419155ffd3e79b567f7f9da639f2792a5e4149ca94e2662c15ad4fcbaf6c161467decf8742d3b5b6
5430b802f4db4459e7e022b71161bf713d5f6f1be50961d646a390c732dd9f1e0b057fd2c65c99aa
5ee24474b9e8884361078ddf815407301d574c3ce9ccaba26d6b8610727a2bbd8ec27ff28f06c22d
598a5c2963c0d6f7339fce05c59a45d70fe6b69c5e9638ab19bfa5ec0669492db004cb4ccdd559c4
169afa4805011b37dbc7ba68f75a4365176b12937ff8c1df585e2fb9d1446da2eeba93d9d9f929c8
756ba87de285282dedf92c4a6bb12290b494be79f294a1d5dc762e0ffd39be8ae13ace5fab50103c
b22e59b3a086eec064f7d4c638e03311b17082134d5a7add1ff2e1c7afde7ae9cad826fe4d9367bf
78ed12e6e1f4d8fe1000d2d778fe2f230fbf870ee9d32fa91543a6e69d7bc9d212e43ca745ea3543
2eb3be76a4729d4bf63c7342b6a8998faef6ff46dbad12c268de0480d084f61712fd230f098f5542
b889a8fc511aa922a723524d06670e9a68322c66dce7d9fa0b6610afbf5f28e4ab32196fda54b4ea
01ae7de3cc8cf57fcf3f1ab50e2d6d4aa6b1d4ba32788f622ebdfe9b1f4667067e67bb93b2a4b12a
a7f55366d6207644ec7c7ca1a6fce72bd677e3e189cce9f84c128b878de9c6db8a37ba3f56e97f4b
efffca73d1f63fefb9e3ad602a2a8efacbcdd4b6f504fcdc89fc11d5720a761faab5d627d9099f5b
cba9aa5b533cecdd134784a9d5bc319afc13a61e728675f74fc109588e993e8bdb11aa0211024380
3edeb59b8d4b0ea151fd6dd96109e516d42177b03ceb71bacde3c14484c8f855993ed469f2f95a82
65d5a2ace06291f60519571b4744f4a400d91a7b692567341fce7e4b046812b72e7171d0c88806d0
b15561887135bfb6d9e56d26d250d9dd0d2a9c0b2dc95d278f2453df4ad497a187e682a32732a660
fcceafec662d8a1b55aee64ac65e5f659d3892a3b29ea992f14bd676b1d691b4b61410382e6915c6
cc35b1a2cb6c6b615f5f0a0d987c78752b73413bb8d47757f1fd550e195dbf2a335d96fb2fb5990e
f7edb0352519199c84aa84f5b955c635cd39cc398a8daa211e28a43a7b65034e52c68d8ce5e3d1dc
6f2912fc2c8ae5eb2a0745e2f6c53171f7df2da5d34241f74caa5eb20dafb315179282f49b7d4fac
195f31fafb77c48eff11a5a1aa3e24cf30f2c32600aa55dc894e883c11a0c711f99705401e3851cd
8f132341b3419e344dbe2bad17d72fbb35f19dbc84f5f5323376c9b594a41aa567dcbd0199d19830
9a67fa6e1720f30e6b61d3057d462e81e143183b05892e52a58f7bc43726c3093961e45b34b0961c
349a84a462bfe335b897be19069f960725aa8fd504904840ac530e0e857d7b7f4e247d7eff5f30ac
f7825382ba900281a7b2d18bc88e95eb4ceb79580c392566b8856e6528fea1cebd98dbfbaca83196
bffbca2b3df148fad4fcfd91e539515c027634f71e5c8b43b11baa786563915f958ef0a194cd9781
01736ebedbdc4c9352ebbecd861fa2b3bd9e99ef76916f440c44d8af47053a2b80e2920389a89d39
0c356332bf3ea4c6c9cf5228e786bbd4f4d052d743ee47445981d5653ef2b59e7f676439dd69c5a1
0faac7a39520a75a18eb3cd65ad90deb73f3ccd51cbe6490ce370679f625986ced681d09ee3d5a7b
165a7d5152ed4d299f61b81c29b40594ef3007247eb646b50d886de2a0bcfd4b53149ff87b2783c7
adb5a95dbea0effbdc84ef41122d459c878aea27e31bcabadba99180e5427ea1a0c38cb5fddbc262
5fdd1d2d533bc7721b27002c2f903025a0d3a18fb14b2c0cffe670a52afdb599aa30432242b63d16
de65eec719f494a6ccd4c8cc10cc53a2489dcde4297d5d4f80a874122c48773a9f5d577e7ebb6de7
319b51c095f86528809c3c7ec3d3cde37ee8a80dbe54662aec739159efbc4321cb35ec8905bda7f1
6e044ff7a894e4b1d9616a97a4e74a4aca7d09e05d4e458ae2b547b642a85fd2cc9fe001e760c14f
c3fbe3b5cb70038cff7dc59e6bb87b8a99b46f5d71b6292ab3361323cb9cf9c7a1830fbe66cfe6fb
e3b77685cc4e6eda94130a537ae8d7edcac19f428ea02e979b95f4dea19f78d31874323bf7d89ffa
c1d1e0fed02c5aabd6e5c0436012ea3abe95c253f3b4869e32ae9909a9220c225fcb8bcfdde7ae27
694b320134a8505db3ac24f2c8310b53ee0e1e1a2c422f17f939afefab4972d6ec9c0bc0c6efebda
c46a943ed6f8acfacd9ecd34e46093413bf524d3cdd5d1dfe0e37f4e1a4cf1d246e20d167a9d5152
7c5f177b0f4085aea5c73f847a6121279764a534346ded659a0c4da9751ea813ef375f5ef7f1d714
d32b2ea0aca1db049da420aae4c6bfa0954784135f16a8ffbe4199f1f0587e6337f60542405befa1
26cb32ce5f776de0c791cfe989637ca4f3a269c49acc6563d6bcc8095660ece09a45843d1247dd26
8384d93b78eba6ef2d3bf19674879d377c04ba178ac4f2f1450b8cb5ecbd63c136aca7594a7b65cb
2d87604e1a4c1b48ab1f521b6533f20fd7bfbe12542c923fa2c9970fe8373a7bd4cb37468285f89c
cf284ba1bec61067ca8dbfa7079be373d35838b6a2063341142b350eba4cff987de15bf82cccd1f1
ae84fbc5725b664d6c9bdf978f8c847af1475163b3a1cfe7c386db609bbaf7eda0ce360cf765fac7
d242a470f03f22967bd3958fbb0cc0ef9c4ab3b647f332c507cd3056ac2201a263d2d1c0a6ad8635
fe58fd3a83ece57f06e460e4dc7fa98afe3f29836830b8e8a212413182d27f98f30351ac1fd600aa
79f44e86f36ea758683c3c6c87e9d7569632816b59d98d6800ea76850140dff80e4a033b26efcf2d
7af3f2060c0289aefca2147306475687bd122961dc73b3017102a2dfb0466794a78a9f0d28db0f87
1b86a52b5fb5abd306318db6fe439b8b8d528eab7dced7923fbc540b6e50363f102f11f65fd475e7
67ecf2dc49de011b200329f427b8ba23a7c262d3de97e9be8f330840fdc979127cd71576a24eaae3
75e316ccfd06fc2a1e7ab82682e3a589bd2e2fdd74df4e2b4c2121ae92167768c29cf089d2f516bf
65cb2df26b3a1603d4d6a76c034d03594fb307f8920dcb566e78ee2f188b49f680a79acb32cf55af
a85bfbe252d5895614082f28700b02873fcd417cea830133ccfcb4f34b733ed3c38a740c214b973d
8730270824f95fea8609a528316ae703a8ae8ce762e92bbeed998c706237777cab04cd0562a48acb
b8fe2fbe28d6a38127246cd6400e3b89b5dc63c9fc2832881af6edb163fbb02868ba31b20aff361c
5f9cc5ff826fb7e0c064a55ba5f36e0d8d0eb64352d57271e03da35c8d1d08796a15b107e50ea62f
f8ae748263f21e90b457c76dcda0293ea8112a0c313380b1319f7d0df2f1497162859929c0634f1f
8a2af5852c23540e746a41b4ab965ea307aaf1607bcc2da5556dda7c68ad1238416175a315be6e2b
6a70d1180d39711a22db08e3d794491313b0d4d2603fd7d33763da35fa071a181881d9978103c5a7
04024330dd1cca53bffbaaaf916b58a3cc09edfe883e2cda2f45b828e27f15d2cac82b8ca33422a7
6ca3a4c69a4f3f678a45d2ff777a19d52766f180dc5cee84189ca0990fe53f4de7fa23d9dfa0c399
428753befbe91f750bde95f805d4941205e0004d5553a7d1c43d918ec8fd2602f9096be0df3d9703
db8b708798996ddd3ce224a7f0f327be65d248f15bccc204541c2752c3ac0f2371e90988c01d6785
278c40267fd2d5eb6f34bd8270765bcae0195b28b252e6c1e4e2758bc0f11db10f8aae502effcc75
e70f51fc919aa50b0c57ac3d8ea5286cbf904dd50d7414f7e90bd7dbea7bef81bcd66e52518ed7fa
bdc40cf425b9716e02234f112e1a4ec35a194805b43a1fc9b2f61fce516954325858d3a495d8dde5
4cc9923e9adff78742b66722ed231b00c613dfeb18f76422ba0fcd5f5716fe823d63810814c3b41f
297853266e5939901eaea3f03ab5299d2276a3259f5c3d8fd92e3fb2f75a3117c2a4d398b8c85fa7
5d46483c10770e60800092f9e9e38fa6c998600b4d9b6d1ed17012c6994ae4893b5f991ebb3e68cb
e5b0f619026068fc1ae4add38a8823e203e0b5aad6c275668be330ea81d5e4b0230f58344db14e38
deb694771e82031ea1ceca1da7d9d36580404d2eed19598f85a7bd9bfad1b625ee8a8c166908221f
4ee410c06054ab0e84e8aa6bf7c7bf747833bcb85afda6f3ef19ad46226761f4f0aaa7826bb92959
4eb26e663662cfd266b242b0fc48c98ab0d3eb4017ad638875b94244b0ecb6fdaada8c01286ab83f
905745eb395664040abb866484abff14a1cca27d9a7bc0abb573669250c3c811bc9619f1ea09cf4f
78d18aeec1ef7247ad88df9773c2e78a1f29ea8d66d4102d92829e5304365d0cd9bd03e459cf67be
4679a0dc0c93ad6eb24fa0fbb9a3a40c8864cf956a534ad5e58c57e283b5223c15bff0cccc2bedc5
82974dad1b15b35856646ae7fa14db5def9c7a077680f3760d779d9eba52ab274110ac971c876a32
ffdafb912147fa3a58d4703ab2a6b7d27313e570eea1807c83f267a3236a732317a8365b2f3dba7b
0b80e6d58898e91efd788abe3c3d86ae53441beb7fa092e9e227cdf485faec6d939277ef5e4004c1
612d280e8f477bcf8e26a0b9f52df6649b75171d3d85bef29a4a5e1316f5543f93fe92d385fc3ffd
431335b3f32560a8b97d741677384a41ebe01ecfe5ed70860f68c35b09936d0d6973b3fd0494b6a2
df17dfe1ac835bf54193eb46ba332bc5cd9857394d2732a652226ae667b99de3ceba10f8fdada756
9417d4cf0e47d08f758b830d2f2faf18775582d7d341f45b7bd5971d56147a98c779a808eb6f07c5
be4dadb938f067228d0f7022ac28dd4186ad9a29dd834d44f49f454df3440ee95639c416da2b683c
d5281b4714804d3f98ad52c2f048bbfd77b0516ca37e19a126693acbed502ce6729145bf66733b15
1cfccebd7663d6abb3fde14dd588b92ad3c948ee06d6958e7d6f13936b85de311ae7a5bf90059a67
e91c805233d694a08e6774089ef19ad4dabbe535f53b248eb5762812030499397f8b9f9d980a3970
c9ee14a3ec0f8411bc28f999942e3506c9ca8224f9e7514e21a222a6759f0e115e0b255c670bc6d0
eb42be93903793850d6f62a47f8c5b4c43b379a305addef3960a3c124f335ea406f4770e6dce1f31
897ab8ca0c078d89c69ea3d6dab78bd27de6cfa74fc72ddd29b9bfc41f810fb9add00ceb947501db
724cd813a0f9aee58ae3500db5cdb50a9227a5033e446263ea60a6cb9178401e5f7fac8dca2fe72a
a5998235033bc3f091bd34792009775e17101a44f9abf48578ba41bfae275693480230de36bf6393
28b0a9ff9ff47ca606607088950f4a0cf07d792c21d147c75a08b7ed03c10accdd2a5b480c2eebfe
4392d2cb35d9f61163c671df92bcbe7159bfc65dcadb861a8be281418434306535517b7fd893399e
8c94706c83b69868172a58cd6b24bcf5349d066e89f4d4881ed3cf5f705555fdf6922f09d57805b7
c5c3b97778b93c00eaa56bae4bd2e99df1664373083ef3e7ce988f5bd0a00dcd4acc7a6ab7a7343e
5bafb345f373933473f51509938488a1d0702f70845faccd2eaeb63b5c0e18bf447abde10c9a518a
8e7f3180651cbecc0d6666d562a2ac7bb77af2af3d4da383063a39a328f74135a03cf36f22ee3b74
05a383fe3dd4b237bdd6c39d946c8fdb12ea3865e2bdcff1c7ddc9870dd2c7161e9b31951f489f93
06208dfc0f55be03438857afb6afa6b73b2d8b8fc206e15926a41ecc40fb38ad0ed4f9a05eaf4f95
9ff7f29259e8b89a35e5058ddb39c087a9d47f920466322e7ca0a640758e3827bcf47923b0ec52a2
b37e0d6cbd745344496a773ba13596740c9c71148a24e57d3aa0085d026c2091ea625a336f253807
ec3f79f96109583b54204dacb0e232b8c6dd25377a4fd6dde205899118aea400ee275c5b92ddfbb6
227be1c61e40abda0fe7b339331bb9e734dae578c3cc96ecc582eb38aa8e7d9ea59e6cc12da3a5b9
3f9e505d81547248daddbfb8f426c5f1e6e44d1b8fd44b0390b002608a52cf15a3c2ea0a93671639
a19a3be6655dcf2c1ff007c83e11d076993985e9a4c6f6b3d0ddfb2283f4439d4620fc786843ec17
69fc20c8b4a76cf0cb20dfc7561463172566f205a66542f2f295f05a78941dbcfbfc6e5e40892c98
1e5a71152f759500628092dc350924a056ac8731b992f576499463a44df681ab048055dec5b6ef8f
3b51eecafcc7a218a33f3772f072f264ede2351b26385312cb1369615bb85f44cc1d79169d63f61a
db7f0936916d1358e11e3ce2c34aa4b1f3e16946e60830af6e64d2ad2d2724f355fcdf284d5b78f6
1fec8ae682c380c6f4e4c4a3a0369c7383dc71036d53a1085de7c0c5f5290bdced1b82b00dfd437f
925c59f40d980c9cb6de337cdadb3add76936e5c8ef0a803e7e9a41109212803b2464f0ce7151b89
bd6dfbaad7f502df30ddd0a966484180df60dffb05289f871a6f428f49755fb8c5d28d9535d6b16b
2beaeee4a88326ea8513396857705d3a12dd7b02716e16fabf0d2e1608167e6a856052c8823d4eb4
43f636067b742e2ce96a4316a0c68892321bd7d1aef7ed036415b3d613aaab1a45e3c72d7256cc8c
468aaa733b4f6c68d91ed5f3952bdd60d09b0d3aee5d0761dc31c5da884b098d70485fdf2acf30f4
e5fb51bc34da940bf7954479516f2a87d1aaf2096e0d4dc38615a60a6ee8cb710df533cf873ba403
77fb659366965cbdb18c5add8cde69d6ccc1f11e982c92c38bbaa96448c4b1827a180fdb5935befb
ede25ca998c8a74de9289fd5ef844b87b07bd675060f5b71db0d6ab7520a36ec1f1dde45e3b25ecc
055ef5e7d170bd19ce53a066b23e8eaa67df5ecc3499c175a85d614ee9556d8b94e86ffe1ce0485a
c7cf94ba188fe0e510e8e08f0fc2027f15df09f26268a3c8f7031f58a9e66d2d124543910de29ca3
6e4206561494dbd3576859c1f0d75b60c28d513041431a81856eb402028b8721da9d80c8c446d02a
ed09802aaef81f3ca7375ad4f838ffc957fac04ecfb9a74137f311e44b465d8493a6cd29e2a63495
fe42d7631dd9b68b0986fc91b05de0e8b8d9491c5566561f1035e04f1d77e87bda09a62d7ab5d604
34723c0ac4c5b28409ec8e460c40a8ca3a31b54d469711bd2d1f2e63c13d61256429dd23d4f75b80
4802d10201e6832499531d2143158d15c52e93542e7625fba2dbb119906c6aa12d4be71723dd051f
6a8f0857420f5fac0afe62a4f20278a775eb6cde7f6863aded658eb45cad52ba85893e1a81696a34
11c3d0d47af56d99afd20bbc7467cb06ec645ebedd02d778a4d7838117fe199fa2dd4f207bc9409b
96e81e95fdd36e77b3ddb0f0e05e609710003ae342eeca0abfb2e6ea9b0287d846969f2c3da5febc
90b472f1a677eaf2c4e6f0eea9687b8dfc5934e1d97bb10e8612476259a2f9f065db3110623e5aad
7612a1ff5c4d4ca5dcfc5f941384641778322286c66cd6b372fe92beaeb084148f21a5680d8fb8b5
202342aaaf50ef939bdb775a6d281b4f3583e37701fe9f4c437b6f1b16efc8e0a831015824606781
e6a6c829beb7d56915e8c7d1cabb8449592f2177b083d22da954b17865c8540d6a5c083efe2ddc38
f3186b7ee2f3a21c213ed5a94bd44599aa524f241e6704febe0fceb56ab598a9a66fef10c85e225a
43b7a06e28062447b10f11220289734e8f5eb0eb1f6c017c4c83b50743994241686f79ab34463954
577dcec945548623323f5993f03e80a0301a6280918a49d65cba08f0687897cb1e8df87abdde5178
d138ad5e12ebeb7c99822ffed5273b4b09a18781bca76030240e4ccc50b2bca8f2ef65a2575a9b03
2026c435003f2897e8ea4473fa8de8982f7e107bf2090ef6a740fff1ccba3ab3802f4a6abe658eb9
f6f0a51bd6d2f8e9d62009fdd22f04b8df363205ed56c7dbc4e6925a4d09ccaa9bda2c098fce64be
e173db4416392e39b5b2a3727ad23072e5badba69106fe27e39b198c81a318332ef7c4d2854f3ed7
6f2a9042840852301e545199aa08b3ce0baa641c057229090c95f632577255c08cee17826d5d1f87
858217c478f008821c9e0384b8bad6f22da736b168340331695d29bd96d2a14728a59021f5accef0
c6da2c6fa1d5e6ec084914777c4b909c1f38c2f7d8cafb31663e8e539c8cb86774769cb0edfafd4e
a20557163cae1148b387ff59d8d1bd652040095e6e930127671c0f201be13bc5c28a7ed30bf12f9a
625dc8c7c6e8b8b3473880082d39b064d19abbd3d4696e53aec2d114a87d98a6403d5260177f7a51
35a67ea5a153f499bb4452ac9475a2967ae87275c969d14d2eab22fad40fb24e43fae6ffbd8aea35
123cf04aba82a07e867ff0474849089e55106e0a5ea75384792c07a911ce362bf631b2fa5c2c3b26
cb826e862b05be13069f645b0352a4a0ecbc48b55d688ae50c90bda88962e57d6ebcf5542b9acc3d
fa9c226a3a57b316e579e5775aeedb49c8d088235b7e36be75bac5e6de8cf2223e64effd6d113172
7e53b74ef0fdf4a0352e6ddffe9a35e9eafb30e6fec587603d615568ce8e147fafaec5538e1802e6
f1714fe67982014802e3f776c8a7c7d0f42545c19934d226a400e91eca64965507abb7a14600f2a5
a341674f794663ab0c89eccc6b5ef8d448d9708220a4bb4b5fa468179b419f32de218dbde457dbf5
2d489adc8f4982d3013f537e59ec6e136cf33caf4a804cca1a8d14789b3c3042776fbcb6c4a22fde
4c5889047d3ae83a89ea0633b99ef1186e4247c6e8f6e514fcd1595a05600eb01bcdea2209f49832
9a1ea4a9c852fc4fb109fb0a4783aa1f18465c8ffb8af9fc8836359cd0f7b662e8a26f4e1fe9006d
59166013dd5ef05272f84163578123b73dc52d1f08641f5b2dfe69d777dc3afa1e725f03e8be303d
9e5d22477d44c6ce4d40e64dff5efc04b6c20f9cc00d08999743bc1b0aa56735f0a4138d69db3482
47a431459ea64fc06b487ea1d31590bdd7d3e620c555ed8c97f5129454c6909802b37f8b30fbb003
ccbcd1b5ba3b2ad94f34fe81157f6dc98efa2a37d468d9a1a2657c6db572c3707f1f31f2acb9320b
51e73cd3019b772d82e432577d383fc2ef46305f796e3b020d3eeaff0204de141bf0e009c85f98d6
a043d48e7ed4e76593fad6e1d034ad13fea6ba6aae0a2012fcfd05234973e1172cbe62b2b2063e05
15cdee235e839ab5be253ea0deeca175b09215d44a71cb13634a5986535aae72eaf13428d76d229d
55e3f51e765a58380fe28a8f79099aab221d8ff4f9f8a697c5fca939e3ed03aec9e92e77c63ed829
bf2bd63f70192ddeced4bbdee6f8f977d0d82424c61cd707713d38b38b8335e97b3e2ae6270e25e9
fa85e06186fbfbaaaf84a59a1bed6d14b35205c37530921ff2d2a6d1e004a76f84d8e0a2def6a72d
87606019c444433d995c147d585d5decb959e10db1559777f95430110b7b0bb9b6716ebbce6c86d1
dbad0e9054b808930a43d596e121aeede4cd44d77294017aab35a8f8999f0447f281de681ecea2d9
133ac523423f50a6301173b7282bded33b2d834f739190271dd9f39f1bbf1b2b45287bc7b87c1156
f87b7e1b1f6b94eb284c26dc8bd511b58cfd095aeef89a475a784d06439d482516f89c906413b052
5f60fa224db7a0e08d9d66a09da5b7a546970c34ec6ab6b7ea6c63f2bb311de61716e7d33f74590a
6b57ee0357dd3aacfd38dc676a53c814861763b766f3cbef948e208adf75d859138609e2394b545b
148ff02cf165dec16a3ff97b38ac972bc59d91708b711f40871fa50880bb652b6b51110ec6a3c469
6e631e26f09d4c742c7df46e41dc2029b7e9e4480044deb2b2af108e91be897994a152622e7ab1c8
0d3290ec2ab851fc0b126659c2f73fff037e2ed0a24600ca51c90f834546ac33707d8504f6a38fda
704b55c00e6179e655a0d6179434c03a1b5231902e70102a893d35addc6b4e068c31979319a93460
d6f4b3ce23fd72bdf1d40931ca607e46206bc13ed30c541beb8bc7f75f7d6763a0563dfcad0751de
ef3d533a0615a1d90009425cdaa495cab613a3ccaf463f9a95f9bd68f4cbe6f7a44d72d3bfc9f224
50b960ad938f694bdcb316b552ea64d5ba5c4897f85d362b05d50009e410286d19f5b3ecdc5280ee
95dfbd6bb313014b8988657f3763af32be0d6460a1f26ab7a55fb846cfa87911075e55f7be6449d0
999179d5c813a6f259cedd3b4aaf7e6a922f89b4d4288ca8a689b8a7c8ad66615f795d652b483988
88a3c79649a7ab898ff664b26f01d960463bcc25d927c49b8412584e81487adf0f590660a04a5475
c478578d295307d353950da3397fd86993ff366d2782b3a18a01c473dc38be34f44d1efb0a839f93
ab8295f34730cc968a08e5ae41eb40784fe6761477999458d1d4a93a0a65800afeeb00a6cf4a07d4
1f2a10e26cbcfbd7034bc2bb3813cfb5dffc107e7678e959b4eada0dd61c95e4bf55be016bf6fd45
81ee404be966848439c785071b330039042e2b3d3aacff0ad9e39071d8a4e1117e9d9cca9a893d05
5ade160087495b81edf8dbcc150b4e950c2bb226324b2fc15312d2b40b39245c2a4a2caf551067d3
287661dfec69ea21be3f30d16112a92651eca329d2e5da5a8ab99aae80c15b98d83b1aa118faeded
db5b248bcce0b0cee9b0fc43ee2c559c655e273def2ae34f5dbce60e4723b3e461d5f1f50e5e1f7b
a2e9eb1ec4c354a563d7e43f7386cee35f92193b54affc0e9ad6e0f3fea6020d038e6229f1d6fa2b
4a9cfdeacc2fff360b3b866f0f647821429e0245bbf6b6b91723912e6e65e1e313cca9fb3fb7c3e5
19400aa2c8858a5274b5a443543958ce8891347e468ce473ade0c607b0d39dd30e3dd75ffb9c4330
6f29a5c8c802306d07a0c954da697cf45db5e1e09dfcc9e0f59f934c15fe30911523b1851dc83c17
4777a1732cc30b16f738166f10abb963d975905f979ace5b382fc40d225be8ada091b9dd0cdbf1d5
3facc1e1b9b0f7d32ff48210f594d369155ce6c0dd240c881edb9f55d015c14f164866ba730f99b8
96494a9256967b0f1f464f617e3ca7c4d71ed8c6ef5294106a6dfa560015eacebaf46b29bbb7fbcc
46b9be0ded832a16c39c8da0c18221b25832d3036f063ec7918f7f732243d202af9a81f282624121
c32a70c6052cd2115e8b5057391b1e162ba1f36e099c80fed582b440bea9c409bc52f6d9aa4be248
8976d4c06cfaec3869a98e6b980d5210bc2f1ebd8784c9a39267a40a7cafdde7895b9d0651351e9c
18bd5e56dd878d9a33aa88b600f0662210e2943b9b1556228706118763d76236fa9cf556f46374dc
a675457a6515b5d00820a59f83cc3f7832daef24e55f82476b020441cde46ffc83647b7f24cbd650
29522045ba82e19806814c2bb6b64d19191cef200cdf5fdc963dcd87e725af74964dded78e3b7b55
ca668081923150fda007d09f31a1ac8abd66a8d35500c5a4cc240734dbf5b1ce3cf0b4465ce9ad
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
 HBW_to_Column <Virtual>  0
 HBW_to_Row <Virtual>  0
 jmp <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 MC200 C710 11 0x0 MC220 C730 1"

// Rung VGR_Copy_State_F#3
// Offset 18
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#4
// Offset 35
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#5
// Offset 39
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#6
// Offset 42
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#9
// Offset 66
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#10
// Offset 83
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#11
// Offset 87
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#12
// Offset 90
NOP

// Rung VGR_Copy_State_F#13
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#14
// Offset 93
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#15
// Offset 95
NOP

// Rung VGR_Copy_State_F#16
// Offset 96
RET

// Rung VGR_Copy_State_F#17
// Offset 97
NOP

// Rung VGR_Copy_State_F#18
// Offset 98
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#19
// Offset 143
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#20
// Offset 176
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#21
// Offset 183
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC501 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1 0x0 MC450 C843 1"

// Rung MPO_Copy_State#2
// Offset 65
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 126
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 135
STR C2000
COPY 0x1 "4 0x0 MC450 C700 1"

// Rung MPO_Copy_State#5
// Offset 142
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3005 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC10 C4 27 0x0 X6 MI7 4 0x0 MHR5 N300 1 0x0 MC1 C301 3"

// Rung HBW_Copy_State_F#2
// Offset 16
#BEGIN FMT_COMMENT 
"Factory 4.0 read/write"
#END

STR ST1
COPY 0x1 "4 0x0 MC1 C301 5 0x0 MHR1 N1 4"

// Rung HBW_Copy_State_F#3
// Offset 27
STR ST1
COPY 0x1 "4 0x0 0 MC1 5"

// Rung HBW_Copy_State_F#4
// Offset 34
STR C28
OUT Y39

// Rung HBW_Copy_State_F#5
// Offset 36
STR C29
OUT Y40

// Rung HBW_Copy_State_F#6
// Offset 38
STR C30
OUT Y41

// Rung HBW_Copy_State_F#7
// Offset 40
RET

// Rung HBW_Copy_State_F#8
// Offset 41
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#9
// Offset 94
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#10
// Offset 135
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#11
// Offset 142
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
STR ST1
RST C210

// Rung HBW_lift_seq#2
// Offset 2
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#3
// Offset 4
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#4
// Offset 7
STR X10
OUT C200

// Rung HBW_lift_seq#5
// Offset 9
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#6
// Offset 18
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#7
// Offset 24
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#8
// Offset 27
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#9
// Offset 30
STR X11
AND C201
OUT C210
RST C200
RST C201

// Rung HBW_lift_seq#10
// Offset 35
NOP

// Rung HBW_lift_seq#11
// Offset 36
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 65 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_PWM_On#6
// Offset 62
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_PWM_On#7
// Offset 64
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 10 0x0 0 C200 15 0x0 0 N200 10"

// Rung HBW_Reset_Flags#2
// Offset 12
NOP

// Rung HBW_Reset_Flags#3
// Offset 13
NOP

// Rung HBW_Reset_Flags#4
// Offset 14
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
ANDN C602
OUT Y26

// Rung VGR_dropoff#7
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
ANDN C602
OUT Y27

// Rung VGR_dropoff#8
// Offset 39
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 48
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
ANDN C603
OUT Y25

// Rung VGR_dropoff#10
// Offset 57
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 66
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 78
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 81
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 84
NOP

// Rung VGR_dropoff#15
// Offset 85
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block HBW_to_Column
$LGCMOD HBW_to_Column

// Rung HBW_to_Column#1
// Offset 0
STR ST1
RST C210

// Rung HBW_to_Column#2
// Offset 2
STR ST1
MATH N201 "N200 + 50"

// Rung HBW_to_Column#3
// Offset 11
STRN C210
ANDLE N201 $HBW_Encoder_X.Acc
OUT Y51

// Rung HBW_to_Column#4
// Offset 17
STRN C210
ANDGE N200 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_to_Column#5
// Offset 23
STRLE N200 $HBW_Encoder_X.Acc
ANDGE N201 $HBW_Encoder_X.Acc
SET C210

// Rung HBW_to_Column#6
// Offset 32
NOP

// Rung HBW_to_Column#7
// Offset 33
RET

// End of Code Block HBW_to_Column
$LGCEND HBW_to_Column

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
ANDN C602
OUT Y26

// Rung VGR_pickup#7
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
ANDN C602
OUT Y27

// Rung VGR_pickup#8
// Offset 39
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 48
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
ANDN C603
OUT Y25

// Rung VGR_pickup#10
// Offset 57
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 66
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 78
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 81
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 84
NOP

// Rung VGR_pickup#15
// Offset 85
NOP

// Rung VGR_pickup#16
// Offset 86
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
ANDN C602
ANDN C605
ANDN C600
SET C601

// Rung VGR_SLD_pickup#10
// Offset 76
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 79
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 83
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 89
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 95
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 105
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
ANDN C604
ANDN C605
ANDN C600
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 114
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 122
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 134
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 138
STR C605
AND X26
SET C600
RST C605

// Rung VGR_SLD_pickup#20
// Offset 142
NOP

// Rung VGR_SLD_pickup#21
// Offset 143
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block HBW_to_Row
$LGCMOD HBW_to_Row

// Rung HBW_to_Row#1
// Offset 0
STR ST1
RST C210

// Rung HBW_to_Row#2
// Offset 2
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Row#3
// Offset 11
STRGE $HBW_Encoder_Z.Acc N201
ANDN C210
OUT Y5

// Rung HBW_to_Row#4
// Offset 17
STRLE $HBW_Encoder_Z.Acc N200
ANDN C210
OUT Y4

// Rung HBW_to_Row#5
// Offset 23
STRGE $HBW_Encoder_Z.Acc N200
ANDLE $HBW_Encoder_Z.Acc N201
SET C210

// Rung HBW_to_Row#6
// Offset 32
RET

// End of Code Block HBW_to_Row
$LGCEND HBW_to_Row

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5350 N1005 1 0x0 5320 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 775
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 775
ANDLE $VGR_Encoder_X.Acc 805
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_HBW_deliver#15
// Offset 87
NOP

// Rung VGR_HBW_deliver#16
// Offset 88
NOP

// Rung VGR_HBW_deliver#17
// Offset 89
NOP

// Rung VGR_HBW_deliver#18
// Offset 90
NOP

// Rung VGR_HBW_deliver#19
// Offset 91
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 31
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung $tFirstScan#4
// Offset 39
STR ST1
INIT "3 MC100 MC100 1 MC502 MC502 1 MC808 MC808 1 MC300 MC300 1 MHR0 MHR399 0 N1 N799 0 MC201 MC220 0 MC450 MC450 0"

// Rung $tFirstScan#5
// Offset 61
STR ST1
COPY 0x1 "4 0x0 0 MC820 1"

// Rung $tFirstScan#6
// Offset 67
NOP

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR ST1
AND ST2
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#11
// Offset 63
#BEGIN FMT_COMMENT 
"Presumably the VGR is in a ready state if in the command "
"queue, so always set this to true for the Factory 4.0 layer."
#END

STR ST1
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_Program#12
// Offset 69
STR ST1
AND MC200
JMP VGR_Program.S99
COPY 0x1 "4 0x0 0 MC200 1 0x0 0 MC300 1"

// Rung VGR_Program#13
// Offset 78
STR C300
OR C711
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#14
// Offset 93
STR C717
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#15
// Offset 107
STR C31
OR C1701
OR C712
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#16
// Offset 123
STR C32
OR C1700
OR C713
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#17
// Offset 139
STR C33
OR C1702
OR C714
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#18
// Offset 155
STR C34
OR C719
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#19
// Offset 170
STR C35
OR C718
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#20
// Offset 185
STR C36
OR C715
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#21
// Offset 200
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#22
// Offset 209
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 218
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#24
// Offset 227
STR C716
JMP VGR_Program.S12
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#25
// Offset 241
STR C720
JMP VGR_Program.S13
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#26
// Offset 255
NOP

// Rung VGR_Program#27
// Offset 256
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#28
// Offset 258
STR C300
OR C711
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 775 N1007 1 805 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#29
// Offset 279
STR C500
AND C300
JMP VGR_Program.S1
RST C300

// Rung VGR_Program#30
// Offset 283
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C711
COPY 0x1 "4 0x0 0 MC201 1"

// Rung VGR_Program#31
// Offset 298
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#32
// Offset 300
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#33
// Offset 321
#BEGIN FMT_COMMENT 
"Non Factory 4.0 Mode"
#END

STRN C717
SET C700
SET C701

// Rung VGR_Program#34
// Offset 324
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C717
COPY 0x1 "4 0x0 0 MC207 1"
SET C701

// Rung VGR_Program#35
// Offset 340
SG VGR_Program.S2

// Rung VGR_Program#36
// Offset 342
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#37
// Offset 354
STRN C712
SET C718

// Rung VGR_Program#38
// Offset 356
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1701
RST C712
COPY 0x1 "4 0x0 0 MC202 1"

// Rung VGR_Program#39
// Offset 372
SG VGR_Program.S3

// Rung VGR_Program#40
// Offset 374
STR ST1
ANDN C500
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#41
// Offset 387
STRN C713
SET C718

// Rung VGR_Program#42
// Offset 389
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
RST C713
COPY 0x1 "4 0x0 0 MC203 1"

// Rung VGR_Program#43
// Offset 405
SG VGR_Program.S4

// Rung VGR_Program#44
// Offset 407
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#45
// Offset 419
STRN C714
SET C718

// Rung VGR_Program#46
// Offset 421
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
RST C714
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Program#47
// Offset 437
SG VGR_Program.S5

// Rung VGR_Program#48
// Offset 439
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#49
// Offset 449
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C719
COPY 0x1 "4 0x0 0 MC209 1"

// Rung VGR_Program#50
// Offset 464
SG VGR_Program.S6

// Rung VGR_Program#51
// Offset 466
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 300 N1007 1 330 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#52
// Offset 487
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#53
// Offset 493
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#54
// Offset 504
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C718
COPY 0x1 "4 0x0 0 MC208 1"

// Rung VGR_Program#55
// Offset 519
SG VGR_Program.S12

// Rung VGR_Program#56
// Offset 521
STRN C500
CALL VGR_pickup 0x1 DST511 "3 20 N1005 1 0 N1006 1 2200 N1007 1 2230 N1008 1 3475 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#57
// Offset 541
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C716
COPY 0x1 "4 0x0 0 MC206 1"

// Rung VGR_Program#58
// Offset 556
SG VGR_Program.S13

// Rung VGR_Program#59
// Offset 558
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 2200 N1007 1 2230 N1008 1 3500 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#60
// Offset 578
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C720
COPY 0x1 "4 0x0 0 MC210 1"

// Rung VGR_Program#61
// Offset 593
SG VGR_Program.S8

// Rung VGR_Program#62
// Offset 595
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 20 N1005 1 0 N1006 1 30 N1007 1 60 N1008 1 2900 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#63
// Offset 616
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#64
// Offset 622
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#65
// Offset 632
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36
RST C715
COPY 0x1 "4 0x0 0 MC205 1"

// Rung VGR_Program#66
// Offset 648
SG VGR_Program.S9

// Rung VGR_Program#67
// Offset 650
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#68
// Offset 670
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#69
// Offset 680
SG VGR_Program.S10

// Rung VGR_Program#70
// Offset 682
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#71
// Offset 702
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#72
// Offset 712
SG VGR_Program.S11

// Rung VGR_Program#73
// Offset 714
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#74
// Offset 726
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#75
// Offset 736
SG VGR_Program.S20

// Rung VGR_Program#76
// Offset 738
NOP

// Rung VGR_Program#77
// Offset 739
NOP

// Rung VGR_Program#78
// Offset 740
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#79
// Offset 750
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#80
// Offset 758
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#81
// Offset 783
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#82
// Offset 800
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#83
// Offset 804
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#84
// Offset 808
NOP

// Rung VGR_Program#85
// Offset 809
SG VGR_Program.S100

// Rung VGR_Program#86
// Offset 811
NOP

// Rung VGR_Program#87
// Offset 812
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STR C843
AND SLD_Program.S4
JMP MPO_Program.S4
RST C841
COPY 0x1 "4 0x0 1 MC820 1"

// Rung MPO_Program#11
// Offset 59
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 61
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 65
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 67
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 69
TMRDOWN T2 V1600
OUT Y16

// Rung MPO_Program#16
// Offset 72
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 74
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 76
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 80
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 84
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 86
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 88
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 104
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 106
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 108
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 125
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 128
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 130
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 134
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 137
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 139
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 155
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 158
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 160
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 164
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 168
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 170
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 172
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 174
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 177
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 180
STR T9.Done
DUPBOOL
AND ST1
RST C900
POPBOOL
DUPBOOL
AND C840
JMP MPO_Program.S6
POPBOOL
ANDN C840
JMP MPO_Program.S9

// Rung MPO_Program#42
// Offset 191
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 193
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 195
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#45
// Offset 199
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 201
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 203
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 205
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 209
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 211
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 213
OUT Y47

// Rung MPO_Program#52
// Offset 214
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 216
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21500
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 22000
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0
COPY 0x1 "4 0x0 0 MC450 1 0x0 1 MC808 1 0x0 0 MC820 1"

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
STR ST1
EXIT

// Rung SSC_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"SSC Program"
#END

SG SSC_Program.S1

// Rung SSC_Program#3
// Offset 4
STRN X41
OUT Y37

// Rung SSC_Program#4
// Offset 6
STRN X40
OUT Y36

// Rung SSC_Program#5
// Offset 8
STR X41
AND X40
JMP SSC_Program.S2
COPY 0x1 "4 0x0 0 V2401 1 0x0 0 V2402 1 0x0 6500 V2403 1 0x0 700 V2404 1"

// Rung SSC_Program#6
// Offset 23
SG SSC_Program.S2

// Rung SSC_Program#7
// Offset 25
STR X44
STR ST2
CNT CT0 60000

// Rung SSC_Program#8
// Offset 29
STR X45
STR ST2
CNT CT1 60000

// Rung SSC_Program#9
// Offset 33
STR ST1
MATH V2401 "CT0.Acc + CT1.Acc"

// Rung SSC_Program#10
// Offset 42
STR X46
STR ST2
CNT CT2 60000

// Rung SSC_Program#11
// Offset 46
STR X47
STR ST2
CNT CT3 60000

// Rung SSC_Program#12
// Offset 50
STR ST1
MATH V2402 "CT2.Acc + CT3.Acc"

// Rung SSC_Program#13
// Offset 59
NOP

// Rung SSC_Program#14
// Offset 60
STRLE V2401 V2403
OUT Y37

// Rung SSC_Program#15
// Offset 65
STRLE V2402 V2404
OUT Y35

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR C10
EXIT

// Rung HBW_Program#3
// Offset 10
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#4
// Offset 18
NOP

// Rung HBW_Program#5
// Offset 19
NOP

// Rung HBW_Program#6
// Offset 20
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#7
// Offset 22
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#8
// Offset 25
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 27
STR X11
SET C110

// Rung HBW_Program#10
// Offset 29
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 32
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 35
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 38
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 41
STR X0
AND X3
JMP HBW_Program.S97
RST C303

// Rung HBW_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Presumably HBW is in a ready status if its in this job queue"
#END

STR ST1
COPY 0x1 "4 0x0 1 MC100 1"

// Rung HBW_Program#17
// Offset 53
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C301
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#18
// Offset 72
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#19
// Offset 89
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 N1 1 0x0 0 N2 1 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#20
// Offset 114
STRN X2
AND C302
JMP HBW_Program.S5
COPY 0x1 "4 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#21
// Offset 129
STRN X2
AND C303
JMP HBW_Program.S99
COPY 0x1 "4 0x0 0 MC3 1 0x0 0 MC100 1"
RST C303

// Rung HBW_Program#22
// Offset 139
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C304
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#23
// Offset 158
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#24
// Offset 175
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR3 0
ANDNE MHR4 0
AND C304
MATH N300 "(MHR3 * 10) + MHR4"

// Rung HBW_Program#25
// Offset 194
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N103 1 N204 N104 1"

// Rung HBW_Program#26
// Offset 211
STR C304
JMP HBW_Program.S10
COPY 0x1 "4 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#27
// Offset 229
STR ST1
AND C305
JMP HBW_Program.S100

// Rung HBW_Program#28
// Offset 232
SG HBW_Program.S0

// Rung HBW_Program#29
// Offset 234
STRN C100
AND ST2
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#30
// Offset 247
STRGE N101 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_Program#31
// Offset 252
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#32
// Offset 257
STR C100
JMP HBW_Program.S1
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#33
// Offset 266
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#34
// Offset 268
STRN C100
AND ST2
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#35
// Offset 281
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#36
// Offset 286
STRGE $HBW_Encoder_Z.Acc N102
SET C100

// Rung HBW_Program#37
// Offset 291
STR C100
JMP HBW_Program.S2
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#38
// Offset 300
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#39
// Offset 302
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C210 C102 1"

// Rung HBW_Program#40
// Offset 315
STR X11
AND C102
JMP HBW_Program.S3
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#41
// Offset 325
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#42
// Offset 327
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#43
// Offset 338
STR C103
JMP HBW_Program.S4
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#44
// Offset 347
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#45
// Offset 349
STR X2
STRN X2
ANDN T14.Done
ORSTR
OUT Y48

// Rung HBW_Program#46
// Offset 354
STRN X2
TMR T14 100

// Rung HBW_Program#47
// Offset 357
#BEGIN FMT_COMMENT 
"Non factory 4.0 workflow"
#END

STRN C301
AND T14.Done
AND ST2
SET C300

// Rung HBW_Program#48
// Offset 361
NOP

// Rung HBW_Program#49
// Offset 362
STR T14.Done
RST C301
COPY 0x1 "4 0x0 0 MC1 1 0x0 1 MC100 1"
JMP HBW_Program.S97

// Rung HBW_Program#50
// Offset 371
SG HBW_Program.S10

// Rung HBW_Program#51
// Offset 373
STRN C100
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#52
// Offset 385
STR C100
JMP HBW_Program.S11
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#53
// Offset 394
SG HBW_Program.S11

// Rung HBW_Program#54
// Offset 396
STRN C100
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#55
// Offset 408
STR C100
JMP HBW_Program.S12
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#56
// Offset 417
SG HBW_Program.S12

// Rung HBW_Program#57
// Offset 419
STRN C100
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C210 C100 1"

// Rung HBW_Program#58
// Offset 431
STR C100
JMP HBW_Program.S13
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#59
// Offset 440
SG HBW_Program.S13

// Rung HBW_Program#60
// Offset 442
STRN C100
CALL HBW_to_Column 0x1 DST511 "3 N103 N200 1" "3 C210 C100 1"

// Rung HBW_Program#61
// Offset 454
STR C100
JMP HBW_Program.S14
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#62
// Offset 463
SG HBW_Program.S14

// Rung HBW_Program#63
// Offset 465
STR ST1
MATH N105 "N104 - 400"

// Rung HBW_Program#64
// Offset 474
STRN C100
CALL HBW_to_Row 0x1 DST511 "3 N105 N200 1" "3 C210 C100 1"

// Rung HBW_Program#65
// Offset 486
STR C100
JMP HBW_Program.S15
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#66
// Offset 495
SG HBW_Program.S15

// Rung HBW_Program#67
// Offset 497
STRN C100
CALL HBW_Unload_Rack 0x1 DST511 "3 N105 N202 1" "3 C202 C100 1"

// Rung HBW_Program#68
// Offset 509
STR C100
JMP HBW_Program.S97
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC4 1 0x0 0 C100 6 0x0 1 MC100 1"
RST C304
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#69
// Offset 529
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#70
// Offset 531
STR X1
ANDN C300
STR X1
AND C302
ORSTR
OUT Y49

// Rung HBW_Program#71
// Offset 537
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#72
// Offset 539
NOP

// Rung HBW_Program#73
// Offset 540
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#74
// Offset 542
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#75
// Offset 553
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#76
// Offset 556
NOP

// Rung HBW_Program#77
// Offset 557
NOP

// Rung HBW_Program#78
// Offset 558
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#79
// Offset 560
STRN C100
OUT Y50

// Rung HBW_Program#80
// Offset 562
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#81
// Offset 567
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#82
// Offset 569
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#83
// Offset 571
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 573
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#85
// Offset 590
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#86
// Offset 595
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#87
// Offset 600
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#88
// Offset 609
SG HBW_Program.S9

// Rung HBW_Program#89
// Offset 611
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#90
// Offset 623
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC2 1"
RST C302

// Rung HBW_Program#91
// Offset 635
SG HBW_Program.S100

// Rung HBW_Program#92
// Offset 637
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#93
// Offset 640
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#94
// Offset 643
SG HBW_Program.S101

// Rung HBW_Program#95
// Offset 645
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#96
// Offset 662
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#97
// Offset 665
SG HBW_Program.S102

// Rung HBW_Program#98
// Offset 667
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#99
// Offset 684
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#100
// Offset 687
SG HBW_Program.S103

// Rung HBW_Program#101
// Offset 689
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#102
// Offset 706
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#103
// Offset 708
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#104
// Offset 713
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#105
// Offset 716
SG HBW_Program.S104

// Rung HBW_Program#106
// Offset 718
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#107
// Offset 735
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#108
// Offset 738
SG HBW_Program.S105

// Rung HBW_Program#109
// Offset 740
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#110
// Offset 757
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#111
// Offset 759
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#112
// Offset 764
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#113
// Offset 767
SG HBW_Program.S106

// Rung HBW_Program#114
// Offset 769
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#115
// Offset 785
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#116
// Offset 788
SG HBW_Program.S107

// Rung HBW_Program#117
// Offset 790
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#118
// Offset 806
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#119
// Offset 809
NOP

// Rung HBW_Program#120
// Offset 810
SG HBW_Program.S98

// Rung HBW_Program#121
// Offset 812
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C9","rst","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C301","","","Factory 4.0 Pallet HBW to Conveyor"
"C302","","","Factory 4.0 Pallet Conveyor to HBW"
"C303","","","Factory 4.0 Home Position"
"C304","","","Factory 4.0 Sort Pallet"
"C305","","","Factory 4.0 Manual Mode"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C704","copy","","Deliver Puck Train Depot"
"C710","","","VGR Home Position"
"C711","","","VGR Pickup puck HBW"
"C712","","","VGR pickup puck SLD white"
"C713","","","VGR pickup puck SLD red"
"C714","","","VGR pickup puck SLD blue"
"C715","","","VGR pickup puck Loading Bay"
"C716","","","VGR pickup puck Train"
"C717","","","VGR deliver puck MPO"
"C718","","","VGR deliver puck Loading Bay"
"C719","","","VGR deliver puck HBW"
"C720","","","VGR deliver puck Train"
"C721","","","VGR Manual Control"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"D0","True","",""
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"HBW_Program.S0","","","HBW Pallet HBW to Conveyor"
"HBW_Program.S1","","","Go to HBW row"
"HBW_Program.S5","","","HBW Pallet Conveyor to HBW"
"HBW_Program.S7","","","Unload sequence go to column"
"HBW_Program.S10","","","HBW Sort Pallet"
"HBW_Program.S15","","","HBW last stage in sort"
"HBW_Program.S97","","","HBW Job Queue"
"HBW_Program.S99","","","HBW Home Position"
"HBW_Program.S100","","","HBW Manual Mode"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S12","","","Pickup puck from Train"
"VGR_Program.S13","","","Deliver puck to Train"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"SSC_Program.S0","Reset_SSC","",""
"SSC_Program.S1","Init_SSC","",""
"SSC_Program.S2","Calc_Pos","",""
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

