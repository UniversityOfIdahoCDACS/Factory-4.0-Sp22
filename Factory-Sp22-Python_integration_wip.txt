// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jeffr\Documents\Robotics_I\Repos\Factory-4.0-Sp22\Factory-Sp22-Python_integration_wip.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
d439a8763ad4df5ac9601bcfa0c167774e38623e2ea97e51162c63c64fe586266875d5e03dca5cc7
d60d2d59f62bba4c20e2292b94381229cc164a8d3e5dc740704a429c5dfe95d282de34455cb80c85
e946de47f62f1ae400d4233d9f3d04c83cc790c00f64ad6f46841e3fdee449ff2cee87f0067e93dd
13e42f22661f68ca54402253ca0580b94c4592c8b4a11e9e3b5040d49d08ec937576101e7a261785
fc6e1e4718efed343b4961c7f59e7af23050b3ea1cc22557735796583c3e13805f92e91c697fba16
d8ef6cd27c3c0d9a76f066ce3036090e73859c2546072fae9119686bd6c9a5b1ad13df79d1d99847
b842f7ec33c8ed723c8d15c2eb93db665a9b6c5a823449396bf9d7b9807880d7118c8201a9efba54
6398d6b3f89e72483c3698257c411bbeba0b74d1e5c5f7d507c13b4d05f8b588217fd119ec633b18
b3d2a6585669964f4b7d3f97ff6e659c51498a8d95802b9abc1ffe75ede2d533120437289c54a444
b7dbd125863eaa8c0b7ef2b9330d97cbb4f69f89e72e120929b986554f039b95c8e3999d30d00992
beff249c99d73de56b432b65f5a58ffe62c7651775aa6ef7e9b4863c7604f4954eed22ab5bc8e25e
2551ccf150e4c48362ba789ad850a034b789f23c534d85c87f749a18f0ac52c269f0df4faccd66df
f361610b2e32254fa25b5ea8162a9323a083b76932ffc195ad2f9382d64d4b36d75b169c6cecc86e
7418cf0f0ec24d22208412ec2d4f298fa70ce992b7800f287b4406dbb8f9844f8a43c81252b43613
8c3a6b2c75ad68565ed4a02130797114e2efb02b73a82b506e98c0339ff9270d0dccad282e339c1a
aa9ad1164fba9693e25c6a0958d0bced4d7a1953d51875046f84bfe41f1bb2e3e2467f5cada821fd
9c46e06c55b9958d61a76e7845132bad5e008045fe17cc6cf4f2c9c0641ceb27cc6399fba421907c
de652c652a7b8f80317e4c971731c513dc3effd82778d1d7b3cbd677d10d154800cd7291a7c1b2a7
d3f688f5bcfa739af8515316a03d64c5698f37bb5ffe67b0495437f92715f79ae80dd97d0ab0185a
683c750764b63feba7d158b516b6abab3d2399fee1d226c52c38dbe5333fdeac162ab3870664fa64
fcd465c3dcc6967f6e1d216be06fd0df120da34bf0361000b9da8d428f1ff10ec27ade7d48e2c6dc
a87656b3a53c7fc6f1e9e9b23a17a20ac34e25adeabaef0eddd8df68a8d5e7fb88305e70f6d3211b
2dc7883022c8d48d95391d8da21a53369611dc89a6206b84607345f629464c74c65d2ec1ed2d90f5
385a5b06f65cd1cf742f54e2f23eb51f2dbba69ebd3d0aea2aa60fcc782654f2b43ee76fa8ce2dc6
567ddceea58f06a836880ceb17a7b39bbf0d979b641e9073dafbcb2e7f21880b71081522b79cd817
03fc8e514765ba8f5ba6916a39db96db43920e95947f1c6eca67d62d12c3f23718519c4b3958752b
2dccf681ff0cd7e915a3d42edde3ece813310cea775619488a28bade75c9f036d9710a205b43ccfc
57519c827a55018829602e8c81f2ffc1d146d69cbaa5c9b329ab955a246bb963ca5fee43aa7a3c0d
d7111540ea72c671cc7483444f7e320784e3b35960015c0a966384af1a943b9bf2b672b6d220d147
a267232919ef1951d364f0c6d348619881bd8bf484a92454593d718f92e2931f1a0f690d1980e2f7
933d843037ad2d16f82cebcce09aa193a6886a1d9cee08cf1ae67f3745361223f29a7113329fcdfb
91a0333e66e9a5bf8fca7c05d728dae671889d9862c8cdd100e796e6b7b6fbbb12ea0009adbeb468
efdb8044b09fb45b2fcf6da7acb7f9b0498671233044ba625d78586942add9c566aca7bcf2bbc2dc
784f88ec96cc8062f8e63a0e11de51cf0c6caa4024648d321ab2730568f54c3e210a2b3d28b7a951
c260044441702e27502af67faf73e1e221f61008c1143795558ec50947eae390d30da9c80f48e512
0384ab6fd136d23f47f101ac6783b26cf660ff57caa575aa0dec120655506f0e1a2611787584a112
a90a7dd9da4fbb9c7229f66d38e76b88a0354a79e486ec67280835bfe38e9a669a22cc5d1eeb01f6
7b91c2d9ef9a5b4d44800b8d9065d41a2a1313f475abdc6a6ff3e142d133f393168b3500a5d419c6
10dd3dc70a646a9f73cbc788b082cc6b3f9945331f7a074118828f79ecdbee01547db324397c9df3
6093acc835733234334c9f887a3f664ff10e18592e1077e51c5486e791343fe1372085e505c77bd6
637d0a975e45f8654a0a441c413cf9332a736af44d344c4615ab7ea52df3597af4adbcd2455a2b8a
72c0c8c645961be4a93b5215319a788fe27ba2d98f440d2b866bb4b8c1896cf525db28e85603c64f
bc28bcf29d1e08f28e5afcbd9729779e7d96f82b401e440263b34081162445068cc703975923cd37
1d2f6a918d6c13f24eb51451ed9cd93c9c5301ff3fe14eae44b6a8b0d8d2cec068f3057ab7e216a4
72fa9a8c2ed6a3f1b11b1d2b20d55b3ae855f50ad05e760eb356b270875c3d0bb58012b587f48715
50317c33973ce63a9243d59586da3bfd7b67327343077c3ccca041b350c9e2056e681f8964780bfc
3c8e331973e0ffc809b4cd321e8b057fd8e791deb359109a468de6623596f713d1399445c333a2d0
cf17ddabc3fd259ae13b67c1b61e0b8518154dd4f86c541e40a8a781d7195e7302d41b67b897a334
5e6aa0263de7a2bca75a723205478cb758ac4a6728b16698d7e79a0ed1d335fd5a821b235e5c7342
2bdf22029eab17c71bfe947dbdb892438f9ee1df769116aa4d6f266fc80994a9c2ac6971a078bbfc
0f612ed315f1d5b5ab1b4fae86d6488136bc229bcc372b78d767441f0cd76687c5736ba1b24fe900
049b309589503fca15b653a2c36ba193de3cd367e6cdbf72569f9d9c54e283948386c79158a67264
f743b4942d4879ae637c3fce374b0b681e18ebbd43dba9d7dde4da542bc14432281442d185fc319f
64f68c77ecb7d87e859d023e2bb139da5add69f45d2d5021a6efdeb529eee587e5d75fe01e9d7394
56c5e9866579190490ae14b05103810dcf6bb55da271f0708493e6e8fb8593f0db1dfc6b7184f2e5
a2ca6d8efdee3543034679818fa11cb3c1ab96d81951dd39773a4f66a240110809fe5cace7617474
a7aace2c7c8578a24b59b263af58496daf7724328667c9164ad5ba10209bb65570007c4c26f35210
fcddd24561c6b7f874fd485c22a5a5c75854199d3c5d8cd4acea349f5109dd32b4a8031e27499664
2c72a85772bbfc8b6f4b2624748d70aa43f35ea50eec6a83ed56148f78747797b89ae2776b0d6556
e6ad72bbd69b86a6c30f0097b3141ddeffbd939c951c21949b01e5aab3855d3d98a5f33992baa48f
d9686de3d1ee0a6e2eab5a984469c84e6e7d792db259c5b479e2f8ae315b18e1454e4b0b269edb1e
a40732032275945bf66a7f659bbcd4fdbf01751fa23629d776e2e05814113c1f95ba51a88c050c35
603376d36ac91dfde484592f4ad85021772c6423179b435b0d734838b7c042fa21eb50cb3a290407
7502f11b2e00807fcd8c68b4c771e6816390ca63c8b027630205fd2ec6914c87ca3a9b10e81504e2
d86fa10b6115d4961408bcf275038a43d1eed40b81d903e6219364926a441046a1f2b5e37c558a5a
6081bbe35e8696b0e3037bec272d44894288ec8c56fa3f384529ba85d24d645b8868c681b36bd8f0
d615d22a7ff10746a1b3a71fe0eaef4e7270995a47d2f160935b8d50cfb05644441d94265dc2c1a8
2d6587bb354c5f65179b2af24d84032908ff3b742ca8b548f69d7cf088e4f5f932a91a15bea251a7
301e4a1c0b58ff9f756aa275d51b2179c444542e08dce1db7c74ea5f50fbe716a03e3e6727b4ff77
65e649693e6f9761491ced3b85685323b4dfd769b0559220d325eb96a58023002644aeb1c91e294f
dc3733824298be635c6639b3bb3842dff4016d39ed6df17053abb93a951d0b81e705f68c25a3aa69
ae5633bd5514f3e1358dea78477d5a514ffcf35844bdcb8f5bdb478c7ff144e55f26dc4b6622b6f6
b200b8d7eb9b0c272cdfcafbe5cb2ae81d950fbf6231a690e5a0f12bbff23dcce4952502d36f620b
eb0ceef5b5b3c331b044ae9bb539469ef416a036bf73088a4a55a353f7202ccbf9162be35c971b20
be22ac24323c21f17466a35325a565d0eead04d65e7b38aa8dca94e60183c9aef71068af00f99258
439b7625cfbb6c1bd241ae2592e18e693fdc9cc54fe77c7319a693080b43fef8be3e57cd762db186
830d8d8ab09f0e2a189c5e5e858248da1860ff178bfa37ece234aac0837ad2aa30d7e0ce407ffb13
4c297dcb6053e1e1b8499729e4db95bf46432a3bf2187c82f839704daa4ddc8ea75f9938b63a2aa0
454cb8aa533f33a95633355cd6befa784ed5fe2ed81cf217f787450f753928549f8c1b61fd16e513
d6189fe22ebc6e48417e4af5d9a8b77e5ebcca2b7e6065c5b9b7c43e561290160e93ae86dfe69da8
5f0f02a045a2e05f027326d2ac83c97cf9cd42b8541dde07155bf5c4403f6b51514897b9d006eff7
08397944bab2811f9d4d94ccbeb9805d102dac6f3843bb7040b1371814ca26ee61cda1166464f655
e6bf27ae7faf45ddcbf9a60fa038dd63704fcb65218303169bd47b0e049f1a8fef82f2522e9e9d1f
e827ba30b6390dfcd4b42c97410032868096bcd5eb6dfeb4c9ca5cbe6f1a02e0cb605890e219b528
36413a09cae9c46a65dfdb50237c0c90219e39458ba5f6f528ea26f0e8cc5d0da64312ede860e647
344778f113a9eb7491aa5c98468ef12f09311a9214b5a662cfa464418e5a9b506526fba141f7955e
42ed388b9e88ef6466dc89009fb0e8927bf0745c8ddde8524e33923495ddf858340a962205c4ec0f
fe45c895653a12135c93c357da97b481af2e7981cd4bd4e18a8729e6f2a129d802ffd63105e63598
270d74e40e46cabe6109836e68c40a2445574b42350379674ce181f326855510514bea233602f556
c74db5c25e19381f1af28c19f44046ac6ae79dcfdd5dad8e158b7e09088db050a249008e668a60e4
8d7d08cd10e1f4062558adc9aaff058a73e6289a9e8d73ac816f2feaf8697d97df54da0e7d489e90
d3a5c170cb786e4714a2a754af7b0f9d464d4a8167fe64f1efff495c024497dcf38df1c8400627ef
f2b590e06a4001962b714509dc23692b2e5e1dbeb643adf366a07e99fdcb5dfcde007250a2f51440
0907cda97782a834590c93d087a68e0389e143d2a084a8b1cbcf5d8fd6d4d3fc23db33c3de9480ea
821323d9b1c6761455c71b35b79dbf7d39c073b6bc9ba93f993c5459633c0f6520a211e598e2e6c3
34e53f14a13f154d9675c8fa20302b7c854a38bb2c9b28e62979512ac5f4954c78709848f1bba864
f0affb0bfe27e12d9940ced6c6f5a2ec91ab7e26181b3cdc7e976c7b8dfa4819fee7836ba4d28dd6
8924c9e50137690e36c650359656a159229bbb2736e3d63d6b5d5673e154bd6cd2005fb1a84dd04c
2ad7bb8716407be7927e607ad63121900695491c4003ed666b178d75383e7e7b10a00a94449b81fa
d778ded0f4f161b9e670c724161107ab2602de564206e06df87b090302ab33253d8b0cb2b8c8e1be
5dff8d267c1b33af04e43dfeb9a9a645f0670821e1801abc83555ebb749cf67b1228f087f1db85bc
4c9ee714f917f0e303e9077a560f512c93bbd850ef1d7d9af6fbdf7cab06def5028c2d229fc9544f
14eb64677ac3b8b7f18553807f3b59953e62b16b54bc69033f134c7d51bb37c1cb2797d6813fc4db
d8cbdbea3576725696fe39fc9b106f4afc8b1b6410751dc2fa92d446cddeff70bca9eef454ffd6b1
c762b53c2cf8e90b4b3e4bfbf1c9da1e49dc485fc7a9844564c41d205773a6dcabf2fc9d3a52352f
c009e638712c24c01a80763376dffad57f9f4d3b708acac3ef70ea9c8232562445c6eea48a09a9cf
996ffd9892295ae6512297289395e1836675b1adc596afe61d58139d57d162164d8fe55b6ca5c9e0
9ad0ee0d94e5991bdf24ff46f4c57d8f0adcd1a93f0a96f21444602412d46b82aeaf3ce673733c04
4578e3eb871a048cb5ff2460382bb1139e6b39cdd4284e4f50b86f1e5f84bde4d499daa773e37be2
c29375f0b54b33bc64f7d028fe6aee110847a6dae454bc17c743dcc29115be83641b98e422effd74
ecc86e6b8f587ece0a247deb5966002a0dbcfaa2e03972c3024bf0e41538d258df0069a682b79e18
4126628807dbba4058de10a917f3707ded4a7f7d3842b63da9fb0c4c279b3056b8584d1b35f95308
b8f2ac0c97efd53c0c123d64dd18fae6a978d58f7e2e820e3ec598ab90fe77eeeae7064c4029f7d1
4c24049d92388d98c6fef3845124c0abe08892703a2b2ace5b3867b29c493af0180a1f2bbc710306
9e0397c836c0c83715d98a6a5cce5e134a57b49cc30a180c160c7e9b9318d1d25a4d10ceb8b7c48a
a869deca259f299ede094a2eddcfa323db356e81aa57d5ea17b8964d4c6e632727a266259354b25a
676f4be5132ef1e07f82d19a7caa6762e616ec50c76a08338677260aea24e826c6c47729a6ce2408
cf5b2b732b698c34d56f63030fa6d6ce60f96d04a3bb92512e4c81f7dd02bbbe917ae87427fc32f4
621ecaddd222e83234d7f52c4b6207000a640551861bee98db78a9873fcccec305de2d1eeab5780a
063d53da9d062f1fb95bdf17a92157c7fb9d3f1165f2e28a4dc509e3aa22ac83679839b5abfee359
76784cf05e977c212c2b56d7efa15ee6769ba75bb8a18a54a784a4cd9c5a518751cb06f6bc48c707
93d33662da8ebda533941d0bb1a4aa90a7d317fe9791606c7d7936ae3e577bf23f533de93df6e4f8
d94d885f8449d795c799cfc0ac392f145d0423f0d9b2a773bd4cb6ba539dd64ed2b5198fc29b1e2f
07b8858d8ee6b5f1964358402e1a5ce80d46e0a3b9d6d768a50b10c0dd8f1de3c3233ced98b90e07
60c36cc4fc44502a9e02913d74186e837a7dfd8aa33b7ab4028e8fdc3199addbf79164707ca47f4a
14eeb39c13042567efc4d295d15789f71a861210374c11292b8d2b70dd96199421a14166112bb59b
703f38a1cf1728440625a041fbc0ee85a05044227df4ac8b471401e20ae061b89594238909c712bd
74d3ceaabf8b02f46228b04110a154a2599c8789fd02cd4029b95ec9b937eb4bee57e359b293d85b
c62ba0e1420c21431ce5f7c57e3f554089c12bd3ffd851f87295f364bcf75300c995e95e1c5e2da5
484db40d0c1eb30d9e2095bfcee85e708c9f553b839f54e3829c6bf54d1119664b7698b60df3b298
4815868158c6ec30cc3a075b083af252ea23982f5bf63bc84c965a5b850ca929d27db0736d6200cf
10047e9baf1cf9564744df6708a5950744edd26e5392c5c68878814cb73f702d263a4c50087e02c1
5b4cf01cfdb5ade15d6fe5e56618c723ff63aac491444adf7fe5da8b96c60c4ad92d8e3abc0d973a
641f91962dfc0c83093d3e12efa2c11666f71b1037ee16fd804fd851cd21f5549678debb562043a6
ff888117721985a17523815870197417466074691b48f5d39c7042a2e5ec8b25c42ab707345a1482
cf99a7af9ff8b000f262452f8be45b4808898cb2fd4d4f0a9e09097a5b13ed581e789352235a6fcd
18b08749ef888d0f6572d41039175f1e5e1b91d9cc9974c02a34d473d8b9bc938fea4ee0fa3c0c52
f2ad2f6a7e7ed7d468319a322f58190c2f6a3ccb097acf499cebf9e1b7d224ffa0d966ddef91c17b
878986884ed9895535ef097951d505801d6710a63ac5df3680efefb0d4fb0e1182faaa4749627fc3
b56d4007c9f3190e34554dedc9b50a1b0d8c505c51b0d51d8fbbefc79c63468310fca0fbaa0c22b3
a9bc77fbb222554cd1bd1ee718db587e422dffd3b1f6e8462c95bf02311c264391749af03a66ab25
c3e94fb39b8c268c0a75866d7a56ec04f7bc0554bdff3f41bc56401dbcd4da8e5f60d20595d97a60
a365a0ac98b4db092e5e75100f3eb30ce5510407c1d6d22f62d2a68813dfebfd7a47bf886c4087b1
b742db62216e1c2fc8cde3ea0078fecf3272e1a0c3bceb92d873b40044c60a727c2d8b287e344fb2
74268043efa4de8b4d926891ee3211570b87e8c92a1cea627a4cfa65b269168254ce8635df813c11
ed2a69c330902d52b058aee76885a5af5daf5c9819d71f57bdad177670198c5891bcd02cebd2a8af
a8140d210e63042cb95d8bd5a8d3bc1a2de89b7dc543bd18f426e73d78f4f3e6bd3e39aeef95b2c6
7952b8a9887780a24b66399c80b569540f5c00f5e5048a00364a1685ac6d5be0387d3368d0b5dd93
46d7c5aa3749672bc52bc93866a19dad00511b8f15d7cd783e13bfa358fc3a5f04b46ebd8e215ab2
7abba7ea4dd9297cf6ed1dddfa1623a618292ad79eba9c5ebb984842728f8369c7c0499e79dde68a
2f38d04d533913ea3194f8f8cea95ca93d3a6485cd210771ac77cd4a9b7703426913a6a2af9b2a64
6b350cad26c5a075080058afa14ddd90eeac7b4613a5fae4a40e315955b3da5a9ad82a0b6922c4cd
49cfcbf5a562ff69582f493d23a1c347a6a09abf9ae1b46a43b56acb60742157afdf778c6a2aebba
4075354f3de36c99d3accd8e0db1d98a9596b75cda611a3186236cc03a64c910f2d28be0d9c6245d
1ae7154c977cd47858f64710fb968e95e57f4d223a456f52f67232390e0b71e66d4e01bcf31e4d58
6194c5acdd4094b95fc60095f2bd717084a348ef35fcbf3af8c3e34b72d655a75683bc382db899b2
78c94a209cd97b7213264648c9bc27353467bd459290f58565eda9366364726b44e87c8087af5225
e141e2acbf6db535eada644bbb4a0714b3c74b56bfcb27978a2bc15d3a6b1506d2628e26e01c455e
be4966a1dfc5efbe1889fcc08066ac7b978eaa774254419872de68e24f59e6479ac09fcba3959c08
778e18f118a460d2c109a8580bfaff169848ee5a3cc2b1749fa5a55b1f7314602cbefdb8a89d5035
d1af3db654be98972657b6daae5c4b6d807c1c84ca3070259952fee6795102cd255f8c1245c815f7
7aca35fafe43a8b0138d9e3b1fb6fe9214557d5f428243efcfdbd255dcd5c1afb9912976be3db257
70b825ffff97e946c255f1e918ebda192f7a569049a8392b50dd406e1e49e2774f43bbac743fd6d8
58ccb5c38a3290a05771da57420af226816b7fed0322eb8cc0d41b19f005dffd949cb5acd7b2526e
0a12859b57c26eec2ac9c3eb559043c5e3b8041152e23e666a0cd2452ac19da96112ef4909d909b6
c08ca669f1be80c0b053ca0a44f5e6e96d4980ad742233fa8bd65dfcb15f7b71f702479341da6955
a21d7e68f1c6df25b6621aaa9dd9b7df268cfd74998f5d01f4f9ec36bf8289e96fad550d3dc1e63b
43997492919399227370dacf564ab482a92774317f7439a5da0317c4d642817e6ba6b667a744d591
c79408d5c4fd3e582b77ee39c7c09fd5f404507b265caa11205c892850aacab32678cb6796c4e683
47f05547a2faf72655c519a8c6b2bbeeb9b64ec47ab8cf9148dbc387d05686f0aa9ef1e42bc88957
4dc16401c751277e35f250cd5c375cb91d5c6cb8aa62b50a139a2b140efe52bdceaa3c047a6224d4
a39abedd695afc5cc56e3be21b3adc53f7eed618c18f4fed0d5bda20610a8ff76c58c516fa796acb
8efd907922af50ff384db24a1a18a4e8a4c3ae9a1b94bd83c22ca18d6978167f1a32fcbc61cc9b7a
0cb8ad348fccde2bfe22c75dda04d74a526d6a687386b2316a8db7e6ceb279911741f09de98cdc5e
962689812d6987d757f9125f3a93ac854e64c63b986673ae057cd9e931ea1f2723e4a5a3e4ff481d
f9ece3bf43d149b072efb7769d90012806997a372e8d5e94c248335c6a14429b18167fff4d762460
800b96ebac5d06903976eceb2aab1e091f795c0c70ba73e2d044ff16ba41b7059f18aa0a0716a5f0
a6984c5798256e4f162acc3ddb774ac4cef3f8296f9f007aa56cef2374b532a8df46a07632b0c0af
89fe506c4b642442816eb701e49178c3ae7533cb5bbd25b9e27d2fdd7c914159fd6c9acf948682f4
d9c94f3cbd06fa1873c6322d7b61f6886aaa422d102bb592b4a33d43fa6696700e37f91ad44fd72e
6280c6932642ad2cb9287bd8467f614b877035c9f1561250b39e118be2584d77b748c75b53a8d890
7deb90087f9e27e288613ea00c6e69bc4caae2d9ea85b28d1f80fe9a52ea209dcb6a5dfb93c24c55
52e10dda2620d36d88831e2ac08b26fbcf5e77f6d7859212ac8999e7403060260fdfb16434b0b8e6
ed036f4b5d1cafe786b98f31a46fe252ad2e02afee6c9e98efabcd855622d38ed59cffe510539301
1858b92fcfb08e989f3ba47b23e5506999238f911b712b0a9c390905938e9637a6200528e150c301
4f2526475baeff489ecf70d546e301c8e2d1cb1963f9d58605c3da6fe8f33bed5690ae296449aacb
e8786c9c407b65e3bb8a24d243f71163c51c588b4c997f3ffbade3ae014191333a713e6a6f07de41
4fc1c4a731385dd7309e6a7d3fbac3c41e4a3792d19fe16546584c4b388cd552bb51f8d0c77e16bd
25b145f13d31f29b6c69d1d528d9415a5a3748f90b95874b45417fad6a6e52e859137f1b5c336296
ebc3ba703588a260666a923bcb699ce15d50fb61791fb686f48073ffbc32890f6eed3c3db90bb763
eac7df3b774fe4bad8b07ad10f02f10bad9db6eedce54a7d3536f40232ae6cc9c37dd86daa1d1c65
19e9c59f94363f75747d29011e236af0a7ea1fa3e0e4594f3233e537b6d950c7de2883c498258719
30d913c7602511fe285757d398859c6b086475105c2d93be9a2c70fd855a1d9bd74d21d09aea670f
8b21f10969a548dd21608cdee170590468b5ab552a7b68d71010a045a134af5eea814b8cce3a39d0
e160345f7c78e2b00959560387fb37e2691fbdd08eb63b5149ae18db4d03e911b7d74e25574e7083
ae71cc4ff596af7a6968bd903a0d013279a4c046589599da5cfe5b006b59ccfb166b1e358811a5a4
8d373733576608b3268536f8cecfec4df0db7c7fbb42a224e19bc9305f80e401955947d11293f630
d84dc03433df1bb1f8f934c76088449b85124854b31f8451b9631f854ac7d4f97f44a07810fa07a6
9a9130891e2eda16668b2b0bc451ae584736783eea73711cf874a8f911189491b7cdc6b71b213696
5478e682538758f333492941a05c18c29e6a3613727f40808ba68c44e1cb26266f000cda8e670804
3f2349acf008a668485236a612d1986a0e72b93fd123535b8a9286aae24d883016101177879a7a89
aa340f7c14362c55fc1bad5263cc63871064050ada528c5b2203aa033a326a1a1dc3a4c84b1f625d
afa13fd99e6fc227020eb7aa15aaa5768e041dbe4d53cfbf68612a38be10b6cdc6a3178df92f7977
830a4317755141a9107d7ccf5374e0f56cd805cc52be1fdb7ff77893b25d14314543ef7461edd7b2
e6ab132fa406a9a240b6bbfc7e583d752200b86b17f828e206aa2864417b67df91470ac7fd2dbbc0
0976dbe08638879af7d6f5f60620f30d6cefe404502f146f75a61ed4b2bd3a25d4bb5ed2e012cebb
d63f16d53b720058c6488ad7c8a49b377b8825ad34578633783da7f9ddc5dcdf4f46779ad5e66f41
79832e8ad0cdccfbed7882e304d446bdfaa8db577b412ecb1b89c039ceaabf4a72e99d77613df93e
9a62ecc781a869eb720e8fa435d7ace60f8895845d28078e236ed4efa0c79b8cbcf241d9bddffea7
764f42335970b94a20e378ea9dc7c6989ff62a21f9230f8a2e7284e91d5238dd0daf4ab5c6dfb68f
5fa1278338210625c643b70b48d4d83cb651ae2bda9ef5594078b21f7fac8def026c8092ed2a0797
1713dc9eec90d6c9938fbfed591bda06131da4e34f3351fde78f3a5a80c230478f6c344cb1d68563
efdd1d4cbe4e7c58123d1bffd1d50e74b071bcc4a6838456d726832479bedc90e1980964096dc6d9
37129ae1252a5e430df6ca1ef53cde48d812c6c0654a3ee78bbcadbb98e43f9cfa780df2c97b33ae
796fdcad7c6fc99215b2f51b70fc7c273f497d10f921598c501de90b0f1f7ab4dd4905912df63031
883682af79cfffa471f39fcb0a0b67850ddfee1f462f7af73230c78a1f9cbbf964e55ed05ebf7f45
100c178ba522abc4802e9a88592a14d13618f4b4ec45b08920fcc996710c4ac53f53a8fb56d29e28
3b3616313e30b9550677632d382cedc60cd9b2bbb4f0a10e9fd8f1118f0b544e961c7b4eeba7bab1
f56b0c3a4d8427fc436851b74639cf7e9ccfa03447c392a4ea790ce1c6e7ef0745fe0b251a6983cc
0fab41c165b0fdbf459cdff616cd879b7af0f72a8c202eca2edc8cdc4fd53f8b7166c83b7279c45a
c6ff02cb113d8be585c68e31e839ffcf726f30d14fe20b8d0ab3159fb3e3806e2ecb05ef08abbf15
f566c7989fc75b5e6745ede7dd95d5a3a8c822287d2389de1e2272f35f03f63e3a2a63dcc16827cd
7fd94a3e4f133596c0ce6b6ef2d7e75ada5cc6cf02e0bccfe8ec9ee6a2221f78d6d06b07fec61a4a
7468ccfb85a34c129ca95a0aced78042495495e7f6ad60161d89465aaf94a4d62d465314afbb14f4
cf8f2d0684a56b9482b165a4c28e82fd331a79166686a7c725dc85334206a911400894cc4ee1d3eb
06ee47d2a6dbf306685631d937d3a965a187126c7f680385e08109c62c997d8e1fc9139518bb890d
4180add034eb30190e90c10b8827ce6594122a8135ea1caf0120fe04179ad53a4d2b14747dcf6f5f
db5775904dfcfd4d43dde40aa02ba4d928905862bc5e9796b7d0c414514c056dd60b6d685ff804e9
1a917d21cdb1ca4bad5fd9b54c75ee1623d6c9296640661ae271e91c7dd128be146fd5ed8dc47e18
949d149d70c4ee5a55953c39c5d42b16a1e21142c60d1c04817d75528f365e8640bc5e17cf897d96
ecd4cc77b68d88614dece234031c2d9082aae539264fe2f7800ffaa929adcdb500b4a725b4bcd44b
9535c3172564c9943817d8f74e076fdd1c1f8a56af4b0ffde7894a
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
 HBW_to_Column <Virtual>  0
 HBW_to_Row <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20 0x0 MC201 C300 1"

// Rung VGR_Copy_State_F#2
// Offset 10
NOP

// Rung VGR_Copy_State_F#3
// Offset 11
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#4
// Offset 28
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#5
// Offset 32
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#6
// Offset 35
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#7
// Offset 52
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#8
// Offset 56
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#9
// Offset 59
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#10
// Offset 76
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#11
// Offset 80
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#12
// Offset 83
NOP

// Rung VGR_Copy_State_F#13
// Offset 84
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#14
// Offset 86
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#15
// Offset 88
NOP

// Rung VGR_Copy_State_F#16
// Offset 89
RET

// Rung VGR_Copy_State_F#17
// Offset 90
NOP

// Rung VGR_Copy_State_F#18
// Offset 91
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#19
// Offset 136
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#20
// Offset 169
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#21
// Offset 176
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC4 C4 27 0x0 X6 MI7 4 0x0 MHR5 N300 1 0x0 MC1 C301 3"

// Rung HBW_Copy_State_F#2
// Offset 16
STR C28
OUT Y39

// Rung HBW_Copy_State_F#3
// Offset 18
STR C29
OUT Y40

// Rung HBW_Copy_State_F#4
// Offset 20
STR C30
OUT Y41

// Rung HBW_Copy_State_F#5
// Offset 22
RET

// Rung HBW_Copy_State_F#6
// Offset 23
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#7
// Offset 76
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#8
// Offset 117
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#9
// Offset 124
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_PWM_On#6
// Offset 62
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_PWM_On#7
// Offset 64
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15 0x0 0 N200 10"

// Rung HBW_Reset_Flags#2
// Offset 12
NOP

// Rung HBW_Reset_Flags#3
// Offset 13
NOP

// Rung HBW_Reset_Flags#4
// Offset 14
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block HBW_to_Column
$LGCMOD HBW_to_Column

// Rung HBW_to_Column#1
// Offset 0
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Column#2
// Offset 9
STRN C210
ANDGE N200 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_to_Column#3
// Offset 15
STRLE N200 $HBW_Encoder_X.Acc
SET C210

// Rung HBW_to_Column#4
// Offset 20
NOP

// Rung HBW_to_Column#5
// Offset 21
RET

// End of Code Block HBW_to_Column
$LGCEND HBW_to_Column

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
ANDN C602
ANDN C605
ANDN C600
SET C601

// Rung VGR_SLD_pickup#10
// Offset 76
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 79
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 83
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 89
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 95
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 105
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
ANDN C604
ANDN C605
ANDN C600
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 114
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 122
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 134
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 138
STR C605
AND X26
SET C600
RST C605

// Rung VGR_SLD_pickup#20
// Offset 142
NOP

// Rung VGR_SLD_pickup#21
// Offset 143
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block HBW_to_Row
$LGCMOD HBW_to_Row

// Rung HBW_to_Row#1
// Offset 0
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Row#2
// Offset 9
STRLE $HBW_Encoder_Z.Acc N200
ANDN C210
OUT Y4

// Rung HBW_to_Row#3
// Offset 15
STRGE $HBW_Encoder_Z.Acc N200
SET C210

// Rung HBW_to_Row#4
// Offset 20
RET

// End of Code Block HBW_to_Row
$LGCEND HBW_to_Row

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 870
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 870
ANDLE $VGR_Encoder_X.Acc 900
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung $tFirstScan#4
// Offset 41
STR ST1
INIT "3 MC100 MC100 1 MC502 MC502 1 MC808 MC808 1 MC300 MC300 1 MHR0 MHR10 0 N1 N799 0"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#11
// Offset 66
STR C31
OR C1701
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 76
STR C32
OR C1700
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 86
STR C33
OR C1702
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 96
STR C34
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#15
// Offset 105
STR C35
OR C704
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 115
STR C36
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#17
// Offset 124
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#18
// Offset 133
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 142
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 151
NOP

// Rung VGR_Program#21
// Offset 152
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#22
// Offset 154
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 775 N1007 1 805 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#23
// Offset 174
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300
COPY 0x1 "4 0x0 0 MC201 1"

// Rung VGR_Program#24
// Offset 189
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#25
// Offset 191
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#26
// Offset 212
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700
SET C701

// Rung VGR_Program#27
// Offset 223
SG VGR_Program.S2

// Rung VGR_Program#28
// Offset 225
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#29
// Offset 237
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C35
RST C1701

// Rung VGR_Program#30
// Offset 248
SG VGR_Program.S3

// Rung VGR_Program#31
// Offset 250
STR ST1
ANDN C500
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#32
// Offset 263
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
SET C704

// Rung VGR_Program#33
// Offset 274
SG VGR_Program.S4

// Rung VGR_Program#34
// Offset 276
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#35
// Offset 288
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
SET C35

// Rung VGR_Program#36
// Offset 299
SG VGR_Program.S5

// Rung VGR_Program#37
// Offset 301
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#38
// Offset 311
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#39
// Offset 320
SG VGR_Program.S6

// Rung VGR_Program#40
// Offset 322
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 300 N1007 1 330 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#41
// Offset 343
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#42
// Offset 349
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#43
// Offset 360
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C704

// Rung VGR_Program#44
// Offset 370
SG VGR_Program.S8

// Rung VGR_Program#45
// Offset 372
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#46
// Offset 393
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#47
// Offset 399
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#48
// Offset 409
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36

// Rung VGR_Program#49
// Offset 419
SG VGR_Program.S9

// Rung VGR_Program#50
// Offset 421
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#51
// Offset 441
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#52
// Offset 451
SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 453
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#54
// Offset 473
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#55
// Offset 483
SG VGR_Program.S11

// Rung VGR_Program#56
// Offset 485
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#57
// Offset 497
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#58
// Offset 507
SG VGR_Program.S20

// Rung VGR_Program#59
// Offset 509
NOP

// Rung VGR_Program#60
// Offset 510
NOP

// Rung VGR_Program#61
// Offset 511
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#62
// Offset 521
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 529
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#64
// Offset 554
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#65
// Offset 571
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#66
// Offset 575
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#67
// Offset 579
NOP

// Rung VGR_Program#68
// Offset 580
SG VGR_Program.S100

// Rung VGR_Program#69
// Offset 582
NOP

// Rung VGR_Program#70
// Offset 583
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 V1600
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
DUPBOOL
AND ST1
RST C900
POPBOOL
DUPBOOL
AND C840
JMP MPO_Program.S6
POPBOOL
ANDN C840
JMP MPO_Program.S9

// Rung MPO_Program#42
// Offset 185
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 187
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 189
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#45
// Offset 193
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 195
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 197
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 199
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 203
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 205
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 207
OUT Y47

// Rung MPO_Program#52
// Offset 208
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 210
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// Rung SLD_Program#6
// Offset 30
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 32
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 34
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 36
OUT Y30

// Rung SLD_Program#10
// Offset 37
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 39
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 43
STR C1704
TMR T11 1500

// Rung SLD_Program#13
// Offset 46
STR T11.Done
JMP SLD_Program.S2
RST C1703
RST C1704
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#14
// Offset 56
SG SLD_Program.S2

// Rung SLD_Program#15
// Offset 58
TMRDOWN T12 400

// Rung SLD_Program#16
// Offset 60
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#17
// Offset 70
STR T12.Done
ANDGE V3201 19000
ANDLE V3201 21500
SET C1707

// Rung SLD_Program#18
// Offset 80
STR T12.Done
ANDGE V3201 7000
ANDLE V3201 18000
SET C1708

// Rung SLD_Program#19
// Offset 90
STR T12.Done
ANDGE V3201 22000
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#20
// Offset 100
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#21
// Offset 104
SG SLD_Program.S3

// Rung SLD_Program#22
// Offset 106
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#23
// Offset 110
STRN X36
SET C1705

// Rung SLD_Program#24
// Offset 112
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 116
STR C1706
AND C1708
OUT Y32
SET C1701

// Rung SLD_Program#26
// Offset 120
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#27
// Offset 124
STR T16.Done
OUT Y33
SET C1700

// Rung SLD_Program#28
// Offset 127
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#29
// Offset 131
STR T17.Done
OUT Y34
SET C1702

// Rung SLD_Program#30
// Offset 134
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#31
// Offset 139
STR T13.Done
JMP SLD_Program.S4
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR C10
EXIT

// Rung HBW_Program#3
// Offset 10
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#4
// Offset 18
NOP

// Rung HBW_Program#5
// Offset 19
NOP

// Rung HBW_Program#6
// Offset 20
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#7
// Offset 22
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#8
// Offset 25
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 27
STR X11
SET C110

// Rung HBW_Program#10
// Offset 29
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 32
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 35
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 38
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 41
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#15
// Offset 44
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#16
// Offset 46
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#17
// Offset 49
STRNE MHR1 0
ANDNE MHR2 0
AND C301
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#18
// Offset 68
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#19
// Offset 73
STR ST1
ANDNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#20
// Offset 91
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 MHR2 1 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#21
// Offset 116
SG HBW_Program.S0

// Rung HBW_Program#22
// Offset 118
STRN C100
AND ST2
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#23
// Offset 131
STRGE N101 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_Program#24
// Offset 136
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#25
// Offset 141
STR C100
JMP HBW_Program.S1
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#26
// Offset 150
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#27
// Offset 152
STRN C100
AND ST2
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#28
// Offset 165
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#29
// Offset 170
STRGE $HBW_Encoder_Z.Acc N102
SET C100

// Rung HBW_Program#30
// Offset 175
STR C100
JMP HBW_Program.S2
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#31
// Offset 184
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#32
// Offset 186
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#33
// Offset 199
STR X11
AND C102
JMP HBW_Program.S3
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#34
// Offset 209
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#35
// Offset 211
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#36
// Offset 222
STR C103
JMP HBW_Program.S4
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#37
// Offset 231
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#38
// Offset 233
STR X2
STRN X2
ANDN T14.Done
ORSTR
OUT Y48

// Rung HBW_Program#39
// Offset 238
STRN X2
TMR T14 100

// Rung HBW_Program#40
// Offset 241
#BEGIN FMT_COMMENT 
"Non factory 4.0 workflow"
#END

STRN C301
AND T14.Done
AND ST2
SET C300

// Rung HBW_Program#41
// Offset 245
STR T14.Done
RST C301
COPY 0x1 "4 0x0 0 MC1 1 0x0 1 MC100 1"

// Rung HBW_Program#42
// Offset 253
STRN X2
AND C302
JMP HBW_Program.S5

// Rung HBW_Program#43
// Offset 256
STRN X2
AND C303
JMP HBW_Program.S10

// Rung HBW_Program#44
// Offset 259
SG HBW_Program.S10

// Rung HBW_Program#45
// Offset 261
NOP

// Rung HBW_Program#46
// Offset 262
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#47
// Offset 264
STR X1
ANDN C300
STR X1
AND C302
ORSTR
OUT Y49

// Rung HBW_Program#48
// Offset 270
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#49
// Offset 272
NOP

// Rung HBW_Program#50
// Offset 273
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#51
// Offset 275
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#52
// Offset 286
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#53
// Offset 289
NOP

// Rung HBW_Program#54
// Offset 290
NOP

// Rung HBW_Program#55
// Offset 291
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#56
// Offset 293
STRN C100
OUT Y50

// Rung HBW_Program#57
// Offset 295
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#58
// Offset 300
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#59
// Offset 302
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#60
// Offset 304
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#61
// Offset 306
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#62
// Offset 323
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#63
// Offset 328
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#64
// Offset 333
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#65
// Offset 342
SG HBW_Program.S9

// Rung HBW_Program#66
// Offset 344
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#67
// Offset 356
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#68
// Offset 366
SG HBW_Program.S100

// Rung HBW_Program#69
// Offset 368
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#70
// Offset 371
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#71
// Offset 374
SG HBW_Program.S101

// Rung HBW_Program#72
// Offset 376
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#73
// Offset 393
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#74
// Offset 396
SG HBW_Program.S102

// Rung HBW_Program#75
// Offset 398
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#76
// Offset 415
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#77
// Offset 418
SG HBW_Program.S103

// Rung HBW_Program#78
// Offset 420
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#79
// Offset 437
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#80
// Offset 439
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#81
// Offset 444
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#82
// Offset 447
SG HBW_Program.S104

// Rung HBW_Program#83
// Offset 449
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#84
// Offset 466
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#85
// Offset 469
SG HBW_Program.S105

// Rung HBW_Program#86
// Offset 471
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#87
// Offset 488
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#88
// Offset 490
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#89
// Offset 495
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#90
// Offset 498
SG HBW_Program.S106

// Rung HBW_Program#91
// Offset 500
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#92
// Offset 516
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#93
// Offset 519
SG HBW_Program.S107

// Rung HBW_Program#94
// Offset 521
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#95
// Offset 537
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#96
// Offset 540
NOP

// Rung HBW_Program#97
// Offset 541
SG HBW_Program.S98

// Rung HBW_Program#98
// Offset 543
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C301","","","Factory 4.0 Task1 HBW"
"C302","","","Factory 4.0 Task2 HBW"
"C303","","","Factory 4.0 Task3 HBW"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C704","","","Deliver Puck Train Depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"D0","True","",""
"D1","MC200","",""
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"HBW_Program.S0","","","Go to HBW column"
"HBW_Program.S1","","","Go to HBW row"
"HBW_Program.S7","","","Unload sequence go to column"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

