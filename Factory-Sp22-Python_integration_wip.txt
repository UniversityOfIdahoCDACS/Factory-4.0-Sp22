// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jeffr\Documents\Robotics_I\Repos\Factory-4.0-Sp22\Factory-Sp22-Python_integration_wip.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
8aacd5c7115db3b83dae0c9135bed45ed546aa94d80a89d6224bfdc9340347971c4921c5b91fc3b9
faf6614ea9d5373ded418ececadfb6c5ccdca676a0cde472c8e7f2b0ff700afaa6de6329756b067d
34accaea4fd8a49b76fc6ad72bce045a64b9a2398d88e2686a7ae121e0ebd5bfd9a79f3c25c537d1
8f7c218636366108c04774348b05a84568d9cd28d30fd76180e561d3737d89543ec49d5254ba22a8
a7f3ea98b675314f0eb709fc0775e3b99601339970e430f1aa64a93573464469a27ded99b148bfb9
c8478740542f544525f7e651784e95ba9778264559adc632fa0a3c45745fe5ff6e879056299ebc0b
3e8047daede2e58593fd7d0730eae4b05ffd249a92bba9d141ae05d34e556a99f50cd4a91a8e57ae
395c0cdd6d7f7eccb1e0d7bd60bb1fbaed179d5ee36970d3c1802edb06a89915f52057fc11e6a223
d09e57690b50412993f39eba634971851957b1f300f9bff2efd57943dc9d2ec8f10ecb0bf2bc79a4
4a57ec89e25bb22fa3532cb355d102172411a492e91bd42ad5c3fcbe8f991361cceaed5c4279f063
5ba674a42d5963e2bebc7dd184c5673cabc6fd84ca7b6d2f5c875bdaabf0b14c473d7284eb78d94c
683e1b5b9c4623bbe3f6cb8f77eb5a7cdf235e503cf66b44d3d2cbe94c9e1d639c4010cb43d8993f
e18467a131054a206e490f48435f3f5e702fe0e89979e54fc01e046f0749d06c9c96dffab5a19ea5
e616a67a88e5c70c3868fe8875e01bb82900df7e1d0cb35c6ad653f7aefe70712566aa6be59268e7
a3a9349a2996161091531925cd21c67b5f4b33a331c00f28ed3a4a47c162e4a48dc6eec97cbcc70e
96d632570048e4d18df86aaca9e6593eadc02c0772f9f0a037efb63eac264370c5ae0f09ef9f8ce5
008916a1fa542d61a981178641ff64164fe1ca726e106f7b6e5ab7c11c10ef548f5fae308f56ec65
41b3b607ee5a2777b3bfc52841ad353ddb8f04e68ddfe83939a77b5205f45fa28b95f3d6752291f5
56b6d3557d5add03458558b5d71c64da144da72beaf15a3cdb25b89d5288c923e8e636bc841c59dd
0d2caeb5893356d3bb9388a6b1751acfc33437c4fd72c8efa540f9a6893c47d28a6d6b19760bfae9
90aa0d1d7c74e1a077b44da7ec3ad7c25e44a9b1c4527fb94a07ff005a13ebd9e2aab9f546f302ab
7f6583bb3df67363e77408dc23ce13b187992b22332815cef2fae97203f35eb218aa26befe92000a
b0443dc793643ab11e38ca4e4473982faa9c479ca1cd02633eaf23528fd60bacb59b3dbe6eb5d020
9e3eb4f694541814ac86d8bf45cafbfa5a0665e2d8189e04a5caaf47b2013e33f41b68b03b95645a
69780df43b455232714e6a9bee57cf87bf8a225e8c8be19208e83cbc1dba260ad213962f1ba4ed66
7f17f629f5e4634038ec723963c9c13c38893556b1f3b032e7236b26b89ca7a58825b8b741edbada
e131f55f73473bf6dfdf3d069952d98afee1e96a3442c68cb50def6b0fccb6b4c77e6f27e2731516
f49018a2547be4f947408217b1c11fd19dffcfbb45a9c176e6033067927d3fbeaba5df7266fc390a
fe42e4d4194828e3c1a72d7f21f4a790bdf7ec9c496c0b02cdcb26b0d2da8b1d2e62df522fa6628d
f92afc89c3607657933f6ea5653ae577af46163cfe36980bb91f054ca6c9e98d10a46bec6d75f964
b63a5ae8a5a1bb977b671ac857fae3c5b7cbb233df58617ff8fe8f1971e4cd024e1a337979598968
d5cb08dd4225888d4d598ceacb11823014341ed9523401757cd68eaf5d991e2a419a6eff0bf0b09c
128ef91300264e60c4577466984093b111d022b3edfada7dbf5241670f7eda496a78865eed33c71f
d84db2464154785eb0a07277d85e8f83af1f27ae49738f09b5e306463ddb6972b2449c07e54a95e3
8e131ed604d23deb569cd3e21608392f0e565fe67b0db262c87ea420702456b7b25d83afa92ff5e2
1829085cf1ba09820783f2eda6c7ae3ac8928cc67c47795aabc6b00f1fff88440b92b9cf7af4144a
a10edd436c2c55df6f9fba15ae8dcdea0611741a92d82fc28e1d5e3bbfe6c7a6dec71b331204118a
0755f3c67680d6e44cdcdc01065c478b76d74341296c4958ecb22b272d49667b2a971a9ff649dfeb
4f5f6ad371569f4f19430dc08a8a2e5a6b6d741655a45c7c295cb175d2aad6bf0a15768779a93ffb
6b090afbf39c4c7db3e72409751c913a5cb306bed226d557ef61a9f82e399e2b7bb10aa2b1a2e320
9e7e153b2debae01f15dcd79c1a945b67481d7109c4bd11a6d4361e4246858f5399e74c95259fa22
c575020c40c23156a5b9f7bbe7e45404a079badbc985c794bf6edeeba4c8b2178ed1d1706828a670
11f5c128d1951f167945cd8672f0797dad8a3cab8d69fd872f84f37fea74370127462203879206c0
5c6e0f4cc68d2abbf50e46ea66feffc53d983203123e093251eb76d61176311416b4b0988ec9b566
6c9511026bcccbc1ffffaaad38dcd8d58bd3e19b1874d7f7515df5aeb9fd1f8a93fd365b8f1539ae
574d109585b9b93c240a245519f566956d996c992a2d0a81be88049adbc5a3eef2662d2c4543717c
cf89b25c8c2a454b8aa7e542566591d1577f8d0573e2e157ec0afe12ad0f13b5b73222543bddef0c
b9ff915a5bd7642e5fb105010a9e846f90526386a00af57c29ee289cb10067b15937a5e0be98f16d
2fb383e113e13e94ed1e8b0db7778f1b95513d1c2455559293d669153404ba05c77c1da139713890
3ac75aceb78053aecbc173a5dde68e2141e3b89ba5298ef2052fdb64978663a999c144fb941036bc
943a2404c21f439518371eb9a63f36a7850a2f75a430e8e00cf3aeae25dddbdfee84ddde5fff900c
5722f3221a30a2210712712b682e354bec4bd9f8ac9985c61825cec5885e016e1d387b5b0c089136
1f5b6a8b9d51e85a745c5d314599f1fca2d69457befc2be311bb0ad8c5c331ff352e5001346d3721
a1d3ce1e7b7cec33f24b1e6d26bf02131d3e394fd631cfe4ace4780fe7a59a8b204232a329083d99
ac95c3921f9e0466696ff28847261b745470f277e34ee7e4f92175c59e52153edfc7c4997dc96501
af0a6703358007fab84b9c76fa79ad4bd3536c75bc1ec4306e97a6d9568538cc4dc8bda94e9dfadb
b6faddf1f24ded893fc118bc8914a5344f90a784de16e615ad28cd42001c5debf3b43f58db872367
0d1509fd1e004f5b7c244fe1b28de53c272a4a8743bb6a1a7b09312045e2de0100632c155d7b62c2
ff7dbd8df39b67d2bb87a08c8f3090850073012f11eb8cac5f46d0058a5d15390a90e382e2169db6
7ec54e67b95434066c74686cb06cf302e83d6d4489ddfdef2008d4b28ce8d79a3ffdf7dede1bcd47
913bf1603558c588203c9cde63736d43de4808ad1ef4c68a4cd331f94f1ce3816b954c29a51d0751
cea4ef570834441179c1ca370447eaea6adda940fdeee52a4215e716e208ff726c3f40a147c061ef
635b43156bd0a32c5fdd653ecb18db2a3914cffdd116898a1396b3836b3c59670123af1ec66f465b
4317d6256ceece7a34b3aaf3da48774d6a613fe22e008e373b35547e013fd873b8d4929b57783f5a
6171405e708cfa0b764560e3c0b24a9a1e3562f35314263e920e39a90982ac82ff6b2b6f7d470e87
c9eb92a19408f0fd130c84526891abf34eaebeba8ce28fb759990f4f0be9d2764c3cab60664f4b7a
64ca349e76580c5a6d3e6d9444c033e19b5584736d75717f4043dfeebaec5172e642adb6da3df1f2
dcffb7dbafe0250e05679f24dac1818737c4059494cd4dc53aaced09d5be08b34f97fffe575177b4
738b8e000c017ba43d04800a44661f0035e724b3ffb6085f1ee1395150f8dec39756a5e2e0fb4f01
866b926effd7cd4067316f4929c3dc045302c9643a6cc5c3761c68a9f6c04c403ae5249db2e77d86
2324799bd84b064f8d9b5136d4273d97dca41ab72a645251e5ab2c154c1dc361960c07f9eadbc56b
8d27c0eebaecbbe80bbff2bbc59352af771f1eb2f48c329f026937af48979adb746b97e62225583c
6f88eb011e66b0c76a2d1f07a73b43d373f8981602a693e1b48b95ae1aec5f38dd41fb588c6c7151
0e245b65d2fbc6edcc3b7f372f2c24da51e7f1c313016f4763267bc03b1a574d006e96ac57c55a67
72e204d0509f8236db73352f1bac604f3cea1316e7539265a76d90f60c82a102c3727160060d2695
5ef85d9a234c45dfa644c0447cdf092a5e9f8923c890184802b2e1912272df3853a3f10cbf76a00a
d954ee2653ce07f8c89c9ccc274977f6369221cbf9792dc8a04ad625a1e07f58aeeaa39b864f6f8d
da5352a6aca2290e5c02b4d3a6e7f6271db289c17cd313a1d1a2027f10e6c734072a3fad887baf27
bb26058bff150b73a6912d165ee33b2b2df22e0bdd6e77329f1cf4abcef0969fb08fb156ff74d547
c74c527ce97ea1bb80a3895487181a830762c2737e37491e2f93a8e05d69d9b2dc77b5d602ee0a43
d543b66c5da65c8abeda1886224305291d8e8f7dd47fee8bec81810e32b6d7c8623c50297255b61f
c56b8d52cb9ab6a3747607cca3eda3f9ef13a75832ad6bf6ced84e8fb82be95620073a6b926ff50f
08fb5b42f27529f6b4a88f88d0aba2279f6de1dc4a23a1936c5c1453ebd39e73632ad4ac81eb379d
279087a88459ff4a26a9058891ca47a3080e2c47c2498b1e4d392cd0c297d7dc0ba46da5c2042a6b
185e8f1e887603218784cc76e0ae9b29157cc3695c889228ba564d11c35b1088c81a9112aa5f96bc
ff3c655f22cf174060c405fb0553cead2dae16e3f275d2d1409d03fc2dbda8d9cab511a745ae068f
580ed422c352be3014f767cd6d00899e08b18aac91932011913fddad5251e9d1c225398960c3efbf
2a8a55258c83f4aed4cae1140b36fe03a70a51c0db6c8d05f5cd7adcc80db298e1c1d503b51ece8b
cad071b8ad99d1ba827ba8437734e9b3b3107472c09f777397c37a955aa7bab8b821793721a36507
a4a2e3907dbc6af31f5b0a0f31cbf8036ca94d5e289e8c7a8fe5188842dfb5726a688b2c03948207
cc0304663aef9fc72ae5725fd7dab97587c651207cfc4e24b83c0039af459fed475a83797f006339
e227f31e5b49bfd5ab7e3558a57434b2a540a0edf5f30771649d312e685d86a259a9cb407f9d37a3
7b2bd0273839cd7d9c4284075053871ec572e851fb6c62a4f4bc87f2630caf83d149a92860bdc725
872ce086df72754bcf941d22d0d6fb6a40b9fb8812f246614442d52b6051bd11af2a0ef08e5f6cd5
47aff15c313a05abacf70c9d2e0588cc1f30ed75add4b45749ab777b4adb4f211c76cef2f12e775a
1d64ac548519d1cea283efb18ebaee63fab9e8a5149abf691256bf6ef1c9f492f8f8730435787d45
ec69329e3a7f5727e216c7824d83bba066b37f4bb857c4821aaf6dfff7b65e229dc321a8b46314bf
89d8f386cef99930be0e03509a15893d82d603853ffc9d2f798e9f1257fa91b7620473381868ff07
fde6e89cb0d7aec020a0325949432f066938c0abed3bcdbe71d0b26639ea44299bff39be1b9ec86b
451056b9a2c0c85cba440d732a288342a340150a7662d5c62b43904a2175441083aff894ed11ee98
7e1634d7be22a3be016e6abd077973c520e0ed8e4db9f92f25071d3b5a7116854e2a2cb6c9a882bf
ee44b060c0f40bae24480acb57671fd4d8931c18fa5d06534fb90de682c7c154500a0722cb1989f9
ee12cec696c26f72c612e2105ce8692a10734be0b70dc328d519e2e4104c165d0a7a2ca188ca189f
30f7e54b99f6c4a4aa1b26c4240b5fb4016c02dd3adb600b15d3c632f06368b11c36b9514aa96fef
d8712a4e614fd2e70d287f37d362472abf894a2dc674b08d32223ef3a496fdac791da344f96fc71e
e6d9007cac330dce12ef005b190304ac28c46f35caf3ea75452cf7422315829cb51f506c6c8b4d65
2237ed0dbbb513f8f6c4ca475ab47bfd4f3cdaa7d62053d6add73d3e1af20b87e1b00c37bc27ca92
5f7a5b3181e75a9af874d09a12061772d3b345d04e0120dc2352c70383cad383b70896fb8f9d1adb
ab204675283849be5dd82a1e9c9d260ef3e4bb4bdf00324942876d54255a4ccd3332d74ffee0a461
c18d88ae2fe7db6f2e860019558d56c43bd5b7bd9d251e523aeafeb3b655f49f335e3273255c9f5d
e3b395135385c00819ddd4b6d798eae14b40be6f454dd026afc863fba933cdadc9d3135da4341602
7fb77f410c23fb55e1334be61a938b656d38f799ed879206f282ca46c7193d436e1ab0585d0d07f6
34b7746faee7702fd52b23ad8f8f0fb8d7f5227773e154fbdb7537bdf6b4da3867d908a84bcfa765
1eed0d199850c7822dafd0820c887de1260d3a897d23ede4543fe5ed53e4ae49f69964b67a8bc89c
7588bbe7b420ed9f380df26250e81b5dd710f1cc03deb90186c99a6b4df08c46d231e51fc6d39bb5
bc5c6e1dd6c3760b135d41ed7528198a7369e84ea676352eddcfb333cb257e91ba47051f30a53ac7
49bc20f2937634002ec7d4a83e513a747a1b4595559b842e15d688b2a3a43999df2b3f3d38aa99d0
694eb4034caf24b11c885939348e95a6696a22845947f1ee81028206d53faeb1feab85fcc7ab6670
4be21e3330973325adcfc204df2cfbece313d903a50d7e5336aa9cb2ef93fe04a654d7aecd6ebf91
29da186aaca72d29663e03767a172b72dd466f07ef678d7d89191f64bf21af190d70ac4b34d5a17b
d2ec78b300590e452a43f0ad156d15aa328705a39ee4c2c34ac0066b31d8e0beffdf0c2d6a8f478a
05392295a39b6350311d94d980a9d7feb7b0bae4590b5425d81ae11f0e87f633e8a2907e961fc333
8810095f3f54dc06a6c0d02835afeaac50ddd98c8171e767faa8174da361aa6c7d8afbe8ac8e4b5e
e332726b957956b1c366d17f321c1ed1f91f66fd6a7b26ba2b4221e1249490c595f1dbdf7833993e
2c34d0cc231638c8b78af86dcb841c55943da6ce29547428be736fffd0f5f55d56328fa975d8a517
656319d7d8199ca04a05cb0eeb72493d51c6e3d3a89e53476e382ffb7000ad6dea6cdaca1707949e
fb0f13e553d33394d355b5a93324280170d08fd024ff0c6d8e0e169bfcaeb81fe4da1d41ac3af12a
2edf9120c5bc1e6cadc6c675c2020cdb17da520f9ded0323a69a99038857e195009c53cf824e9bd4
a503235e9d7412971d76633d34cc2f7bb24a98c5421d6f51677d6927ad7267b6be3b9135bfe83f33
a6802d5caff51ea3e328f70f160f06179b8d2b2f62a641f98604be6ce05b980dae745900fe0fef35
3f575232f948183a9545a52d7b9960270974df32a4c6928edc0006e0d52e98871c54d983104cf202
13deadcc1dd4f3e4e9cad79b019536d4ac3cd1b42a8445dd9a00a8fda2cc80314ac2fa93cf8598a7
4c9fd959c1a9f89bf480ed0c10429218667d8597daef767d42a52931b80e04a04e87fcfb327d5b16
82db4166bee00b7aaf47139993bb1947947a45d8636c364c65224b980a2edd3e053ecc618d030519
9f3ef0fd21f4d2e87a7d1f18548665514644edbb2f74eba33010a2c02af26fb503624aaa33c7b699
013a9b46c5fd6f8cbf50a7689eb170d63999254904665613707d5b822354e33de6805cd8c8e34cb7
c95c80681407cc506b807f67f6b4c3b785c652a506c5e252523550fad834bd1c5b5ccefee0298c38
befad1b58fd535a0c220327c95a98400f60c2791193255d6e934c304ed56210ba420f57e65164f2f
9bf14e6a5c6702b8039f97d250d252c44d4295bb8698f3b26bb3c9c1fb18ffe46cbdd9b63dc356ba
7bdfa99631cdb3f841be9c4263ea04115341c9e646a8900fcec4720d8d878453f55c7f88edfbd856
bf4c2a46226320665444640300963cd3237cd1a3cdf301a8fd4760655589ab7c4dbb2210ad5de3df
32fcf954ad38ac3c167e93dc7a7b9a7dd633cefc2e5008a3474904b1a98188a312e6efac47b5bb29
1dcd5b0a7755a27f907d7009c6e8e1207fc07f5ba5883f27bacfe22fe9d5ff1865722d35957611cb
8b4a4e440823864a25b399c8f7d0fd9ab27ddba2d1ceb65a1fad8eb6a8b6deca25c0f268229dee14
e35696a6dbd48e8c49cae3b60066283292bb77710e574da3c4b51376b30a0bbae543678dd2f66c2c
e62a0ad39befccc879be7553358b7dc0703bad9a4efda7c17c91657a28eba92dd0e8ff7f8a6f9054
455bf11c947a34ab5735e4d9f1cf8a27710a52a9ceaded6326b506aace486bd1ad55936f279b04a3
d75bc533c636fc1d112cfa7d2c7ec9766c6151be388c32632b1a09c4e8641122dab8af7bf9951e5b
4d42fc09386807ed49883f754f24eb2710db76d5a6affbd17badca17f2aa964cbfbd7ee54312fe6c
a5fe554771d01db96ef300c6129e2e0ac77ffe6c943961d508fdc1ee49f5cd2b3448cf5ebc40e8fa
676f341ab82f4045b048402faf62a2dfb57fa952c2c8036857a3bff80946cd8db2e5e331ad423c03
cee2a6f6b4347b73f7c8f9615077fbc0622df190e1e3ba2125ce14a2a22b27817a3d206864e6708a
4da9208a0e58bf9c0797fa7458985f69f75a60ee6f1907e19753b144ebe6fd2433066d8942069435
5ee277c3bd79162ba9265c3110fd40481879e9bcf5c6f6bfb09540efbdd748db7aa9068dda1576a4
94d29caa64651224a94c2ee6ace0086a9a9115ede637b11d8dbf8ec3619dc185c4897d837457fb20
e8a271a2a146238439f3bd81e3b52db5658e33f48ed6855b027b11b930ccca018deb47b7837da5bf
ca2fa8f7e2afff0caa5ec20452a2d807d54bcc7edfc8c30d4dc52e14fc0df21a25299eba21c9ca94
b1637074da55cd390f72ab1cd4c76ba64cc4fe1e7da277d804772321b75eb93f027def80db69e03b
3648be355d73ced7137d105040fec037b0a09a43e24e6aaa1f12464a3ba22778e6363f8c9d055e1c
3014d25106d74a526446504e09c8db2d5cf9944179db11ae26b2e7c2f9025950c57b91b0c29efa0d
d6b2015ffcedec057c5cff34b324c4b7d892822666cc7613d25e321e0e1024b42f8105c8ad2f1815
8083e20a0ff04f333b7bd7facd88bbef952343d7a15e3fece3dbcfbbb64f68400891a1f884c0c721
460668891e1775c9b54867716a1b24e9f98f81d71023728d09f411d8c568f4adcafca89e5e8d7c98
53b8cbde425302bc819e7509eb74e5390af2ef84bec7a45e1eaf6e15ca15380906cf4fb068fe82fa
e31700ce88a684e711afb182a229d3ee2ffe104bbfcca1dcec2315a7e339e2e1c8cfd90b94e699f4
f7dd6e69e5f42683929ff933509e200090bac220312ae976fc1aa850c8d8376bbe2d58da1d7ef1d8
71980dfeb24b4bdc39228f5e75879beba90127211c07c09084aeec6cf0121c08524fc502f7fa3ba3
80866495a09f8837484ae4d35a2d48388fdeb0db52a9ae5607e05f516c1a9a13208feaca1ec52e19
565005bb767258497680a95d728fa4187f9692a54df6677b644632faeda96c0a3b7a8ca92f6ec41e
41d37be4b6998e99151203d2da7290d2451a7b0631a65e87433bb92c2103b8938e57647225ef9e77
cf8a30e224a8f290bef4f1390aa8136eab0ac4bca5d289a9ac355692f7d2f5602c4eb722cdfdbf27
2522b764d850a822bc3ea324181a76528d079611c894a391c9fd891d367201e788053081550c6e50
667a8ccf0175464ca8e9b4d7dceb303cbf986257786a5b91c69e2ef33c2c18c7d4d63c104d5a5dee
02a5f7b69c0eb1e813275ff978711dc580e0a9fece33a187c7bcaf80bb419b65622ade73ab518f3a
c2fd686766481813e79820a88d9910c4713a1b7374c9cef30e6271b408dd3806e09df2c0b7dfdaf1
9506de0501f354391be4f20c34d50236da48d2d569c971ed8e0b825a74af12eee35a465f1d2a4a95
b29c50ea1a2200de26df50e7e8e9a83ef5b0ceaafe07f324d98ca709b16e968b5691125afc8c9b86
6b22ce268ba51eb3a63fc4fba3f204004c1ce815fdc82a45ac301d0829c245ddce1c55f48b3a6c9d
5a3c82ca9af713b645d945d7fa4e7be968702883fbde961ed51a65467e2c52829ec44f5dcdb191d2
def317ee505d5400958ecd7f5e3a95494a5b90465e6527c09dc1f5c86e2eb4df0f0e65f32eb8a246
51d1ef46d922a1e8a24357d6680767705485e5613994728604a049be6ac436f5a70b1701e6a05205
03e1c7efd9e6c30bac294c6ccbfe5874e879d02280041bebff04c8b73be13f927e812d1d44f77b55
8de83a7c2fe92273a19ff3def94cceb3cc539c0fea20ec6aba2db4d83b9c90e2d7cf1c1664028f7e
ecf829a4dd9a489a294aa693193e51b8cee2e766485645b45c71f9faa5c0ae10bb6d4a82a9543892
3abe040968f25cef11a95baae7230abfb8e6fc2f5b2a595c2896953c705716c24802cfeebf49a0cd
f9b6c0b37dfe50f2d258e1c3f72183179d658dbfa8c4bffb8d5ec977d77c9a5abed2ffa3481e909d
3efd82e7dde4666eede046ed5ffe5ca41662af3c60ada83937e31cbbaa05c7955004b32dc97b9422
e70491e53e06ef60cbe8de0173b5301d7773468065f54d2c3755b234f4663038a213df2b905b10a3
6c1c71151a9b8a79ef945e21b5dfcd692e5a8a9774c8790102c5dccd15d263d0dfbf91520c1992ab
f1479c73a13bd78d224492f7dd989f624fe690ffd9ce9ba2ad9e4a5fa2a47eb4bb5040a968ff3876
00e3742ede7447c5335a764170940db35e061aca0eaa80b25c5da583e9d341b78c1ec21212a69ea5
b56d4e83fe233a151e859e007e4c01d51032b574ead16bb3c3eaf926f3fa0ed24a51948877cd823d
f54355bed6faf898af422a2fd9a93a0b82bd2f5459580637655c0999434da30e69498ed7669e7889
1f8b769fd0b98d7e6e741b7e465859d77078848466bc77a7d19d98132b239549db9e8a4687ae8549
5a2540c1265b5b0a0f24053abb4dcdb413f2a563d59032bf5272067140a407cf247840027e56078d
27c0c0b964e4e39d39fcb4ddf8fdfd4c19f941ad11f537d759f490b1abdbab1916d1ce1b6ecc2671
7b0dae30f418a833aae3753641810e4d446de477d234a1da0b950858393fa4e752217ec8be6e0279
b39a6583e29ff00690b1d317888b7e739b8d23efd3313087bd79533fbb1fbb8be588db6718dcb1f6
58dbdebbbfcb344b88ec867c2b75b1152c5da9fa4e583ae7fad8eda6e33de885b6583c30c4b310f2
ffc05a82ed1700402d3dc6003d051705e637ac944cca16174accc3521b91bd46b7b647739fd4f9aa
cbf74ea3f77d9a0c5d987cc7caf368b426b7c317c6536b4f342e802a7fd578f9b326a94299ebf4fb
b42f508c51c57e61ca9f59db980c378b653d31d02bd1bfe027bf05a8201bc58bcbf1b1ae660364c9
cec3be86503decd48cdd54cee17c8089174944e8a0e47e12120fb02e311e29d93401f2c28eda1168
ad92304c8a18f15cabb2c6f962579f5fa3de8e7002e6a06af169af23e5e60c93d0dd25a456032f7a
d0ebf560aec1d946f50076b73494609abbf291308ed0b08a299d950d7ccbeea62c913733b90994c0
7654136e835dd21d5174a9916ac0dee680cb619e73acf4bb4b2b6757ffddc7c300f69d5c0da7f17e
4f9df39aa6b50179a0a9e2fc7a04356a16b3036c0fe69f3a35591dc8546b465704edd2731f695284
f019c00d332fc9eb7c13b615f24ac4751afce83758fd968ba575a0a944b088cdb955134c7cf2204e
357f1dcb13b3a1eb2928c5df97c30f921eadc4c00152ca1705ff18e66f08d9b1a7fef5571ec4e970
3931d97568b30652f96e7d9bea0fdeca328f291474882c0806291807680dc6c1ffd9fdc58be89928
28036736e9070b292f56c412cfa179c0e69b6c857987643b24b2f8ee21e8da7faff9a6c000eaf4d5
64d8f72d89f3a773f335ad0399df78c9335f96cd872213012aa164d37c981e9454edbe5baa233f33
0b223553e7906c362aa8450ee14be0d8ef46d6b4d73934f87174099aaac520aa5e4ba0066feaa774
bf8ab042cc1c5b77a3eb621b98b36f157f5cb0ded6d849f9144a7aad76bc35441ff51ea1cb565de5
214ee0eb49c62424996725a7bb93a099a48e8b9d9a0c5faa794330d1780441b1de3d3c6a3a299da5
fa7eb6a027e9fb214d587b6cb5abee35ac8b128692eb8f61f3b27214ab9984fc8aea8c0ff5b0c773
88d6c17f4cc94a811e9f9071c1b20986f14c038972457afa2a193a0e2061fb38789bba01b85a4d4d
7bfb842b6c40106e49105ce34e8cf53cc5fe879d4f8a43effd1c46aee7831344c1755155aefebfdb
02494bbe6463f405c377449fd3266e43ff32b99bf40f5cae3a7640535e06a2ada32ec28951765a8b
ea3c5d4a6c8f5f96ab9b26cfafc4d881e23ea2e51b561619b783318ecec54143b36c095b9f176345
b9e0aa0268252af2d41504e3f499f86e283194dee62c44d30d4066a710733d73ae9d77ff5b3ce390
cf89056868a290cda70069f47ac9dc54fd1541403d5c6940553f33ecb55e9031b5831125bd689cb7
e7d701d38c63abb65798b6cfb00b19c379d530ff373a6efb988f64ad82fb480d0031197dac7b5175
9f0c6141191057738f5422b0553473c9b5fc46607d84ac28be7b3ff570b561efb6e8c61ad3af3918
36e9ea32f636dbafbfe6efc1de9c076477be78664ff234b0cacd5af6a0b54a6e1a54cb891b175b6c
e6191ead4d238ab6633c2d0061228112f89273a3cfa69e67312fdfd382e372a20f3a215222c2e181
638ad066a58c72b1fe2bf0f799bbbeb68b0153cea93c205e752214e01e0964a91cf256790aeb42e8
29d67460cc5a4c98c9092ecb38adf2b01c8fbe1d2724690332c704aadc0f7d4729fb3da6f195be3c
b81dfef67d272d3a930a2816a050c682b042349b3bb5f68227a6b127c377c2965a3c55f654c3d47c
06d5e5dac5b51570a880053f236c9fd8927a4f8445ff22e7cba2a4e16d44cf5c23c4dbdf846b76f0
89f280e51a224138a621ec8b1616edb9b9bc4f80ac7fff7c369d6d2747850fd436ed7e772e9bdbf5
6ac620213291f05d00a7703f91010c2a1dc60873f5a065046c84a7947b55116e9c5014e6fc490d
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
 HBW_to_Column <Virtual>  0
 HBW_to_Row <Virtual>  0
 jmp <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 MC200 C710 11 0x0 MC220 C730 1"

// Rung VGR_Copy_State_F#3
// Offset 18
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#4
// Offset 35
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#5
// Offset 39
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#6
// Offset 42
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#9
// Offset 66
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#10
// Offset 83
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#11
// Offset 87
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#12
// Offset 90
NOP

// Rung VGR_Copy_State_F#13
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#14
// Offset 93
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#15
// Offset 95
NOP

// Rung VGR_Copy_State_F#16
// Offset 96
RET

// Rung VGR_Copy_State_F#17
// Offset 97
NOP

// Rung VGR_Copy_State_F#18
// Offset 98
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#19
// Offset 143
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#20
// Offset 176
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#21
// Offset 183
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
STR C2000
COPY 0x1 "4 0x0 MC450 C700 1"

// Rung MPO_Copy_State#5
// Offset 140
RET

// Rung MPO_Copy_State#6
// Offset 141
NOP

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3005 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC10 C4 27 0x0 X6 MI7 4 0x0 MHR5 N300 1 0x0 MC1 C301 3"

// Rung HBW_Copy_State_F#2
// Offset 16
#BEGIN FMT_COMMENT 
"Factory 4.0 read/write"
#END

STR ST1
COPY 0x1 "4 0x0 MC1 C301 5 0x0 MHR1 N1 4"

// Rung HBW_Copy_State_F#3
// Offset 27
STR ST1
COPY 0x1 "4 0x0 0 MC1 5"

// Rung HBW_Copy_State_F#4
// Offset 34
STR C28
OUT Y39

// Rung HBW_Copy_State_F#5
// Offset 36
STR C29
OUT Y40

// Rung HBW_Copy_State_F#6
// Offset 38
STR C30
OUT Y41

// Rung HBW_Copy_State_F#7
// Offset 40
RET

// Rung HBW_Copy_State_F#8
// Offset 41
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#9
// Offset 94
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#10
// Offset 135
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#11
// Offset 142
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
STR ST1
RST C210

// Rung HBW_lift_seq#2
// Offset 2
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#3
// Offset 4
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#4
// Offset 7
STR X10
OUT C200

// Rung HBW_lift_seq#5
// Offset 9
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#6
// Offset 18
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#7
// Offset 24
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#8
// Offset 27
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#9
// Offset 30
STR X11
AND C201
OUT C210
RST C200
RST C201

// Rung HBW_lift_seq#10
// Offset 35
NOP

// Rung HBW_lift_seq#11
// Offset 36
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 65 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_PWM_On#6
// Offset 62
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_PWM_On#7
// Offset 64
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 10 0x0 0 C200 15 0x0 0 N200 10"

// Rung HBW_Reset_Flags#2
// Offset 12
NOP

// Rung HBW_Reset_Flags#3
// Offset 13
NOP

// Rung HBW_Reset_Flags#4
// Offset 14
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
ANDN C602
OUT Y26

// Rung VGR_dropoff#7
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
ANDN C602
OUT Y27

// Rung VGR_dropoff#8
// Offset 39
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 48
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
ANDN C603
OUT Y25

// Rung VGR_dropoff#10
// Offset 57
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 66
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 78
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 81
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 84
NOP

// Rung VGR_dropoff#15
// Offset 85
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block HBW_to_Column
$LGCMOD HBW_to_Column

// Rung HBW_to_Column#1
// Offset 0
STR ST1
RST C210

// Rung HBW_to_Column#2
// Offset 2
STR ST1
MATH N201 "N200 + 50"

// Rung HBW_to_Column#3
// Offset 11
STRN C210
ANDLE N201 $HBW_Encoder_X.Acc
OUT Y51

// Rung HBW_to_Column#4
// Offset 17
STRN C210
ANDGE N200 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_to_Column#5
// Offset 23
STRLE N200 $HBW_Encoder_X.Acc
ANDGE N201 $HBW_Encoder_X.Acc
SET C210

// Rung HBW_to_Column#6
// Offset 32
NOP

// Rung HBW_to_Column#7
// Offset 33
RET

// End of Code Block HBW_to_Column
$LGCEND HBW_to_Column

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
ANDN C602
OUT Y26

// Rung VGR_pickup#7
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
ANDN C602
OUT Y27

// Rung VGR_pickup#8
// Offset 39
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 48
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
ANDN C603
OUT Y25

// Rung VGR_pickup#10
// Offset 57
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 66
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 78
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 81
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 84
NOP

// Rung VGR_pickup#15
// Offset 85
NOP

// Rung VGR_pickup#16
// Offset 86
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
ANDN C602
ANDN C605
ANDN C600
SET C601

// Rung VGR_SLD_pickup#10
// Offset 76
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 79
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 83
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 89
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 95
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 105
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
ANDN C604
ANDN C605
ANDN C600
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 114
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 122
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 134
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 138
STR C605
AND X26
SET C600
RST C605

// Rung VGR_SLD_pickup#20
// Offset 142
NOP

// Rung VGR_SLD_pickup#21
// Offset 143
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block HBW_to_Row
$LGCMOD HBW_to_Row

// Rung HBW_to_Row#1
// Offset 0
STR ST1
RST C210

// Rung HBW_to_Row#2
// Offset 2
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Row#3
// Offset 11
STRGE $HBW_Encoder_Z.Acc N201
ANDN C210
OUT Y5

// Rung HBW_to_Row#4
// Offset 17
STRLE $HBW_Encoder_Z.Acc N200
ANDN C210
OUT Y4

// Rung HBW_to_Row#5
// Offset 23
STRGE $HBW_Encoder_Z.Acc N200
ANDLE $HBW_Encoder_Z.Acc N201
SET C210

// Rung HBW_to_Row#6
// Offset 32
RET

// End of Code Block HBW_to_Row
$LGCEND HBW_to_Row

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5350 N1005 1 0x0 5320 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 775
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 775
ANDLE $VGR_Encoder_X.Acc 805
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_HBW_deliver#15
// Offset 87
NOP

// Rung VGR_HBW_deliver#16
// Offset 88
NOP

// Rung VGR_HBW_deliver#17
// Offset 89
NOP

// Rung VGR_HBW_deliver#18
// Offset 90
NOP

// Rung VGR_HBW_deliver#19
// Offset 91
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 31
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung $tFirstScan#4
// Offset 39
STR ST1
INIT "3 MC100 MC100 1 MC502 MC502 1 MC808 MC808 1 MC300 MC300 1 MHR0 MHR399 0 N1 N799 0 MC201 MC220 0 MC450 MC450 0"

// Rung $tFirstScan#5
// Offset 61
NOP

// Rung $tFirstScan#6
// Offset 62
NOP

// Rung $tFirstScan#7
// Offset 63
NOP

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR ST1
AND ST2
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#11
// Offset 63
#BEGIN FMT_COMMENT 
"Presumably the VGR is in a ready state if in the command "
"queue, so always set this to true for the Factory 4.0 layer."
#END

STR ST1
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_Program#12
// Offset 69
STR ST1
AND MC200
JMP VGR_Program.S99
COPY 0x1 "4 0x0 0 MC200 1 0x0 0 MC300 1"

// Rung VGR_Program#13
// Offset 78
STR C300
OR C711
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#14
// Offset 93
STR C717
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#15
// Offset 107
STR C31
OR C1701
OR C712
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#16
// Offset 123
STR C32
OR C1700
OR C713
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#17
// Offset 139
STR C33
OR C1702
OR C714
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#18
// Offset 155
STR C34
OR C719
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#19
// Offset 170
STR C35
OR C718
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#20
// Offset 185
STR C36
OR C715
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#21
// Offset 200
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#22
// Offset 209
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#23
// Offset 218
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#24
// Offset 227
STR C716
JMP VGR_Program.S12
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#25
// Offset 241
STR C720
JMP VGR_Program.S13
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#26
// Offset 255
NOP

// Rung VGR_Program#27
// Offset 256
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#28
// Offset 258
STR C300
OR C711
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 775 N1007 1 805 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#29
// Offset 279
STR C500
AND C300
JMP VGR_Program.S1
RST C300

// Rung VGR_Program#30
// Offset 283
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C711
COPY 0x1 "4 0x0 0 MC201 1"

// Rung VGR_Program#31
// Offset 298
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#32
// Offset 300
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#33
// Offset 321
#BEGIN FMT_COMMENT 
"Non Factory 4.0 Mode"
#END

STRN C717
SET C700
SET C701

// Rung VGR_Program#34
// Offset 324
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C717
COPY 0x1 "4 0x0 0 MC207 1"
SET C701

// Rung VGR_Program#35
// Offset 340
SG VGR_Program.S2

// Rung VGR_Program#36
// Offset 342
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#37
// Offset 354
STRN C712
SET C718

// Rung VGR_Program#38
// Offset 356
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1701
RST C712
COPY 0x1 "4 0x0 0 MC202 1"

// Rung VGR_Program#39
// Offset 372
SG VGR_Program.S3

// Rung VGR_Program#40
// Offset 374
STR ST1
ANDN C500
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#41
// Offset 387
STRN C713
SET C718

// Rung VGR_Program#42
// Offset 389
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
RST C713
COPY 0x1 "4 0x0 0 MC203 1"

// Rung VGR_Program#43
// Offset 405
SG VGR_Program.S4

// Rung VGR_Program#44
// Offset 407
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#45
// Offset 419
STRN C714
SET C718

// Rung VGR_Program#46
// Offset 421
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
RST C714
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Program#47
// Offset 437
SG VGR_Program.S5

// Rung VGR_Program#48
// Offset 439
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#49
// Offset 449
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C719
COPY 0x1 "4 0x0 0 MC209 1"

// Rung VGR_Program#50
// Offset 464
SG VGR_Program.S6

// Rung VGR_Program#51
// Offset 466
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 300 N1007 1 330 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#52
// Offset 487
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#53
// Offset 493
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#54
// Offset 504
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C718
COPY 0x1 "4 0x0 0 MC208 1"

// Rung VGR_Program#55
// Offset 519
SG VGR_Program.S12

// Rung VGR_Program#56
// Offset 521
STRN C500
CALL VGR_pickup 0x1 DST511 "3 20 N1005 1 0 N1006 1 2200 N1007 1 2230 N1008 1 3475 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#57
// Offset 541
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C716
COPY 0x1 "4 0x0 0 MC206 1"

// Rung VGR_Program#58
// Offset 556
SG VGR_Program.S13

// Rung VGR_Program#59
// Offset 558
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 2200 N1007 1 2230 N1008 1 3500 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#60
// Offset 578
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C720
COPY 0x1 "4 0x0 0 MC210 1"

// Rung VGR_Program#61
// Offset 593
SG VGR_Program.S8

// Rung VGR_Program#62
// Offset 595
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 20 N1005 1 0 N1006 1 30 N1007 1 60 N1008 1 2900 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#63
// Offset 616
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#64
// Offset 622
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#65
// Offset 632
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36
RST C715
COPY 0x1 "4 0x0 0 MC205 1"

// Rung VGR_Program#66
// Offset 648
SG VGR_Program.S9

// Rung VGR_Program#67
// Offset 650
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#68
// Offset 670
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#69
// Offset 680
SG VGR_Program.S10

// Rung VGR_Program#70
// Offset 682
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#71
// Offset 702
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#72
// Offset 712
SG VGR_Program.S11

// Rung VGR_Program#73
// Offset 714
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#74
// Offset 726
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#75
// Offset 736
SG VGR_Program.S20

// Rung VGR_Program#76
// Offset 738
NOP

// Rung VGR_Program#77
// Offset 739
NOP

// Rung VGR_Program#78
// Offset 740
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#79
// Offset 750
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#80
// Offset 758
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#81
// Offset 783
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#82
// Offset 800
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#83
// Offset 804
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#84
// Offset 808
NOP

// Rung VGR_Program#85
// Offset 809
SG VGR_Program.S100

// Rung VGR_Program#86
// Offset 811
NOP

// Rung VGR_Program#87
// Offset 812
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 V1600
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
AND C700
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 120
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 123
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 125
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 129
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 132
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 134
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 150
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 153
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 155
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 159
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 163
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 165
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 167
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 169
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 172
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 175
STR T9.Done
DUPBOOL
AND ST1
RST C900
POPBOOL
DUPBOOL
AND C840
JMP MPO_Program.S6
POPBOOL
ANDN C840
JMP MPO_Program.S9

// Rung MPO_Program#42
// Offset 186
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 188
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 190
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#45
// Offset 194
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 196
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 198
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 200
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 204
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 206
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 208
OUT Y47

// Rung MPO_Program#52
// Offset 209
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 211
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21500
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 22000
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0
COPY 0x1 "4 0x0 0 MC450 1 0x0 1 MC808 1"

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
STR ST1
EXIT

// Rung SSC_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"SSC Program"
#END

SG SSC_Program.S1

// Rung SSC_Program#3
// Offset 4
STRN X41
OUT Y37

// Rung SSC_Program#4
// Offset 6
STRN X40
OUT Y36

// Rung SSC_Program#5
// Offset 8
STR X41
AND X40
JMP SSC_Program.S2
COPY 0x1 "4 0x0 0 V2401 1 0x0 0 V2402 1 0x0 6500 V2403 1 0x0 700 V2404 1"

// Rung SSC_Program#6
// Offset 23
SG SSC_Program.S2

// Rung SSC_Program#7
// Offset 25
STR X44
STR ST2
CNT CT0 60000

// Rung SSC_Program#8
// Offset 29
STR X45
STR ST2
CNT CT1 60000

// Rung SSC_Program#9
// Offset 33
STR ST1
MATH V2401 "CT0.Acc + CT1.Acc"

// Rung SSC_Program#10
// Offset 42
STR X46
STR ST2
CNT CT2 60000

// Rung SSC_Program#11
// Offset 46
STR X47
STR ST2
CNT CT3 60000

// Rung SSC_Program#12
// Offset 50
STR ST1
MATH V2402 "CT2.Acc + CT3.Acc"

// Rung SSC_Program#13
// Offset 59
NOP

// Rung SSC_Program#14
// Offset 60
STRLE V2401 V2403
OUT Y37

// Rung SSC_Program#15
// Offset 65
STRLE V2402 V2404
OUT Y35

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR C10
EXIT

// Rung HBW_Program#3
// Offset 10
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#4
// Offset 18
NOP

// Rung HBW_Program#5
// Offset 19
NOP

// Rung HBW_Program#6
// Offset 20
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#7
// Offset 22
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#8
// Offset 25
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 27
STR X11
SET C110

// Rung HBW_Program#10
// Offset 29
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 32
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 35
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 38
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 41
STR X0
AND X3
JMP HBW_Program.S97
RST C303

// Rung HBW_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Presumably HBW is in a ready status if its in this job queue"
#END

STR ST1
COPY 0x1 "4 0x0 1 MC100 1"

// Rung HBW_Program#17
// Offset 53
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C301
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#18
// Offset 72
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#19
// Offset 89
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 N1 1 0x0 0 N2 1 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#20
// Offset 114
STRN X2
AND C302
JMP HBW_Program.S5
COPY 0x1 "4 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#21
// Offset 129
STRN X2
AND C303
JMP HBW_Program.S99
COPY 0x1 "4 0x0 0 MC3 1 0x0 0 MC100 1"
RST C303

// Rung HBW_Program#22
// Offset 139
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C304
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#23
// Offset 158
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#24
// Offset 175
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR3 0
ANDNE MHR4 0
AND C304
MATH N300 "(MHR3 * 10) + MHR4"

// Rung HBW_Program#25
// Offset 194
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N103 1 N204 N104 1"

// Rung HBW_Program#26
// Offset 211
STR C304
JMP HBW_Program.S10
COPY 0x1 "4 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#27
// Offset 229
STR ST1
AND C305
JMP HBW_Program.S100

// Rung HBW_Program#28
// Offset 232
SG HBW_Program.S0

// Rung HBW_Program#29
// Offset 234
STRN C100
AND ST2
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#30
// Offset 247
STRGE N101 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_Program#31
// Offset 252
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#32
// Offset 257
STR C100
JMP HBW_Program.S1
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#33
// Offset 266
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#34
// Offset 268
STRN C100
AND ST2
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#35
// Offset 281
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#36
// Offset 286
STRGE $HBW_Encoder_Z.Acc N102
SET C100

// Rung HBW_Program#37
// Offset 291
STR C100
JMP HBW_Program.S2
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#38
// Offset 300
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#39
// Offset 302
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C210 C102 1"

// Rung HBW_Program#40
// Offset 315
STR X11
AND C102
JMP HBW_Program.S3
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#41
// Offset 325
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#42
// Offset 327
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#43
// Offset 338
STR C103
JMP HBW_Program.S4
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#44
// Offset 347
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#45
// Offset 349
STR X2
STRN X2
ANDN T14.Done
ORSTR
OUT Y48

// Rung HBW_Program#46
// Offset 354
STRN X2
TMR T14 100

// Rung HBW_Program#47
// Offset 357
#BEGIN FMT_COMMENT 
"Non factory 4.0 workflow"
#END

STRN C301
AND T14.Done
AND ST2
SET C300

// Rung HBW_Program#48
// Offset 361
NOP

// Rung HBW_Program#49
// Offset 362
STR T14.Done
RST C301
COPY 0x1 "4 0x0 0 MC1 1 0x0 1 MC100 1"
JMP HBW_Program.S97

// Rung HBW_Program#50
// Offset 371
SG HBW_Program.S10

// Rung HBW_Program#51
// Offset 373
STRN C100
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#52
// Offset 385
STR C100
JMP HBW_Program.S11
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#53
// Offset 394
SG HBW_Program.S11

// Rung HBW_Program#54
// Offset 396
STRN C100
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#55
// Offset 408
STR C100
JMP HBW_Program.S12
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#56
// Offset 417
SG HBW_Program.S12

// Rung HBW_Program#57
// Offset 419
STRN C100
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C210 C100 1"

// Rung HBW_Program#58
// Offset 431
STR C100
JMP HBW_Program.S13
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#59
// Offset 440
SG HBW_Program.S13

// Rung HBW_Program#60
// Offset 442
STRN C100
CALL HBW_to_Column 0x1 DST511 "3 N103 N200 1" "3 C210 C100 1"

// Rung HBW_Program#61
// Offset 454
STR C100
JMP HBW_Program.S14
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#62
// Offset 463
SG HBW_Program.S14

// Rung HBW_Program#63
// Offset 465
STR ST1
MATH N105 "N104 - 400"

// Rung HBW_Program#64
// Offset 474
STRN C100
CALL HBW_to_Row 0x1 DST511 "3 N105 N200 1" "3 C210 C100 1"

// Rung HBW_Program#65
// Offset 486
STR C100
JMP HBW_Program.S15
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#66
// Offset 495
SG HBW_Program.S15

// Rung HBW_Program#67
// Offset 497
STRN C100
CALL HBW_Unload_Rack 0x1 DST511 "3 N105 N202 1" "3 C202 C100 1"

// Rung HBW_Program#68
// Offset 509
STR C100
JMP HBW_Program.S97
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC4 1 0x0 0 C100 6 0x0 1 MC100 1"
RST C304
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#69
// Offset 529
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#70
// Offset 531
STR X1
ANDN C300
STR X1
AND C302
ORSTR
OUT Y49

// Rung HBW_Program#71
// Offset 537
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#72
// Offset 539
NOP

// Rung HBW_Program#73
// Offset 540
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#74
// Offset 542
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#75
// Offset 553
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#76
// Offset 556
NOP

// Rung HBW_Program#77
// Offset 557
NOP

// Rung HBW_Program#78
// Offset 558
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#79
// Offset 560
STRN C100
OUT Y50

// Rung HBW_Program#80
// Offset 562
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#81
// Offset 567
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#82
// Offset 569
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#83
// Offset 571
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 573
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#85
// Offset 590
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#86
// Offset 595
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#87
// Offset 600
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#88
// Offset 609
SG HBW_Program.S9

// Rung HBW_Program#89
// Offset 611
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#90
// Offset 623
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC2 1"
RST C302

// Rung HBW_Program#91
// Offset 635
SG HBW_Program.S100

// Rung HBW_Program#92
// Offset 637
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#93
// Offset 640
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#94
// Offset 643
SG HBW_Program.S101

// Rung HBW_Program#95
// Offset 645
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#96
// Offset 662
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#97
// Offset 665
SG HBW_Program.S102

// Rung HBW_Program#98
// Offset 667
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#99
// Offset 684
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#100
// Offset 687
SG HBW_Program.S103

// Rung HBW_Program#101
// Offset 689
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#102
// Offset 706
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#103
// Offset 708
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#104
// Offset 713
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#105
// Offset 716
SG HBW_Program.S104

// Rung HBW_Program#106
// Offset 718
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#107
// Offset 735
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#108
// Offset 738
SG HBW_Program.S105

// Rung HBW_Program#109
// Offset 740
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#110
// Offset 757
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#111
// Offset 759
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#112
// Offset 764
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#113
// Offset 767
SG HBW_Program.S106

// Rung HBW_Program#114
// Offset 769
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#115
// Offset 785
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#116
// Offset 788
SG HBW_Program.S107

// Rung HBW_Program#117
// Offset 790
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#118
// Offset 806
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#119
// Offset 809
NOP

// Rung HBW_Program#120
// Offset 810
SG HBW_Program.S98

// Rung HBW_Program#121
// Offset 812
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C9","rst","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C301","","","Factory 4.0 Pallet HBW to Conveyor"
"C302","","","Factory 4.0 Pallet Conveyor to HBW"
"C303","","","Factory 4.0 Home Position"
"C304","","","Factory 4.0 Sort Pallet"
"C305","","","Factory 4.0 Manual Mode"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C704","copy","","Deliver Puck Train Depot"
"C710","","","VGR Home Position"
"C711","","","VGR Pickup puck HBW"
"C712","","","VGR pickup puck SLD white"
"C713","","","VGR pickup puck SLD red"
"C714","","","VGR pickup puck SLD blue"
"C715","","","VGR pickup puck Loading Bay"
"C716","","","VGR pickup puck Train"
"C717","","","VGR deliver puck MPO"
"C718","","","VGR deliver puck Loading Bay"
"C719","","","VGR deliver puck HBW"
"C720","","","VGR deliver puck Train"
"C721","","","VGR Manual Control"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"D0","True","",""
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"HBW_Program.S0","","","HBW Pallet HBW to Conveyor"
"HBW_Program.S1","","","Go to HBW row"
"HBW_Program.S5","","","HBW Pallet Conveyor to HBW"
"HBW_Program.S7","","","Unload sequence go to column"
"HBW_Program.S10","","","HBW Sort Pallet"
"HBW_Program.S15","","","HBW last stage in sort"
"HBW_Program.S97","","","HBW Job Queue"
"HBW_Program.S99","","","HBW Home Position"
"HBW_Program.S100","","","HBW Manual Mode"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S12","","","Pickup puck from Train"
"VGR_Program.S13","","","Deliver puck to Train"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"SSC_Program.S0","Reset_SSC","",""
"SSC_Program.S1","Init_SSC","",""
"SSC_Program.S2","Calc_Pos","",""
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

