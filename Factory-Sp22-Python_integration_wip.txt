// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jeffr\Documents\Robotics_I\Repos\Factory-4.0-Sp22\Factory-Sp22-Python_integration_wip.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
5b086d6eeb78d1a1986a7b4091067da4f024b3311c7d58729ae207dc85f781830997867e13e6e5d8
e050a63a7b728c971467efd46c18c2176b670c8f86acfe74d4c2df65b12f6e465d5e5f749b233b5c
045f6194ae2b826ed6289d2416afafbb29ad2a9803f81c785366eaf28b35a7a2d89f4b4a5a95732e
ebe8799801d1ebc8cf4ba5a97f7eef5a220b7de20c8964c90fd21fa4c26774829e9fd7d689b9577f
ce397ffc60a92b3309e2cca0bf4469e4fe2d2ee7d27e0d4bb498d96dcd5c920f677574d6d5b433f8
296171f4d65c1519918e60a6e85e2d13a2bd24f3efffdc4e22a8bb13581ebcf9df99890182183121
e15d9c672de37331b43c6097642cca137e0fe8d4f4ce900b0ca098ca835ba504c5deae09482c4107
bbc93250f6cfa29ffabe72008fcc25f6daf234691331fe023f1f290e84651cd4c76252bb22b8c6fd
381c95c3b838fddec1b2adfc0f59c420cb0299daa4df5100d456b36a6003931968000d9df4f0d8bd
6fa8f5aaecab0579cf06f9f88727677a02e9fb594df78cdbf706799447d7246e50ba194993e88731
f692638ddfab425de90dfe16381bbcd14c546009c712c2311f21f02e3d077e2ca02d68c0bcb74e4d
85673e5e76ed8f3aca568f13c54bf7a7cc127bf9ce2b43791ca5ad5947d287f69a67fda7b8f4c16e
bae96bc92894fca9144b57736cb965569237ea7509be897a9f0be69f581e318554ab9286c6e39df0
1fb636e1084d5311f618c2fbc8d693e9847c3b5a7231cf981785dc22c03f95a6548c253bd79710dd
49e9982481d077b8bc4213e579f9fd78ae44c17a8e775c394e5e5f6f91dd0bf464a3046405adc580
4b801cdebf16c6e28aac6ea8cc72e4e8d9e420a4b9fbb1cadea59a34841fa892f3988a6655f5cfb2
f474380f5beda6aa5fb959dc8f3d74e83fd22a5e8c1ba40c4ae99eaa8ca8d5d7297fb00f4e1b4653
6295154448c5ab123c867ef3f91f3462d7e2990172931427ef7f38f831c204e7e37a73568f07655a
2537c426146056e73096e51495c68f0233bc3a60b44020b0ea28445d68cbdff801152c134a574ca1
9084bb58f84da88ab8dce274df6d9f626d25a3787a48fb754b1ac51143738dad74b26b53807df88c
b33e9247136b9ef88e41ba7f967af398fdeda83549dfc059d65675ebe3b602064237f68ca3dfd219
30239f2dd82a26fbef5ecdd182c737fb42b11247cff81d8d767c85657eb36b575f4cd3a2bcac6319
9b6ef9e33ad95f3950076b36044c7fcb7acaa1427b143a61641acef6380e3d445858ff22675be985
56d90f76fd93a27e3967c224f04d55b0d2efd17b22459058e9355b35210aba149560850956441360
56369dd321600d258a002e5fa780f7e9785d7325085b4e622556c745f72b7c8d254bb59c6b8028c3
da1a5500ceb364747d6a3269e3c27e8a53ba5b21558bc8c311226f81c1325b84a62b5dcca46eddde
d2d8da00bdfb1f1975367e62886398c18804ae9a0cce207dcc4936798b4e434a236d57cde6f6e7e9
00c983bb0cff82b3586c4e5fd88a4df662b33d939e63d76f3f849873c1bdc823f19a8e67fbd96787
830511676804583d04cd19ca2840581be8eb8be84be98f8ba9121b938782c304eeeaabdf0c8aae13
87495f7cb041f53fb0d826cd8cbe22c5cf8e5b33b5dd6f18fffd9d8ff7d219ffcddb6ddfaeecaeaa
5857fb39bcb5db737b363bc7f78df3cca3aa5489c260230dd8501e34734c1f6e7ee1b9bf5f014e5d
eacb79f9df6b19a7f9f86763bf9e7f8d07a1e3cf3e9827afbac6974fc962404538e463ff6a0eccac
6afcc8a1f65d5c60ff089553ec2e1dd9118878bc98491c0f687a2d86874bd324b97fc00231b33438
991e2af16a64e844cf0ba5240fa8143da3efaa50e2cfd064bfd6c93b3a26a01b4da8e84981cb036e
2ad0d2c40130316ab111b411a1b866840bb523ded6b96df9c122a405fe8027d9adfd1b1374174485
89334f36733fcbc0bf1cefcea35cd05cd96cc8cb9e3c113d41f56f816a3cd0343523bcff8f958019
153923aacaffc048e3773699178df315410b98c496ac407c9c69a9b66077524ae772c100761b86ab
03b89b588f69599409b9487b6aab7f49f47ca66e1b45b412a338a49384da7da1dcedaf92b01dfbd8
86df427ea0a2ea1efe7f8a9f1522f7892d0dabeda5a810cb5708b8b09f34b1a98507c37d7f23b88d
65276f60b813a5de74fdcece79618dae47e9b3ade755a455a1323611956ad65f30a5f640a7cca878
23b141d53692918561b26d1fed108cff488d7f4417945f41c15561c9df45a0749ba41eb6891b2b5d
6b8e30d4647d9c2e9f507cc493fee30180b91b21d4f0503bf66f0cca891540691b0c2ace71d1f87d
d4f99626685d1ce7fb1a65660b7c4ef5936c699719d6a8fee359120533943af3349cb1888c73057f
c1ab3f6d69fbda891ad192fe6c1e4b8ed2f947284a7a7b37ab1d4678da5feb583065d76760501dec
d39ecb9be628ceb1509f6108277c87dadfc67bbb0e3c74f6b801749cfcf3f031ab88564738db4a28
cb0d8bf7204739cd3cb913b5cbc70ec181592a90fa1c0b43d1c8fa89fad4d14f74fbb6d2ccacbbad
e9e9c66cc4e3f0d58e6709ef7f12684063492e3a09fd3db89066ee98094afc4b21d56421819d1b6c
95f34662b0e58c02a7c50c7f94b813975dbfea6c754ae1fdd69379ea72203290b89959f2ff111147
8845d0af6aaed6ffee441ef10a1eb5b4923128fe0a76aeb9b6f05cea6698b57d9d98ba48e3f5ec29
0332e8b9ae3ab2324b53448e947ace6e4446f5b91bfdbe8709abd1018d6c121617a95f961ee6fdbd
97b01691dfed3e79cc9fc7903ba06b9c5418c1cb6ed973635028b8660b0ae6e9704fd29b146fce18
3140e47bd3d4168dc6b39eb87568a739543a285b21beaa69b44b7c754e0786208e5092bf175bc5aa
603e685416ad4cc8d3c49e79a59ae9775cd1d3a7bffbc6ffb5275e10d1f08eac49109fc8576b62ff
ee14a97ad397cb02f9ec6efdc8942a202febe7a2b0a34574637217d4496b654bbdb855888f04d22f
370c66c3b8da581fe3ac9879f722fe96fb8ac89349f981596a8532dd5667de1b2edb360508aea5d6
f66c7e81471bfd3e38cb2227c7a4dcdfad72a1795f1f99b8b0a71d11b102fd366f102bef0ba16aba
fc8edaeda7d8a25b5d9d4940fc7ba17f24a0c2eed24bee68c1bac53d566855120413400257e0451f
9167720919dff90d662005aa020d9773bcbaeed5843a69da246c80185e3395f382460837adb06806
bdff7c85285f493d5fadfacd87f882f3ef86ce9272c3aafae45438a12a4d2457a027e86418670da4
3ecf83a1063bbb57da2c3942b245d50f0b23da4c10439a244d65d2b7c39dbae639f78ed7b8c623f2
39b3d3a8df9a606276c0a7cdfb4b4ee52388e29e50826ab777a8324eb84a0b9898454208996b5623
e2f4cd85dd504db809b7b43c4e564a6e0e0d7fca6261f171c632dd7a646fa0c89f6f2eb785bc5abd
2f5d6d185d0cd642ea83bc72b7a7057f8c2ce904d41dc2dce7dcf6fa4eb80b92d73e1f86c9d2c8a8
71076270f7eef30e88295b9615391a52deadf80d822dbc7c2ecbef57f420001329132c69849b979d
5ce098f4e533885007da113002f600eadf119075fbba5e828ee81f799b6872da11b3d9ad6c3b0d3b
7a9d8f3b830c92ae59d945c4e735cc1c98cb1fb873de80b61c3493f98dcc94cac37739bea7fe71af
0dfa70fb8b0b71ec47b09c0a0a5313b1927adb74ed7b083fb97ca9d0ae33c8bb4c3bc161ddd34184
dbd3fcc838c4d1523edbc333d76a3c5d5ab86bd021321f4ad83966c35bd95fb79e7621445a3c7710
f201db703b42fc51cc87d95110f7e53188773cd1320729a15e6f87d0b5a3c5ab74a209c30afd4c57
3b044cd487f6d26172d23e5a08dc5c40cbb43574904c503619334c7279105e2d933e632a2802e5cc
382ad3afe62fc4f13fbc19f2ce40f9fff1b4388951d0b98f3f2448d7996c44672f2350b1805efc0b
41cac24238a50efab642a89db335cae1095e3b0d6b6ee2538b220ae7ca5b6338c54743f92fca0d3f
caa6ea3ebea2246fdfcd4ee1b701c23ce48c7dd55e7fbc7b83fe70f4632367754fc6501e3c457643
4fc412f0273c8640365341f6ef5808969f784aa5f85bde464870f478f67e68663b9c847cb44de728
06f9118370d716a7a4b5d3c6197c2ca7e579a120fe0a80418ae9f31fe385f7b8e6ef8dd9dc72fa4c
0058234d040691744d858db8125dbb22fc2ba88d04ecbf5551809a6720900fe9990bf24e8248810b
a33a355fe0657fd2cc12cc79d67aa6bed4a46ab8508d1cc35f23d527560974375a48f7ee2871195e
b27f0c7012971407876b8fcde195c37e5dff0d5dd9f2a4b54f083e26861a8473ba80ae41b17362a2
a414e7860a765570c3e02e5ab0aea677cd1079c0fc8cd9e1ff065277efad2ae25965ef564b2d2ec8
65398f23bfdfecc2af47285e892a4e1030a227e3e3befe6d26285db7a961bedef5e7294b40436430
d7e260229bcc3d1f9cb65a35a061aaca5c3165ab5d2db4319c872571a7a97fe08be2fbb6cc1d4b0b
eccfccf8e6233da277bef00a38b797b0091391ce852d091bfb52b075d22ca1b98cb6aa500f532052
ee7a96521eab0ad57b63c9765203cad117565308b7f51c9087d618a24f0e5e5683df9ff47d929a5e
3ec6614b44323b3cba82233328454bced4daa45bc312f02fca54ceab606f275d44736a3a9d36fe88
e2c81266c5af2cd01f81e51f399ea34a06496402fc5ba844a1017537ce98e8cc215bab5dbc2d3141
a8516928a53f7f6ba465a394b67d4c2b609677e67ad77407b48932865783439d552a761f3f95016b
c61e9a7ff707bffd2cee4603744f576ca3b35d99ab951cffa88f1de2c5efdac4624bc2140a9288d5
49b89e376d7e901047cb4fd3d9ea847b32018f82214543f1ae46eeb5463d42687d4b1f74eda14830
693c4bda41148efb2988414c620432d126e5efcd32998828770cf3fb5e9f611f49d2919cf2d716db
efcbad6159d1180a5b89d8dd3c834ac03eaa51fbbed66ced2c219999b280e1c909e6bf1b62cc7e62
07b84868e9da42640c8bdb3c7fc7c647865a9a6b87252032b644d9662359c7fe19f99cce719c6ba5
e69e64779f915a64a4936bea84d96af741ea9627b6f75fa26ee52f9c569ef5f61027bab4ec7ea338
4a5c8ef324c42691f268baa25fadafbd0d946b0d1ce0529e1e96d7b3ffa49c4e026c72d644c55d70
85a477276bcd80c26dde97cfdd43eeabf44994d7daaa9f3cde13934cab00aef047599c1ec887f04e
9ba1bf766a52fd33a6cb3885df6a6d55289438435dfe733728093cf295ba4897a2674216135a34d9
357d7ffe43f121ba90e82aee65eff1d9c0703a3945d56dc9bea903162f5e50c2c80c0cf04661e023
667a1fd24e9a9f022e9e63bb3ab1ee803386849fd1ec730855a0ffc7d865ef5a77c220499e74ee8d
c06426402c6c3f5589f8a35a92a3f1005f9d71a292e8488678510d0612ff832e87c5b5f3395f185f
4630931f096e6a6609bcbe8a4e6de15431b4786105980473fdc9050bd971c9d5cd1dd840fdea4826
012f62c42ecb53dcf96079d894f97d45b276f21997729983940fa182078b10df13546a7760b6bcd0
cc9ae7a8b4d0a3935ed62eb97ee5e003a9d1634ea0ddf5566e28aa1d6bece08e0900229c366eba2c
791e2e723b8f18616784e83eed9f85f186b09ceb7c3c3da2b5de561a6f12735c078bd5089a22b55f
b201615804930c3ab501e9281c394b8b6c8098ee42feddd0b8a0a2a01429d49f4b9f7f92a16cca01
a6b4332be8c5d1af00bda56f4729e6ea16fcf0d7dc262254b6e814e7779616eb70fea8fd4c0266e7
64f119ce6e30c80a0d714f728c36ee5cd87d0a626a7a2012deae95d27d818e567b220d051f91fb27
8f26bcdd2103c22e13d23c8ecacb7728d1a00a04d10fa806d11fbbc9f1bfdd065f600bba2c6b80f3
3f4eb1a67f5c3fe5eda1e5784f107e26e42a9e0e59d7bd4db6744980f335853e3f41788ac2704ade
3362b7dbad438793ebdea97b463e835e8eb81adb7956db4566dc827d5409ad7b8af47ece583eddfe
695c3ef6986531b359ad1aacd38b00c25437fa8df122a5129fe5f44411df994a919fd94897e5ba4c
7fef1e312903b341cbf61fe6736adb1c8eafeb3f405db521b814a3a5d9921a3887df41910cd3a6e6
c3c18c615017e28f105e460589fdd3bd20a679e7dfc873407090fece817c99f08505828b9d2fceb4
732109a9936ed07aea8a97d3270694b775a0064513db5fee24f5e500735b484cfc7230176ebd689f
547f9693acf3278d8cfcc46041b56efdb1ccdb25806f1f59a983b9fac87cd3f3aa33a88b1558d762
31e8c2b7d32fd0d6341351547ac13122e1ee22b14ec94c7f169e976921ef9a2a696b8aa8be19d322
973f3df10041de33cee5b916824f3d9aab1cbd2acb1c932d1e9c6d3c0edc4eba49d7da1cc72c1808
0aeafc90ada55c16cbe73ea8aa01643881c77f59ef052c2131da3a64abac7fd6d00269ddc185a47f
f892f516b74294e54db6d4987dd7d3cc95cc1544180ecdd92386db52cb7713cef9947b64d9b719e0
a5239466e4d5ee11fecc577451e6a5d4544fc6796fc9b1df3c1ca20c5654352bca3f962dede16827
62e06e04a824e99e02b496276ec1437c1e993f5f5b3d24748091f6df02cdc27f0dd6db1689c51329
6a589444f6ebc1e175b09d44891a55d98d85ff2580f61024c4d2e11d9581968edf167bfd35c9aa20
5a2d7080d4b453f212ca9a087276e2af4b695b285993f6fe99eb555ba6430cba3e57fbcd24dd9949
61261afa9d7ac58d501d27cce0d5bbc15717668457b64f4baa7991b0e614d97d16fabd4fb66c6fd8
18bcc421e7f96da655efb83b9a61974fc65742449621ccf00cedf4db29fa223b6de12c5e99e25677
33b93275ee048e09dbafcaa91b4d3cc5a7be05041534b0a148ef4efda38bb5218375080a31c1a63c
504fb984642670e57d34056602a399349ec78533cee0e96674e5e2ebbe81e68547c64b3f8de83a54
c4af682177c2f7846ed84eb01c1cbe1ff0eeaff12e48a7e988f196052cc7a30b0e767c6e01697853
934555b3abcd3fa56358a7949e988aad284b21d609806d906f64205da1d0b50cc4b30393431beb8f
eeac44807911e04dcbdb67b5b1d72ce63ba9fee40dc130a380cbd45f8783f2c2eb166a5068b87c60
c82972b3114b8b7aec96d0511f9c43770c52f5b4222e83fab7116499b5ef17d68dd73ae5d3e5812b
dbe155b784990100c1b9c04d48401ad21d706a0ff19301a5cb1a7fea1d1ab89e9b34054de0ce69c8
7e77c107b914552454c3586a5d0c5361533f4775a4bd5528c9731fe5c1690058b84c20cefbd27091
d3c1f5ef822abe0f7748445b1eb16937defcb7a7259a084e4eafbb8f63ab923f558e69577086fa76
3b9dc7569d2a3c20f3e6387f16589940e1bd3e90bc3a057b58ae71b678b503c69bf4fae13925d8d2
3dd823b7c9e21575d3e4f716602a3bc36597b977135b7abcf400cf69e7d2724e32723cf0af87f4f4
639180ca6d0443cafe8cf2e4fbf1531cb7d4ce3edf98160d4126ef31bad1ea45ef9ffbc41a955816
3da07435a6cd80246c3fb9d595cf12a51966bdaa5b58db382e3f0882fccc0062d80d77868eb4486c
55bbdb5295209e1e348cacf305fbed2abe8800e6f9ade04d36bec2f9f8995b65732e9271a50f3359
8d29d25516cec5b4cbd4b6b700fff40788a6baa7cfc14a27c4239cdffd85287099aad28046486cac
b75df8b32cefc62854411b1c8c2644731c6f9a833e61adc17d15595628d07b4ff557be2f4f620ac1
f10ae5f54ac79202be8cb4c3d949eaf959d7f7ae8b00ccf97f255e715b5bc9c910fa58175605bd54
6c8216fda42684cd5763213ae8c09aa10f6a1913b8bd033b237d34675936682d2b9460a13e82ff82
e1047594285ff7a3e9a128639cec9ea59d6966ea0c212f931ad3423db64c8e96882d7999a9d706af
12a691f7b0eea3de672ee18f3c25557d3ce3460dc0861b5d680790b5b451597220554216dcfcf3f5
2fdd0e81e2a8d312516218464b5016bf7594cfc983b420995a3b830dd8ed2f7c37044abee1be228e
c134906c3879bd70315149ee9a9536ba10487607589c280bc4688bf0d231c12de8f3a2cee9e206c4
797a33577772ec9dfbc8282c05aa8598aca87dfacd3328c1aed7184705851fbcd192274748836483
373a92fbd4df0c79f47496a9a9242781e4fafe3233b3d325368025be27942ed8d15fe419593b6c45
0a9be40f023484ee201fead97f7308975b9a0432a30e33159fc5b108c7f6269b25af98f543a84013
848a55287690d27e275d32f2b3d9ea4bb41e63bb6dad6a6d778289cc2dad126e1082ffe980c633cf
ab4d6d2b34d152bb9c492d8a8f26c8d36d3393e5af5cdc817c435e1881aef23ae5ace1cf35587f8b
ac3c90c37d4b991a75c6b4af9d9c343d97af98f4ddaf5dd5e80d5c3d53423268178251576845aa6f
9ec75b7f6fddfc26515ed87ce26635bb01208f41ed293d49050fb9c6b74d5881f56633ac9f3fc804
ed02903053d4a0c6d8ee45b62be8d3dce9cff19ae8471fd07d47fd7294e7c1e592870bda62310560
caa4b6f93cc53c7ced3d82daff55fe099ae442b88b94e2f32a4d5c30578c134d9b9cfe653b272d0a
7c0fbfa2ab9efb95a8e19e94e15022e1acf74047f9dff2f42bb4c2515ed50099773f157d807f1c2f
bee032957ad99c49f92950bb71616341f9bb63ee6694485ccbb9e266b5cda07068ae034014053923
9f9fe918479a090e331ec7a364a94ad042b63b8d0d1122ab3ea424c28d3b3a9e1151e4c3d0d933a7
fb7c25b061c831153b7ea9bc366f2e4ed524676228fc5861df715db2cc66e0d87d0cab4cf629035b
03c9c9b7cd34b922461d9ae419bd19ac81e1eb013fdc90f5d4e98d6a82d91ddc2690e7c5f67437c6
4054592dd8c57047126d362e8b85399cd1f8755e2c2d5f06acd3274026e003f7ed25d6a81b6b2c2c
728eb90640cea0e183e6cc129fba1a3405ce737da806e01c1264c5d53389cdf0462aa62e4c1a9ff7
8e56939c2594a5cb587e4665a0c72534477212cf7a6366d123c4f501ec40c4d69c65a37abf064bd6
b502b3b9c79d59fc79c9b06b71cfbe6d3bf569f96c9b638b4f5f18a2d97481633e75c8555ae60185
9856a1fd637c122308d9598274f5d769e71d0d0dce874d0be553e3e9301132f48619e2a5997e33e0
16eb3cbdf4e921132c511ba76f93df48ae2a9b4ee130abb42aa3e65cfd91a5b7f0c144e27773be5d
4961df530087a1fa66739ae2b859fbc3603082227086fc9d6d59c5fb8f719253967c2391edb5eef6
ae0c7f73aa56c43c75330acc8e380f19cb3337c6099d9e5211ab31d32210a32e2a9fa5420fc63185
80b139d6283f6eb1a4e65f9fcd91da34818368f8d87438f7238815bea78a6040de28818929ed4f15
b67d2e17a998d244f752be73b28fd7a55c76e5daf8001459184212515557d4558fef94cb9fb9025a
2bb7d8ac4bb269f535586553a00f45aaf7c8ef5722dc5ec75e59d6722422f982b90be195852ef8dc
97b300dce152848ed71c4e3d221d09e8ff5408fa18f348deb2cb44521ab36e4a3c1a98fc5e18cc7b
c10ca891581a8878695d6810402f494c250e73ee7722025515df73bf445334327e03d5e15be0d726
88d8d60c50a4a3b6d3753337ec8214a92459f4f9e88f2299479013b3bae2ef06e1557e1d48f83502
a460cf01a136104701550784d3d109502c693627f1e1f87cda896df5492f0fc04b9bb016102e0b94
b5685d97d58cd5679bd4c8726d1fb71cfb249c4c5f42db020d5cdbb82aef568bc0464c80178f1c95
fcd86c68315b021399757df2bcd6d10528b3dfdca0058760aa796343b844a9844ad49347ad7836ef
ec25c467eb65bfba1c77a0c7a6b489dcae6d4081424c3b8c81d9e3c2666305d7102bc909adc18493
d614b9f3d2fbc721d0369aa72923ded50442b21d67b871f23e69a82fb5c25bbd6b21a3d3bc9aed43
7f58773751927da412f7826bd0bd6e28d040a63ea2f96634c6678a5a42e67b8dd8839195e3cede58
2baa11ed0f64d1253a6c76e19f7dbd553a073ca285a3b42a54ed7181671920ee0dc358c0397597d1
843155ba3bae3f6ccf5168765c906722dee6410547a48906fc952f3a00c03fb02c24dfafe70a9ce7
7f08e95095ff1649d77b191ecb3bdd95ae9df2c5fa68f789ed259d57eabc1d2a8ce4b53b2225967a
ad5157a41afff4695db7fc518cb8290081a0f2e5657b5e4e3097e7b7f1d80866b3e3676f313ad4b8
9c8ac4773f5e6157e97cb73a8a75f6da7737b547413672145c8ffb0a570c45263cc98a4ad8c18160
f61669574146e27da2fa3c89b0401ab6ac264c1637a1043438502a5b432e66e3c84667a385f8b0f9
ece9041120d2f46ce4d04a9e71f3573040f3f93567ae6863ceb0d7aacfd5ec8e85069b7e433869e5
da6e8e492f0807ed7c2dfbcfac22860163974059608ce01d46595fbc7a438cb2d6927c6deac88411
9d3ca11d9fb61c2e002afffe97e3c73ea67a958fc6c0729208bf22d4ea568659daecda77aca7b730
a2e1ec1a3b998deacf47f832838dca7605ac42228607aa92288567374ca9df336de8045ebf63f67d
46732b22be0845a59cff82b6cd4d0d8b1ad217de8d8410485c4f809bb4f073d8cd256db54309b5fd
58abba05dba7cabb3dfd70500dfb2261932865a2188498cb2930deca9495d608abc648d7dc8ad25e
0be0149b29147a49539b5f86830d204d2e65fe2ee206fb5894df7f06a4b1e4760f5ccabefa79b0bf
4c1174b43e1d078c5941a53045331f699310a36bc0b8fadadb3d2fc4a20b515a487442432d920f42
b592c9550676113d6a1df0efd6ddd9cfbe46b4c0d7911ad51a8251122dad65480ea44975ebea27ca
25c9036b490217fac9057cc0d75a84deff6d9bc47fb49dbb127cd0b2734ae3a1d330c1964a57afcc
e7231cc777034b8419db7d91113a137bc582c1ccf40ab17a592be8df8c5f6a476ece1b4f8ec060a8
8fb6b9b304d78896abcd85316aa38b322a467d5f61cbd3f11a1015be424f738182460d28f06ebd75
c8911ab0406ff8a3307e84251062e1e9ec88e34437cde783b39c7f7dbcc2b5de3c4fe0e37bc0ce09
684948bc997bf068ddb16cae3fa91f7f0611994df09576f2c3b9fa669942dad4fb10e7f5331559ed
97dabb43aba1853bc8e2618bc3660b18e0494119a3db05355a1f372bb298e8b42240912dbc1c78d4
284167cd6253d5f003b34be1dfb7f4593fc7a92cc2b3317c3069f6b3787c422802743d97934aa0b6
98116afecc5f765067da86c689a80b357547fed9174e6fc66fb6bfe797904e2945c692efd0222cb2
5413e24faab7bb021fa01f10c33bb1a80b7869b5c5121b5042c46accb7bcd96df78355c3ce353c74
204266769e274a4bf86443d7c25bef32fb658928ec48c04fa4856a23067274d843569aa0cdd9942c
109b39969d7f8984c341e780c89fbd05d6aa45955fbb1795d9fcc6da622cfab4794393057eb7c865
5e388639244968cbcb3b6dbe4021a2a9491d62592238eb5399fff66f7081ee0b87b5479bee836a43
806e27550d931dffa2bfd3ec400cff52da4320f1440f4ad08eaab2aba83831e00d4271f8d6ee14b9
1d475a5b6c7aef15749343d12a6d3f4cc0ecd6b15484165fa6513520d5ed7602e88e218673ef2c2d
f5cd6576381dcbb33121c8b090b8265662ff6ee5c5829656dbd451fffee4adf9d492e25a7990f5c0
585939b7dfbe82244ab229513804cafd5e1430223e589ba24b3f6903e63694718efde48db4649a1c
b8031a3d1e0952a63b40f33d6a24c0822a4b67159968bc7ca1065228807808245225e37e21dc344a
e59bffd91f17929d0939816fc696ecf8fe230a86baaeb4a9c353ba66d625e9af0a7a8efd73fdc1aa
95514343df3d709e24161f65e56d947c07fc935894df305fe651bccaf6b3c72a1736398690e9bc22
e2c8eadbc2d8cfc8ac1e20ac2f42acd1ef57596d46aacc0ca23891c1fad09f62c727b637720e388b
2a4c028bdbd0268e6ee6ca13b0fb9afd83d2359e49cdf20630681de7259ac75c7cbb58fc268710ef
f28c6a982cc8cea2f5ddf84523da59d8ae45abfc73b6b4430e9b183f7de061da54da3bfbc1948893
0f21a62f4004aa1e0cddae9055b29c703068c1340da4784d12f588ce41bbd72c7fd2561aacbfb292
b5bab43dd182f3e7a9bca86942885d363f3074258a1b5c75950b8fd0ca1298ffca6f233e3571ef88
bec900a378c7ecd533c2bd4bfa184b24b0c34716206efd886542636b83c17a8fa19eed07488b2fc5
45e134793bc1185b729249031ffe7473ae08a4aa4eaa580858cb51bb0ff5e24cbff6fd40de427b86
4f95b90f6101420ab56cbd7b4bf6ebb455cb668f098e37911b376704eaaa4f816b8c2f3b9171e243
1c1b43dfdae3c16963591151272c6c868cd9872d7aba86d657fba7529a9e8ec77865cc8369db7dee
9aebb79133656bb20da9a2b4adb7090cad402635666fe39dfb242c972f6f5166c93b605481567d24
28aa533d9c1cdc58b87f784418f7608e70a2f25cc24c914baf4cdf8063631eb199d3e4d930a3c44f
a7ae9bf79fa9da2dc3b7dbd7a8664f2c4333d3f2927089d0661753fc44155dc1991bb486be53bb12
87f38ea6533d03648c6286fc30f4d247392a3d56d0b5d45c9379cc28db4a9c46c04deedc5814d5f8
8561be654c5bc5945edd729b30c1477fd460bf49fa5475ab5142cf806f187e4120299b3b0b8f0321
c419a8a9191789b05ef47ff08d7cc40c36e80ac3c2e384904005185139825f393c0bac50bd4ec529
7599e59e1ff90b8de11821ba4277829d7d3214324eb625bd48359960f65c279da5c58c3650dcd55c
d5388ca6121ddd74718d9c635ee9aa59088c47564ecb373f18c57c14cc0af6145d85c337dca69e86
3dfcc7c22b07a6a87e495667dac8e0af736c05a8bdca45b0e363e787ff4afeed6ffef69e01df7f89
5d6f2e83de620b2496c1f27bc821dd9f0b37d397657f8b01
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
 HBW_to_Column <Virtual>  0
 HBW_to_Row <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 MC200 C710 11 0x0 MC220 C730 1"

// Rung VGR_Copy_State_F#3
// Offset 18
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#4
// Offset 35
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#5
// Offset 39
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#6
// Offset 42
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#9
// Offset 66
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#10
// Offset 83
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#11
// Offset 87
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#12
// Offset 90
NOP

// Rung VGR_Copy_State_F#13
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#14
// Offset 93
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#15
// Offset 95
NOP

// Rung VGR_Copy_State_F#16
// Offset 96
RET

// Rung VGR_Copy_State_F#17
// Offset 97
NOP

// Rung VGR_Copy_State_F#18
// Offset 98
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#19
// Offset 143
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#20
// Offset 176
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#21
// Offset 183
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
STR C2000
COPY 0x1 "4 0x0 MC450 C700 1"

// Rung MPO_Copy_State#5
// Offset 140
RET

// Rung MPO_Copy_State#6
// Offset 141
NOP

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC10 C4 27 0x0 X6 MI7 4 0x0 MHR5 N300 1 0x0 MC1 C301 3"

// Rung HBW_Copy_State_F#2
// Offset 16
#BEGIN FMT_COMMENT 
"Factory 4.0 read/write"
#END

STR ST1
COPY 0x1 "4 0x0 MC1 C301 5 0x0 MHR1 N1 4"

// Rung HBW_Copy_State_F#3
// Offset 27
STR ST1
COPY 0x1 "4 0x0 0 MC1 5"

// Rung HBW_Copy_State_F#4
// Offset 34
STR C28
OUT Y39

// Rung HBW_Copy_State_F#5
// Offset 36
STR C29
OUT Y40

// Rung HBW_Copy_State_F#6
// Offset 38
STR C30
OUT Y41

// Rung HBW_Copy_State_F#7
// Offset 40
RET

// Rung HBW_Copy_State_F#8
// Offset 41
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#9
// Offset 94
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#10
// Offset 135
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#11
// Offset 142
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_PWM_On#6
// Offset 62
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_PWM_On#7
// Offset 64
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15 0x0 0 N200 10"

// Rung HBW_Reset_Flags#2
// Offset 12
NOP

// Rung HBW_Reset_Flags#3
// Offset 13
NOP

// Rung HBW_Reset_Flags#4
// Offset 14
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block HBW_to_Column
$LGCMOD HBW_to_Column

// Rung HBW_to_Column#1
// Offset 0
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Column#2
// Offset 9
STRN C210
ANDGE N200 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_to_Column#3
// Offset 15
STRLE N200 $HBW_Encoder_X.Acc
SET C210

// Rung HBW_to_Column#4
// Offset 20
NOP

// Rung HBW_to_Column#5
// Offset 21
RET

// End of Code Block HBW_to_Column
$LGCEND HBW_to_Column

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
ANDN C602
ANDN C605
ANDN C600
SET C601

// Rung VGR_SLD_pickup#10
// Offset 76
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 79
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 83
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 89
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 95
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 105
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
ANDN C604
ANDN C605
ANDN C600
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 114
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 122
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 134
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 138
STR C605
AND X26
SET C600
RST C605

// Rung VGR_SLD_pickup#20
// Offset 142
NOP

// Rung VGR_SLD_pickup#21
// Offset 143
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block HBW_to_Row
$LGCMOD HBW_to_Row

// Rung HBW_to_Row#1
// Offset 0
STR ST1
MATH N201 "N200 + 100"

// Rung HBW_to_Row#2
// Offset 9
STRLE $HBW_Encoder_Z.Acc N200
ANDN C210
OUT Y4

// Rung HBW_to_Row#3
// Offset 15
STRGE $HBW_Encoder_Z.Acc N200
SET C210

// Rung HBW_to_Row#4
// Offset 20
RET

// End of Code Block HBW_to_Row
$LGCEND HBW_to_Row

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 775
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 775
ANDLE $VGR_Encoder_X.Acc 805
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 31
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung $tFirstScan#4
// Offset 39
STR ST1
INIT "3 MC100 MC100 1 MC502 MC502 1 MC808 MC808 1 MC300 MC300 1 MHR0 MHR399 0 N1 N799 0 MC201 MC220 0 MC450 MC450 0"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
#BEGIN FMT_COMMENT 
"Presumably the VGR is in a ready state if in the command "
"queue, so always set this to true for the Factory 4.0 layer."
#END

STR ST1
COPY 0x1 "4 0x0 1 MC300 1"

// Rung VGR_Program#11
// Offset 58
STR C300
OR C711
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#12
// Offset 73
STR C717
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#13
// Offset 87
STR C31
OR C1701
OR C712
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#14
// Offset 103
STR C32
OR C1700
OR C713
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#15
// Offset 119
STR C33
OR C1702
OR C714
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#16
// Offset 135
STR C34
OR C719
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#17
// Offset 150
STR C35
OR C718
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#18
// Offset 165
STR C36
OR C715
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
COPY 0x1 "4 0x0 0 MC300 1"

// Rung VGR_Program#19
// Offset 180
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 189
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#21
// Offset 198
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#22
// Offset 207
NOP

// Rung VGR_Program#23
// Offset 208
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#24
// Offset 210
STR C300
OR C711
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 775 N1007 1 805 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#25
// Offset 231
STR C500
AND C300
JMP VGR_Program.S1
RST C300

// Rung VGR_Program#26
// Offset 235
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C711
COPY 0x1 "4 0x0 0 MC201 1"

// Rung VGR_Program#27
// Offset 250
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#28
// Offset 252
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#29
// Offset 273
#BEGIN FMT_COMMENT 
"Non Factory 4.0 Mode"
#END

STRN C717
SET C700
SET C701

// Rung VGR_Program#30
// Offset 276
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C717
COPY 0x1 "4 0x0 0 MC207 1"
SET C701

// Rung VGR_Program#31
// Offset 292
SG VGR_Program.S2

// Rung VGR_Program#32
// Offset 294
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#33
// Offset 306
STRN C712
SET C718

// Rung VGR_Program#34
// Offset 308
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1701
RST C712
COPY 0x1 "4 0x0 0 MC202 1"

// Rung VGR_Program#35
// Offset 324
SG VGR_Program.S3

// Rung VGR_Program#36
// Offset 326
STR ST1
ANDN C500
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#37
// Offset 339
STRN C713
SET C718

// Rung VGR_Program#38
// Offset 341
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
RST C713
COPY 0x1 "4 0x0 0 MC203 1"

// Rung VGR_Program#39
// Offset 357
SG VGR_Program.S4

// Rung VGR_Program#40
// Offset 359
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#41
// Offset 371
STRN C714
SET C718

// Rung VGR_Program#42
// Offset 373
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
RST C714
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Program#43
// Offset 389
SG VGR_Program.S5

// Rung VGR_Program#44
// Offset 391
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#45
// Offset 401
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C719
COPY 0x1 "4 0x0 0 MC209 1"

// Rung VGR_Program#46
// Offset 416
SG VGR_Program.S6

// Rung VGR_Program#47
// Offset 418
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 25 N1005 1 -5 N1006 1 300 N1007 1 330 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#48
// Offset 439
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#49
// Offset 445
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#50
// Offset 456
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C718
COPY 0x1 "4 0x0 0 MC208 1"

// Rung VGR_Program#51
// Offset 471
SG VGR_Program.S8

// Rung VGR_Program#52
// Offset 473
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#53
// Offset 494
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#54
// Offset 500
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#55
// Offset 510
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36
RST C715
COPY 0x1 "4 0x0 0 MC205 1"

// Rung VGR_Program#56
// Offset 526
SG VGR_Program.S9

// Rung VGR_Program#57
// Offset 528
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#58
// Offset 548
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#59
// Offset 558
SG VGR_Program.S10

// Rung VGR_Program#60
// Offset 560
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#61
// Offset 580
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#62
// Offset 590
SG VGR_Program.S11

// Rung VGR_Program#63
// Offset 592
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#64
// Offset 604
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#65
// Offset 614
SG VGR_Program.S20

// Rung VGR_Program#66
// Offset 616
NOP

// Rung VGR_Program#67
// Offset 617
NOP

// Rung VGR_Program#68
// Offset 618
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#69
// Offset 628
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#70
// Offset 636
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#71
// Offset 661
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#72
// Offset 678
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#73
// Offset 682
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#74
// Offset 686
NOP

// Rung VGR_Program#75
// Offset 687
SG VGR_Program.S100

// Rung VGR_Program#76
// Offset 689
NOP

// Rung VGR_Program#77
// Offset 690
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 V1600
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
AND C700
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 120
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 123
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 125
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 129
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 132
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 134
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 150
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 153
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 155
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 159
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 163
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 165
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 167
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 169
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 172
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 175
STR T9.Done
DUPBOOL
AND ST1
RST C900
POPBOOL
DUPBOOL
AND C840
JMP MPO_Program.S6
POPBOOL
ANDN C840
JMP MPO_Program.S9

// Rung MPO_Program#42
// Offset 186
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 188
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 190
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#45
// Offset 194
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 196
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 198
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 200
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 204
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 206
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 208
OUT Y47

// Rung MPO_Program#52
// Offset 209
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 211
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21500
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 22000
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0
COPY 0x1 "4 0x0 0 MC450 1 0x0 1 MC808 1"

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
STR ST1
EXIT

// Rung SSC_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"SSC Program"
#END

SG SSC_Program.S1

// Rung SSC_Program#3
// Offset 4
STRN X41
OUT Y37

// Rung SSC_Program#4
// Offset 6
STRN X40
OUT Y36

// Rung SSC_Program#5
// Offset 8
STR X41
AND X40
JMP SSC_Program.S2
COPY 0x1 "4 0x0 0 V2401 1 0x0 0 V2402 1 0x0 6500 V2403 1 0x0 700 V2404 1"

// Rung SSC_Program#6
// Offset 23
SG SSC_Program.S2

// Rung SSC_Program#7
// Offset 25
STR X44
STR ST2
CNT CT0 60000

// Rung SSC_Program#8
// Offset 29
STR X45
STR ST2
CNT CT1 60000

// Rung SSC_Program#9
// Offset 33
STR ST1
MATH V2401 "CT0.Acc + CT1.Acc"

// Rung SSC_Program#10
// Offset 42
STR X46
STR ST2
CNT CT2 60000

// Rung SSC_Program#11
// Offset 46
STR X47
STR ST2
CNT CT3 60000

// Rung SSC_Program#12
// Offset 50
STR ST1
MATH V2402 "CT2.Acc + CT3.Acc"

// Rung SSC_Program#13
// Offset 59
NOP

// Rung SSC_Program#14
// Offset 60
STRLE V2401 V2403
OUT Y37

// Rung SSC_Program#15
// Offset 65
STRLE V2402 V2404
OUT Y35

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR C10
EXIT

// Rung HBW_Program#3
// Offset 10
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#4
// Offset 18
NOP

// Rung HBW_Program#5
// Offset 19
NOP

// Rung HBW_Program#6
// Offset 20
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#7
// Offset 22
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#8
// Offset 25
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 27
STR X11
SET C110

// Rung HBW_Program#10
// Offset 29
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 32
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 35
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 38
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 41
STR X0
AND X3
JMP HBW_Program.S97
RST C303

// Rung HBW_Program#15
// Offset 45
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#16
// Offset 47
#BEGIN FMT_COMMENT 
"Presumably HBW is in a ready status if its in this job queue"
#END

STR ST1
COPY 0x1 "4 0x0 1 MC100 1"

// Rung HBW_Program#17
// Offset 53
#BEGIN FMT_COMMENT 
"Got Valid Factory 4.0 input"
#END

STRNE MHR1 0
ANDNE MHR2 0
AND C301
MATH N300 "(MHR1 * 10) + MHR2"

// Rung HBW_Program#18
// Offset 72
STRNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#19
// Offset 89
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 N1 1 0x0 0 N2 1 0x0 0 N300 1 0x0 0 MHR5 1 0x0 0 MC100 1"
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#20
// Offset 114
STRN X2
AND C302
JMP HBW_Program.S5
COPY 0x1 "4 0x0 0 MC100 1"

// Rung HBW_Program#21
// Offset 122
STRN X2
AND C303
JMP HBW_Program.S99
COPY 0x1 "4 0x0 0 MC3 1 0x0 0 MC100 1"
RST C303

// Rung HBW_Program#22
// Offset 132
STRN X2
AND C304
JMP HBW_Program.S10

// Rung HBW_Program#23
// Offset 135
STR ST1
AND C305
JMP HBW_Program.S100

// Rung HBW_Program#24
// Offset 138
SG HBW_Program.S0

// Rung HBW_Program#25
// Offset 140
STRN C100
AND ST2
CALL HBW_to_Column 0x1 DST511 "3 N101 N200 1" "3 C210 C100 1"

// Rung HBW_Program#26
// Offset 153
STRGE N101 $HBW_Encoder_X.Acc
OUT Y50

// Rung HBW_Program#27
// Offset 158
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#28
// Offset 163
STR C100
JMP HBW_Program.S1
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#29
// Offset 172
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#30
// Offset 174
STRN C100
AND ST2
CALL HBW_to_Row 0x1 DST511 "3 N102 N200 1" "3 C210 C100 1"

// Rung HBW_Program#31
// Offset 187
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#32
// Offset 192
STRGE $HBW_Encoder_Z.Acc N102
SET C100

// Rung HBW_Program#33
// Offset 197
STR C100
JMP HBW_Program.S2
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#34
// Offset 206
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#35
// Offset 208
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#36
// Offset 221
STR X11
AND C102
JMP HBW_Program.S3
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#37
// Offset 231
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#38
// Offset 233
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#39
// Offset 244
STR C103
JMP HBW_Program.S4
CALL HBW_Reset_Flags 0x1 DST511 "3" "3"

// Rung HBW_Program#40
// Offset 253
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#41
// Offset 255
STR X2
STRN X2
ANDN T14.Done
ORSTR
OUT Y48

// Rung HBW_Program#42
// Offset 260
STRN X2
TMR T14 100

// Rung HBW_Program#43
// Offset 263
#BEGIN FMT_COMMENT 
"Non factory 4.0 workflow"
#END

STRN C301
AND T14.Done
AND ST2
SET C300

// Rung HBW_Program#44
// Offset 267
NOP

// Rung HBW_Program#45
// Offset 268
STR T14.Done
JMP HBW_Program.S97
RST C301
COPY 0x1 "4 0x0 0 MC1 1 0x0 1 MC100 1"

// Rung HBW_Program#46
// Offset 277
SG HBW_Program.S10

// Rung HBW_Program#47
// Offset 279
NOP

// Rung HBW_Program#48
// Offset 280
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#49
// Offset 282
STR X1
ANDN C300
STR X1
AND C302
ORSTR
OUT Y49

// Rung HBW_Program#50
// Offset 288
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#51
// Offset 290
NOP

// Rung HBW_Program#52
// Offset 291
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#53
// Offset 293
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#54
// Offset 304
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#55
// Offset 307
NOP

// Rung HBW_Program#56
// Offset 308
NOP

// Rung HBW_Program#57
// Offset 309
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#58
// Offset 311
STRN C100
OUT Y50

// Rung HBW_Program#59
// Offset 313
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#60
// Offset 318
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#61
// Offset 320
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#62
// Offset 322
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#63
// Offset 324
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#64
// Offset 341
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#65
// Offset 346
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#66
// Offset 351
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#67
// Offset 360
SG HBW_Program.S9

// Rung HBW_Program#68
// Offset 362
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#69
// Offset 374
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1 0x0 0 MC2 1"
RST C302

// Rung HBW_Program#70
// Offset 386
SG HBW_Program.S100

// Rung HBW_Program#71
// Offset 388
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#72
// Offset 391
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#73
// Offset 394
SG HBW_Program.S101

// Rung HBW_Program#74
// Offset 396
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#75
// Offset 413
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#76
// Offset 416
SG HBW_Program.S102

// Rung HBW_Program#77
// Offset 418
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#78
// Offset 435
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#79
// Offset 438
SG HBW_Program.S103

// Rung HBW_Program#80
// Offset 440
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#81
// Offset 457
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#82
// Offset 459
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#83
// Offset 464
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#84
// Offset 467
SG HBW_Program.S104

// Rung HBW_Program#85
// Offset 469
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#86
// Offset 486
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#87
// Offset 489
SG HBW_Program.S105

// Rung HBW_Program#88
// Offset 491
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#89
// Offset 508
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#90
// Offset 510
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#91
// Offset 515
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#92
// Offset 518
SG HBW_Program.S106

// Rung HBW_Program#93
// Offset 520
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#94
// Offset 536
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#95
// Offset 539
SG HBW_Program.S107

// Rung HBW_Program#96
// Offset 541
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#97
// Offset 557
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#98
// Offset 560
NOP

// Rung HBW_Program#99
// Offset 561
SG HBW_Program.S98

// Rung HBW_Program#100
// Offset 563
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C9","rst","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C301","","","Factory 4.0 Pallet HBW to Conveyor"
"C302","","","Factory 4.0 Pallet Conveyor to HBW"
"C303","","","Factory 4.0 Home Position"
"C304","","","Factory 4.0 Sort Pallet"
"C305","","","Factory 4.0 Manual Mode"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C704","copy","","Deliver Puck Train Depot"
"C710","","","VGR Home Position"
"C711","","","VGR Pickup puck HBW"
"C712","","","VGR pickup puck SLD white"
"C713","","","VGR pickup puck SLD red"
"C714","","","VGR pickup puck SLD blue"
"C715","","","VGR pickup puck Loading Bay"
"C716","","","VGR pickup puck Train"
"C717","","","VGR deliver puck MPO"
"C718","","","VGR deliver puck Loading Bay"
"C719","","","VGR deliver puck HBW"
"C720","","","VGR deliver puck Train"
"C721","","","VGR Manual Control"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"D0","True","",""
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"HBW_Program.S0","","","HBW Pallet HBW to Conveyor"
"HBW_Program.S1","","","Go to HBW row"
"HBW_Program.S5","","","HBW Pallet Conveyor to HBW"
"HBW_Program.S7","","","Unload sequence go to column"
"HBW_Program.S10","","","HBW Sort Pallet"
"HBW_Program.S97","","","HBW Job Queue"
"HBW_Program.S99","","","HBW Home Position"
"HBW_Program.S100","","","HBW Manual Mode"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"SSC_Program.S0","Reset_SSC","",""
"SSC_Program.S1","Init_SSC","",""
"SSC_Program.S2","Calc_Pos","",""
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

