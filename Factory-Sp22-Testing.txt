// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Sp22-Testing.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
884186606bee7dd4a49d6493d8ef7126749aec53d3d62229383a327cd8b1e62745177c1c1ef733f2
792c07ad25535aa4bf2c5fb55368b72cf1ddf63893b412e89dcac888297de5b48acf832660146164
b75facadb08a6f13d424f58a5c40b78c32bf03cb67c991eb528fd83844e45c14fe38fa93efb1fa34
b36708d496549dd3c0ecdb29def1c1e0d6b4d90e99dde1461a654dbca6541139fda2079b6647d42a
a18f80c8bcb9a1e33d58603ef84aacc91fb64aa26a11e28cc4860b88ef5ca7cfa65ad4c8372a75be
0ceeb06fd09320e0596538d62ceaef238c67f43302275ed76a88f308b35b4b1f608d0d32f7a865b0
412b6f65bb431fdefeb7507c2a4b27b5c31d4b8d661b92663a6f78f1cb61af43d04e17c82b4f3b3d
07f87e6008778191f0200e0e066353edc725d85a9205f234a8bd9491e3809272227d8a45b72c4fe0
1176135670443923ae3b05a49cde1429294a2f9b0c7d8634270d3868f2b19aebcd3e6b5a33099693
bb2de6b63430f3359f0fdd69391fb0ea14fe4a4d37cbadbff89bd481af0a8d855cb601a1d9b7f2f0
eed185ded2d8b6e3f3e8c7a3cd0b1ec88b6a6099d4cb6eea4299bbe55e245df0236c59c40ded8db7
5dfb0ab9d919d2556b24cd8185cd983e7854d67e6a660b687f0563daf2f6e2c086c7a04a0142f157
defb4170d780fbe128cc31387a7ab18a1b0b538e701485af28a27a050087de6634e6929bb6f6b0e5
2f435f3c5eca1025b4739ae55fc730ce1e75ef2246bf90d0264974186204edb885279f2ea3cb43bb
71b19286d188ded5adc0763607e007d297f7d550170137e1d96da8774442701aa82ff295e5853be5
3d799f647ae3442243c50628d0bc17bc3a2bce1c75b66aef293450aa8d1609fcb3ab496c524be3f2
1edef3e5803269a9e43d5bc9e352063bab7e1193aaa466928487e55ad059952464ed66bbafda1c0f
2fb31e227ea7f02288750bcc9d07e8677cb2120ebe0e9920cbfdff4c21a64e60fc9cf5b3cdb51028
c884309ca3273e078403bdaf7ece3ffd548307edfe5b45198128e6080aa320a943fdea3f4d0fe220
6f1099a2bccecf635a5e27264460d62080ec6511221831fabf15f68f754c153754d22215ef18e870
30f1b0b7a15d47d37eda28bc5a18fd1104363dcef96629451cb21ed124af14eef2e340b36233668f
e2625de4f2cd8fcddb6d418607f25c80e65e2b705d757dce7d710613f05acda87b105c4f0bee05f4
a8eb3cc50f8feb20513da508361d79e1c7c6de0f8b954d243071f12e801a38599f35bd6ef534bc06
b1746883729623736e8570697533db59fe377705c92cab5670b06cef729b39558707935c85bdb521
137133992f9b5927f4115b6383977e6cbddafbe1b1089c23f40c22bd866d7050067d9b876eaa8cd3
2d6fb515ed0513652aa332c6ade6e3f088e456d6921a84eb467c8929619a56bec469f15106ee3efb
febd20b9d78ffb1564f61b5f9ca6b84621f5aab9fe3fb1adfd1a3d321efc0a315e52d02d72abad70
21c7f3d93095f7c3f6670abb6633e53f06d51f3c48597e5d002661a6f8f8b45bf5af3f843c831087
6465754880f1efb1612ee85644a521d8d4c48f37d1cea62ee4edfe18558abbcdf3118c1db55b08eb
727f4b5697091efbbb4e9ed868d68d196bc9d3ab294ec4a6b11db50369f29512a6006fd6e05b6ce4
c485546255c69a628fc20252ebab7b993fb8f0b7cc74d9958dd8b5382d6c5df2db9369eac9278234
3396228d0996b262fe2bff60507bd8ffd6537b00564d0be66f2d16ea6d121ee82c74e22325b19c2b
3b94ef8a8a78501a53d18f987fb5079d7398b62139018c0fe85754a68e4432b0eef91ed466cc5e1f
bd30aac23f53eca442ce9d7a9691c5ab43f8fe97a8e0b3a330fa57cbdebd3b596f4154e832c5fc22
c784b18ca6a11afa14a4f40de061dd8b6e2e1597659e7bd142ecfefdef507c2b6eca48dcf1bc912c
b04b3d80745709eb604cde91185396fc438197d69d109a037c31393793a01e4bfdcd67e3ede95ad1
45fe477e26337df4ef22210892216057627a9c547d074306b726904de48581fb3b8fb9048c569eeb
35c462d348d4e3346bcc5818bd0e801251a44eb934de8893a5d011070ec44f897e2a1746ffb32c83
4c37fe032dd7ec6644e1fd6c8d12a28b843aa3b35b817f13d6336e07c4353d5383ac39ece0df293e
d7e50dc739d6408408694ee67b14c4e51d4981acd0f9dcf6f6d233130a4f0a312e620618787a6c31
311eb41c5f4c0d56bfd1b7220f735b78d25f7998b089cce5c9d6dabea1c1dcca97717f165068c9d2
d1c68086988aae80a3fb378604dd151ccc2c86fd71fc4d2ef4191cf0025b5f300b000a9a465ac8cd
3affa38a4fdb43ba449340e0203e046d662c20c97d2d607bb4cea327263c50c2d02de8048fc74e2c
fcb0cc74edd5fccbe1832c6de7ac1b8ac4bbe02d003218615cc4a2f8cc4b5ffc08800b51407bba15
40990d3ef79d74a717c013f63ddeb5794a5d992721957edc96ed6339e1b615b546f0b1014870e62d
1a9608c9d8569b8925139881cf0469bd0bf7d82864881be0da33092085474da4a7f225af79d3b836
a786e7690086b6bbc8327bf94d38345bf9001c153da21419442a414e6d544ca1cddf73479a532430
de43b8a0800e5df1f15fbc07f62146d2a5aadac4b3e39fd03823c07ca1ea54ff123e957ba86e4ae1
470510444ac6b0c5fdb27edb2834d4fc62cbf8fe7b8559c8cb53140bde14caa8b7477b51a60664fc
94ac5ec9ac609f33da333b553261df057cd6e6a61e9bbac1939e943be6429019a16f6b075843b00b
f1ed76fbb192280f7acbb2a0dfa844c43277a72e2a2cd17143328fca87952b780b5f9375bf5ee472
25131c5ab6ae147a18034b6395578cd29b2201a7e53d804183c6d1bec8310782d438f1b349845385
66aead6c646140dca8354fc51c53e90380c56a62840e54a343f22f032a9fc6e063185c518875e327
1068a2956b70234a8dfdc1e6e2267693d544013072c64d6af5d74f6a2d1a7cd34eda1ad044ac2679
9d7cf2f593281e88da9b88a2ccbff508cb45fc967245a3b9f9aca86d0721584b50fa8ccc89fe0bb6
1f7ed49d897598ab26066ce959780a32bb9f2d50ceea72ceb1b0433fe05117e00b5b30af384c0851
4b6269f60d47aad0c4dda0c2990cfda1cfd37636ced89816926a3b48296ba181ec389b21aebe23c8
0b9c2a2d8209979266e7f33b5d39363efa6ce989a06c40f9158dc3bf232cb5b00597c2212fef944a
b40ba1538d1bb1cef2dacd52a9e30e34f4a539f74e6901286ad400e8ad4e29091a00d600da90e0b2
b818c47e622594ce10873136999db243cf3fc8ce098a9f45b358f47360ad26e407ae4c3cee38b986
e60126e48087ee51d4ce432a288abe39208578be674139675918bfd55560228d9fe7ca3198bb67d3
deef059db1b436dacf875bc1b448927b2944d984aca981a0b6a3e26cbafb5c36361c366a4eb93925
abe06f7dfe51293f45b86008f953f8833d900d5d6b36d1f80c6e97d3d8dd7c000f5c8c69aedc2983
b830aa1a3b286c3ca38ab56e4e87bde558e8f87a20f6cbf1d6dfe1ffced07ec2b8d91e86cf2996ea
5917f63f048ae503a792e0556ce8f51283436e5bf3d34a0546dcd7de7cc00e91e04db03697991515
3f1c54d8a673e2aca59cc9e6e3ad4f73fd444cc2a17ea8038de4669b1dbcce02f97a16f31360b263
dfd2bb56f1ebe027c0d5978c38ce7d4c48d6f53356c7f1faf568e5321ed9be89171271481c4ac330
629b4bcfe4b3228bccfee64ad69101a12a042a2fbafabeac965f0d976cc9de83137e7af82eb45f5b
f9458b0a7b2a71397e925ead80a3eb6712473dfd52c3036184d4b9bd3fa933f035324f0392003247
0253a25e13ba80c677cc01037a6850057e9b2b4642c02af0a8f7ca2ccb5a0840486753936f0685e9
0c2c5d5fec8bc1e31a0a57ec74d9ce4d37c6030479b52694c758714e91b1c350bbbf18083edf162d
f31f22e639271c3f9506486a131421fb30fa9ede0474b0b7caa631eed4611a3424da09fe4fed99c7
e2c8cb7f893a3dd82c0c95da19826967c57977e1a4c73abc1d0fc3105198bc9ee336f58de1f0fc37
ccd1e0fe50a60cb39dc99f88db6cbb338c527c358311cc9bcabf5e95ed2a857c17a1f67dcbddef93
ccc5a7f3f65c31639c419bab23752bcdf2e81fe9089957a44a1abf3aa2ac94300bcbb6262c5f48f9
5eceba41817d60e9c5d098d98027fc7ef16f7f2213da0058d2d45a5b855bee41e935224838f624ce
73d2d91a729566900f8238f085021bedb4ec97396fd9813472eba79dc3fcec146036015221d38307
f4261c33a57b4065f0b3b9f0a48119f3b60ba87e9ea9b31316c80ea51009e6c876df82cbc92da194
e4b18e90e3f48cd90a4f42fac64cf5f3fd9ef8023bcef0840db0a0d0458e8c65af368b9c73a94128
5e3321a6bfa894b543074d553773d4c6d26be4b85edf1f4da8a41824ae172a4c149dbafae285f051
5500eed1f5b4ba04635c1d3b2ccf1556700d6947093bc793c05b12dfccc3f01a45795e8f9317d39a
31d54c6d8cda44cd5a62924eee471411b738c57ac8ad0a293c6a792c5659afd2cd100b76f8109fb3
9704b96167d9ca4566460b005308e6acdf49ad58e70858aaeb6468e8cb3de58637b171c12fa4ec69
1b63bef138211bc4e96879ca3fc935d47f5868a0a87b01e732ac336456a2b735c5e815176f34d7f3
920e0c4a36052a3df74dc0e24cbbd88d275808655dddd85ea2b49707a01e2a65ceee1aaab80ee567
2735170cf2adc400cd530a304da0782f37859721ca3e556e72abbc5b7670c417fbb56893b3fbf1e9
395457d1269ceadc4f86ec7ae8167d155265162861bc4efa60f0d133bdcf7f51f503e2732f5fb5ec
31a44c294775208d95c95c9bd691cc8c6bd40fd3f561f1785a34c8bd02b7aaf663a43fa7a90e5a20
07b79f1b6af7ab16cabc03763b564eddc9f3b3aea19793f67d51b35bf994faf0301ff4344dc7080a
b2b7de76d712c14b1092e09ebfb10e6768cee155881c9efd0a8426c198910a60558173730cf7d85f
0ae8e1573863f2f113db6c081832016efdbf25a0f6885f08d32a365dbacaf1f29bd951539b460cc6
60c3cf751430d719723829b74fdfe75095f037994abd8531e53fd404e5f337afc680b669fc740db9
4674e9ef28e987ade2941543dc8278a92ba8a3f9a398663fa97ae536e27a5a0d73e0f2f74cd3f3a0
81c7941c18eaa95175f93aae26512c170161e6788fa989c451ad9b8e84daf9c1f976a3b7262c9af6
512319d85e7fec1d7fa2fafc0f986374a14f36edffe621aa95f4d52cacda273371949a8878a9d17b
03159706015252d887a6b0687637d88974f639c1f0ae8720955d04cb6d4c80093ce7d14a0463feb2
40c491bb036418d99ac377f103e485f70fb22d8021968f9723e95d899ef72c6397a6d9bffd9dc326
86e675aefa0e82348e7c7a08da848cac26ee42c630b3a76c0eeb7ea63794ac2ce17e0e8ee59b73af
d5c67e27e8850d7f2606dd12c9772c6f078bfb6104b0ddc8c47dd812c32225a2035c80d64bec55c5
d22b51659477f3a9169e5a30e19d8b5816539cc337ca0ebb628331b6ee85da39a8af542f0e3626ec
890fc06ad58f1146ceff7da13f999dd6634136b6e93d19cc5c623d5e9dba29740833f40cfa0b5590
99b70cc1f75031f5e9c2a492f45cf11383fe606905a4e04b8f34113e70fb977a68fd4e26012bb704
87c2d2ec7f5115762689185b6c24aef9d0a327e5c51573da416f1e65985929712f3f498c1a99b0b7
c148de4c2087de9532b3852e0104f061da6e0828c1dc990aca3ef6b2a61749cac82be0525debd4d9
49419350571e7c4968d32f54e7132502ea5535ef12090075ed5ce13320f052a96f55f02934dfc4e5
72b5646608773e4f9b2b2024325db6e524e0f91deee4833435c3275d81dff1e49e711f75c515f194
eef8ac34bfdf962b0e9e81e88ba7a53941d681220b0d1814b078be703945e10a4a178a0a625caa92
50e6e335ee03ee45ded4dce09546caacab65a0a0d15099d9b0491fe0dce9b681e7131c4474a89409
9cdfa15cabd5caefa25ae4abac5837d876391307c3e56f40ef436357c0e6364e4ae40dd1edc34b53
8308fb2fda83da529c9ffa029ecd62e9534c1eaaa014ab3360b9f219701fdba499e456213dd6f06b
5cb27307df08e834d01be3ad79dea701bf90856b7cb9173c0948ece6ef717325692ad1c25c8bc618
6eb0e0f96978761d400949327600d11df05d07160411693ae13f3e4f7515469d6839a6cab7b80a20
ce7e1d3fa841e1d397b2a6f76e752f0baca86cd6a4efedebe17ffc655dd41da89fe41b1e307cbdf9
4121c750c212f49ca0249d92402992bc87e05fedaa3d3402fb867ba816bb3901b48321860980f661
1178d61ab1145e0c52ae57f27bac928cebe2d1ddf254f52d0bb21b3e1eb1961197bfff7402797445
6bda4e37036e1de22de19810b5cefac620aec4d4cf2a5b832061b962a335886ce947a828d42b1d7f
e99809a2938f1b8c10e14d868974e1275eb76435fbf242c1bb24f70ce31ee42326e7b9ecb4ff3dd3
e50898b609a0d39adbfd0702f461c7e5c3b54d8f8b9844e8df633a6a15b781c3e85ece3f814f22f4
6e4207700ab0f0f5be2f80b9ca0137d22aff70607b60ed4a5f1bd74b3a70961b4be79212b5c7a9a7
734dd38abccf3e6798cbd8aa6cd701d349ba498372eb636ca8b49c43b532938c68995f49a7f1d030
c76551ffe3514feadf2671c00df16dba30023910a5474a10f74800dd10955ad6422d573d582ca30c
e069b585945fab83b0778e469369d429f3f04787e3a34612aac412b1d95f6731ee5336ba7581017b
d378ece6f304ed046369188e71d1e317912128128ff880a97032d73db7d80e2e45231c2a00c79b28
3ac5c0b2a5eb5f7a297f80e69b4d5266ae22c1a1aa6b792a0672d30eff27bee6073db9239b3ba31f
8b067d0a592cf5aa807e711f222f2dae43547bbc8075ba3102bb9259b44b9b5a6627849778730e5e
5248d95f86a8e87384b16784f8152f68e99c25913fef135ead210b46c4dec01dfa7074b35883ee44
eed28458dc1edf6a5e9971e61328b5ce3fe05c77d35525ab0f0d471030353fd24296c19125a204ac
0eee3fee53df581367cb173e081131cbe11017fc63a0e7319ab2de2e95fb7ac8b06b58ce85070e3c
4a5e9eebcd35e7a3f8395c81f0258b4eb8ae09b8e3db8f1b089f55571118b63ae8565c1d98200a9f
06deca36beb986eab410e60531a249378f8a994424a2a2b5f2753a3779d9e79fe24efe6b68480c84
0e462b24b08224a65d12dcd149c3f0f73421863cbb3d60a320a57eb6ba14d478cf0ded8ce88242e5
13ae8df70a7940abf19b8fc492db76f3a647fabf781be6f158c406fad014614385424c316af010aa
09767431d3127311c7803c3ab5fbbf789858cec1112eadd5497bdf1ff9860d4ccd433e26f7617dd8
8b32968416ba603f02c4fdcf46db92681c9e219869e552d74158dcabe9e1b9ce07a3a07edf210857
7779db70a7dab67f4c743b0c96caa0f9aa8a710b0fd96d8ef28cb9b215f03dd5d78f93d9336d52a4
4de4b6036785eea0895aa5b14df38ea33375489563462b681da48585d0ddbd76cacc1a1631c159ab
33739a163314e447bf66d028eee693bf88fad1e93c4d465378093482e9409feddfdcebc220d09c97
99904e8cbf98c2c862ee64cbb8e46eaeec6398974dcc280acdc69850463c3f9f11875428f016f510
b64b6ecf93fa3d6226d395f2af7d4c92315cb620524e92833eafc064dfe550b9fdcc0b6e7a04d633
823b67ce259bb8a6c7bc642a8725fbdb8716053f3ae396a0105ff05a839a124b8191b5ed5e70a949
dc97896b4867ec912f3b63cc459861698079a815f8d92201d268407e382cd0d8c72ccf80275382f6
266a2945904394859b13e4bc52005cf0dbc86c13710c09d315f6f1a047b426a0e254045c29d16ea3
22d4a565f40a822da19236810a9b395951f8de7f0337b86c321e8fcc83a8352d5f519bd0d63dd5e8
3305923f5c47f94d96b846da140c3df2e5f3ee6cd6ffc745d69a471143bd795fb7f800ec43ed9556
0fbcd94e6a64880443fa76a409e489388ba91c541e51be628a1b5aff70124735617e88577c550e88
345479379227dd9985a8031dd6996918bee7eaec8fc42be1a2beeaf1ce97446614727dcb3724bfdb
c868f3c1678e035420cffd5e26ed7d4d4813583fc45ecbd7f33a41a084b7bf3376c407c760143911
e95e43ee6d766e6ddb7c92a7674ae04af8ffbb82caae7ebefb4951bd65d1820a5cfd26126e887d58
853c97f71adc09d710ce228cf00f849dc48ccc3a2690901fec5dddd968c71e5112bfe27223cf4917
9b8d20a165fcc09575f06dfef614d13071a7bcd6b1c93b440a3a611526dba37bc688d53f84cf7811
309aeff5805c405994c23e333be302c08276db15d925c173973ba1288a01d368991af32c5abcbbb2
d9225bf1f77f8714a80f457b4726fb63e31bfdf8bcbc32e44dc9694069f832a16a5342e636aa16e1
794ef85918e0b14f0cb077e06e709cdb7a02542b5513d275dcb09d79e1115227cdab2dba174e6e37
abd0bef877d754853d6e593c8290d4404989abaa88ec9e5a71d3b7410d912eba3af00d87b9db1ef2
38f192773aec19bf4da9699dd734e6c62c468ce3fc90f784d0f486034397111d95c0252abf89742a
733099b533120b0a9b3f442029619fff4fcd4ac5cd730ceae1a7fbc91bcc3317dc2e94f56018f640
75b84f70ce4ca592f2fc7d08938180d309f16664017191195dc29790869fb01c8854537b86f13595
36786bb961e13e0eb09f6f9ed3c067135f42abdf33839e3fd54d2a7b0506d26a862ee8144d56b641
6ea9d7cde7369001744808ee2433dec7e33e0b1d28f11ba7119b36209f3e633966325a6c65f18e77
e18861dd19abb87051a1f20306ef61b117a2c43a498c675c5ca2e68aed99d54704415164a9cc2856
c44fad597f70c1b0513d49bbac8a679bfba30df7b7e25e95596a4fc2e5c5ebab0ae0c011c2350396
0dc90bc845cdf9fd665a5a14716865c206d23669accea210515c89c59ce43e2186f5f093dc92d53b
7f968350d4086a63fdf5950a19bcb8c945b4ea25cf972a962466defc151ca5e88a6c4512e1867197
25cf93a3e8fc53d3dd49cff17aa1944d17a690b0b52f10629f43dabb1a1866d31af079cdaa0951c4
0149f542dcb8d4b40c6aacc02e36b85ca7a690757144ccb88dbac595b0bf26f695482f1d089f01ad
2ff3556b9afd676befaa8946721f44587bb6274ce18e998ad59c3505ad555e91b8c59037af29b2ae
b5dc8d8e948972530688726057bb4bbd02bf11ddedcdb3ddefd72939a4a9b1e52cb999d1ce65d871
df6f8364a9dcc82448263c6c1992f63bcf79bcc50076c2f3609ba5880e1d6633949d4ea794e0d226
39e7b5571cdaa16b24a0216dff9a7b86a6f61c6f4f062c6a1c8d55ef3836586d85d8b622d9f258ca
c7b50b828f70f4d621f787671e7cf27e1df5c020957dc97db93e9eca1f4e7a6e9e4e94ada84c562d
95de337f9ecfa2e4be6712cd619d0872973519768ad036ebbde5922739eb597c8afcda187c9ed80c
bb01cc6851185bc939281c2951016e080d644f32970e5b7b2c6fa509c53e294e480479af982299ae
5ff1a1af7529dddaafcab4d00898a74adf0f0cb02f29dd51f1d618d215ac6af58fbbbbd3aaa5f607
a19863ba9a10a6f9f75f6277dcee61cabcff95df5c20157328751b5fc67a1c3cf378ae8325235d78
e7449eab63227b22906c233f859aea42e106d961b1a2cf568f80d15635e7229b468d0b05e95ec655
d4bd9923277e142d3cb75a52dd93f9fedaf46b070479dc5eb9f3e07a5aa15db09d53cd8a5eb86d23
f2f138d97af678a2a70168b9deffedd085f73419d81b1562d5f8201a3f9590f626e1da38f85c3095
80cd03aee4c5dce006f513bf820c0ab7bc6d2bdb641e41890ac69150d74d3aad4b9dd15f27486e19
b78ba48bcbad6e8158ee0b7e972c419ac43cac4ad24e158ad82a8b66b6ae0a9365306b797d0b2636
b0c342f905e78c39cdd2849e09779555bdd2efd7496e485fc1bf069a6a8cf2cb05c608930970bdde
99cc791df273e27320831d243a10dc6b2ed2ea4d094ba8850ad0b903162cec139c0008f383cb26b1
ca5a33c26baec42d72ee422027f204e2aa91a2cdfac557ccb2d61ea66cd1872611b7df8e80999e2d
c116eaed1ea0458693744bc994edca68e5bbec1fe963f93c2d53f484d09ab3630dd8880c045a51bf
d3372069d69effc0f648dd1698aa52d1fd90d053333c4038f69ad6e7087b7c41fe349440e40857a4
684fa6172ffe001af0142f71c1c43262dedb50657d69ee1801cbca3aefb3a08f5af3562f32e783da
963930d1e6943c7d3f6b646f2dd8646fa96085e3479011575b4c70f6bc8ca9d08b65b2fb1e22c332
99f228533e53d4cb52e9e8953d50e82d3b6d0c9a03186a555d08c3b543ae83eff5f5008ccb46f9e4
5ddd6a46a0a4d9e0407c789132f7ffffa57703649549d41b7c0f2cefa5292a75dce08e1ce25d3b08
2ae205c82b2a1182b7e27cdef38e82b6d70449b0c70f32ac95c3824e8c28d4a884d0464563045fff
23306d9b62e41ab75170ab8c98e2f825aec3ac5900031fdb4192e6c960fc59259a8973205650bcc3
ec296f8dcb2ad33f7af229e460f564913e80015af1a96cf561faef167bbec32a1842631fbaa60368
0c5bc629e52b503d0e34fc38e1e46a472a511a81b17dd9d24b8826e1e0a3b1da522b781e6b2fa069
6291cca9e9e340da51849c78ed98f61a6b9516a56dc6b6f4d4d533e10aec461813211d2b2a44fb66
2bdcfba03c6f1364481f28c52a101b3f2958a05226b1f77087089043003f3ff7da9c36dbe7595895
78977bb1b99bd0c5281bd7902c3ab9277d5cc83e219a51785e97f95537eed71ab54be0e506cd48bb
a08b4f70ab1b6f1bd4498b2dc1416a432be5a2e1ecda249f547705c6f1a27144e9c068fda96a24c4
0c2b121d17a0732a340e6822968da48c35d5b883a593392103e8e2872cd0dde1131cd893b66cf221
e15c058e24d49b0c1784c83293a6d4576762066dcab9476d091936d6d0116f187b99ea4546de656b
accde2f30722c04bd3660ad715842e98f881961afec3a74cc8f9fbb824da019997b853a4b6486e22
94eea302fa12183d83705ad9337bdeb3b048616830cab26c5c33765e42dbe1914ddbbd6c50c26206
aa563f3719d7fbe1851da96a23d1b5a962e404f6868f5e46527e369959c1e7e1e08474698d7edd83
b9caa28082c36a8d3bc4f55af5118afe9b9444cc12c5e08da432b3bd82d6220f8b4564bf90dcdcce
47706ec78a6e5f92d2f504cf2a9d262539053730147a60898ef9e391a684b0668100134ea8a64128
6af0c80f9bb1538397de9d07252c914c0d0f79b6da39a58687df183c3e3fc1e2c0223bc73d5df378
432c152a40645c3e90e40107dc63b72654ef998fd4e86a2507ec7b3d19e5cc9a964b28e7b09222c1
14d7e10a3815e0e87ba853110304561be20d9eb5e10bb0a2292daba8c94cfb16c0568799bd1dd623
0a59b639529650dc527f69cb600b8ee708f351dd692cc1969031f672ba2d46430eafe4b0fe2ce8e6
2c2e8590e8534d7b017a0e3e50b111cffcd6936b1d2d1d73f62bbea2ba4cb23023a6206c189975c0
d9e623893fe8b437bc6d7e90ee9a319c36485d04c5b42281b554da9bd0fcb2f56f292a7ef422ba67
226ebc484c1264a67bed0a12999ed454b44639e08fa142be18f80c82f62c680e5914048e087d05e1
b323e54a387b235f205a375f21fea2a2fc7f4bdc3cd7e47856c19d404899932509804326fcbb2e03
84a02b4429e6fbbae4f07764a5ec84656c34d90d51e529f9e3bc6daaade8ccaddf1a6d162014e427
ac913c6edf320eb4504b2ba15bf58291775472846ad9c85e12407ab6c6bf4fc9e27dc9ef2d5b5812
a7274b85b5a3893a4b2df34f9906e654914cec04da064b3b4ade0e22f48195e10802707137ad7361
bbd7c22d3ae3fd388498ad4a516419658337ff896579c9f11d4e3a6cd3e5c86b28b991e881829935
c643378279ec067a994837d5ca550487f2144d104f479fcc33b644834b3c6b3b995d67e85b31d7b3
2b680380a12dc6b0ea5a91e4d066c63d340e0410e4e3e37f2c8b852dccae92c07581637513a481ac
e48602e815fb21b8c90344e5709d548a5e028287f1b45eb4ddc1640b4b2a2e60f5ccb04175becc97
55691fca627296b28ffd4fe69c76c2383f5124c0077cfbbba867223caa1e80dd6b04fe7c034c012d
410335ecb3d79b71174f4f1903c749096cc7ebddca964d5e7636c05f7a1c81ea3f91923e15845b08
5df36889cf912336be2fc79392ef465385d51d33fb84e6bc86ffaaa7e7d674ab3502a7a6567747f9
8a2a697aa9abe0f013090508a766ab1661ba3942e12c29387f757ad305f411430b437a69f2497039
324258390d37a20a40430d49549dbb52d8365f693198e30787f123cc07e8c1b7cd43226452cde5b6
079889d658d93fa8e4a5e43ca78eaed4186266f15d0b1ee1c5b1f7682af8f4b88f07f8ff4cacc26b
5782ddcce10042e1f2187293432f427a83f5eb1b174726b76fc2f7acdfaf4f6e0eec154ff93a13ed
2e61b46f6806242129149ecc5136bba7b79ccbfd798790fd30856bcfe09071d872b34ceefa56c0d3
075696b154a7326d2f83102182b8bbf69cad589b354390e2d8b664a2396e0a21a3279a7971f2a8a2
b51c85a7992fdf490d3fcd63cc6ce2a1ddb83e293ff400b5e1ed8ce546e27562bac013231c0373d3
b66840c53f246bb8ffb55d68a3e25984416d0402470b22f5186790884c10ffe2a1dba0d2c7381070
49d750a5823f4fb4202326d51a36efef6c278c7c365c9e548f6db625dc8530705ec16d8b8a9b3899
366bd4034cea7a775067bc7209bbee2b4a22cae91af5373892350145b7adde66
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 VGR_SLD_pickup <Virtual>  0
 VGR_train_drop <Virtual>  0
 COPY_VGR_v_drop <Virtual>  0
 PWM_ramp_UP <Virtual>  0
 VGR_HBW_deliver <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 8
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 25
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 29
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 32
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 49
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 53
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 56
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 73
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 77
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 80
NOP

// Rung VGR_Copy_State_F#12
// Offset 81
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 83
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 85
NOP

// Rung VGR_Copy_State_F#15
// Offset 86
RET

// Rung VGR_Copy_State_F#16
// Offset 87
NOP

// Rung VGR_Copy_State_F#17
// Offset 88
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#18
// Offset 133
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#19
// Offset 166
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#20
// Offset 173
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1"

// Rung All_Copy_States#2
// Offset 7
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 9
STRN C2000
SET C2001

// Rung All_Copy_States#4
// Offset 11
STR ST1
AND ST2
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 20
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 28
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 36
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 44
STR ST1
AND ST2
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 53
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4 0x0 MHR1 N300 1"

// Rung HBW_Copy_State_F#2
// Offset 13
STR C28
OUT Y39

// Rung HBW_Copy_State_F#3
// Offset 15
STR C29
OUT Y40

// Rung HBW_Copy_State_F#4
// Offset 17
STR C30
OUT Y41

// Rung HBW_Copy_State_F#5
// Offset 19
RET

// Rung HBW_Copy_State_F#6
// Offset 20
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1"

// Rung HBW_Copy_State_F#7
// Offset 73
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#8
// Offset 114
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#9
// Offset 121
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block VGR_SLD_pickup
$LGCMOD VGR_SLD_pickup

// Rung VGR_SLD_pickup#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_SLD_pickup#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 3121 N1013 1"

// Rung VGR_SLD_pickup#3
// Offset 15
STRE N1010 1
COPY 0x1 "4 0x0 1729 N1011 1 0x0 1456 N1012 1"

// Rung VGR_SLD_pickup#4
// Offset 27
STRE N1010 2
COPY 0x1 "4 0x0 1435 N1011 1 0x0 1665 N1012 1"

// Rung VGR_SLD_pickup#5
// Offset 39
STRE N1010 3
COPY 0x1 "4 0x0 1170 N1011 1 0x0 2321 N1012 1"

// Rung VGR_SLD_pickup#6
// Offset 51
STR ST1
MATH N1014 "N1011 + 15"

// Rung VGR_SLD_pickup#7
// Offset 60
STR ST1
MATH N1015 "N1011 - 15"

// Rung VGR_SLD_pickup#8
// Offset 69
STRN X25
OUT Y22

// Rung VGR_SLD_pickup#9
// Offset 71
STR X25
SET C601

// Rung VGR_SLD_pickup#10
// Offset 73
STRN X26
AND C601
OUT Y24

// Rung VGR_SLD_pickup#11
// Offset 76
STR X26
AND C601
SET C602
RST C601

// Rung VGR_SLD_pickup#12
// Offset 80
STRGE $VGR_Encoder_Rot.Acc N1014
AND C602
OUT Y26

// Rung VGR_SLD_pickup#13
// Offset 86
STRLE $VGR_Encoder_Rot.Acc N1015
AND C602
OUT Y27

// Rung VGR_SLD_pickup#14
// Offset 92
STRLE $VGR_Encoder_Rot.Acc N1014
ANDGE $VGR_Encoder_Rot.Acc N1015
AND C602
SET C603

// Rung VGR_SLD_pickup#15
// Offset 102
STR C603
ANDLE $VGR_Encoder_X.Acc N1012
OUT Y25

// Rung VGR_SLD_pickup#16
// Offset 108
STR C603
ANDGE $VGR_Encoder_X.Acc N1012
SET C604
RST C603
RST C602

// Rung VGR_SLD_pickup#17
// Offset 116
STR C604
CALL VGR_Suction_F 0x1 DST511 "3 3121 N1000 1" "3 C613 C605 1"

// Rung VGR_SLD_pickup#18
// Offset 128
STR C605
ANDN X26
OUT Y24
RST C604

// Rung VGR_SLD_pickup#19
// Offset 132
STR C605
AND X26
SET C600

// Rung VGR_SLD_pickup#20
// Offset 135
NOP

// Rung VGR_SLD_pickup#21
// Offset 136
RET

// End of Code Block VGR_SLD_pickup
$LGCEND VGR_SLD_pickup

// Beginning of Code Block VGR_train_drop
$LGCMOD VGR_train_drop

// Rung VGR_train_drop#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 320 N1007 1 0x0 350 N1008 1"

// Rung VGR_train_drop#2
// Offset 13
STR X25
SET C600

// Rung VGR_train_drop#3
// Offset 15
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_train_drop#4
// Offset 17
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_train_drop#5
// Offset 20
STR X26
SET C601

// Rung VGR_train_drop#6
// Offset 22
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_train_drop#7
// Offset 28
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_train_drop#8
// Offset 34
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_train_drop#9
// Offset 43
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_train_drop#10
// Offset 51
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_train_drop#11
// Offset 60
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 2629 N1000 1" "3 C613 C604 1"

// Rung VGR_train_drop#12
// Offset 72
STR C604
ANDN X26
OUT Y24

// Rung VGR_train_drop#13
// Offset 75
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_train_drop#14
// Offset 78
NOP

// Rung VGR_train_drop#15
// Offset 79
NOP

// Rung VGR_train_drop#16
// Offset 80
RET

// End of Code Block VGR_train_drop
$LGCEND VGR_train_drop

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block VGR_HBW_deliver
$LGCMOD VGR_HBW_deliver

// Rung VGR_HBW_deliver#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_HBW_deliver#2
// Offset 8
STR ST1
COPY 0x1 "4 0x0 5370 N1005 1 0x0 5340 N1006 1"

// Rung VGR_HBW_deliver#3
// Offset 17
STR X25
SET C600

// Rung VGR_HBW_deliver#4
// Offset 19
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_HBW_deliver#5
// Offset 21
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_HBW_deliver#6
// Offset 24
STR X26
SET C601

// Rung VGR_HBW_deliver#7
// Offset 26
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_HBW_deliver#8
// Offset 32
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_HBW_deliver#9
// Offset 38
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_HBW_deliver#10
// Offset 47
STR C602
ANDLE $VGR_Encoder_X.Acc 870
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_HBW_deliver#11
// Offset 55
STRGE $VGR_Encoder_X.Acc 870
ANDLE $VGR_Encoder_X.Acc 900
SET C603

// Rung VGR_HBW_deliver#12
// Offset 64
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 510 N1000 1" "3 C613 C604 1"

// Rung VGR_HBW_deliver#13
// Offset 76
STR C604
ANDN X26
OUT Y24

// Rung VGR_HBW_deliver#14
// Offset 79
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_HBW_deliver#15
// Offset 82
NOP

// Rung VGR_HBW_deliver#16
// Offset 83
NOP

// Rung VGR_HBW_deliver#17
// Offset 84
NOP

// Rung VGR_HBW_deliver#18
// Offset 85
NOP

// Rung VGR_HBW_deliver#19
// Offset 86
RET

// End of Code Block VGR_HBW_deliver
$LGCEND VGR_HBW_deliver

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 20 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 12
STR ST1
AND C2001
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 21
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#6
// Offset 24
STR ST1
AND C2001
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 33
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 37
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 49
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 53
STR ST1
AND C2001
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 62
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 66
STR ST1
AND C2001
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#2
// Offset 8
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 16
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 24
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#6
// Offset 28
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#7
// Offset 31
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#8
// Offset 41
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#9
// Offset 50
SG VGR_Program.S7

// Rung VGR_Program#10
// Offset 52
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#11
// Offset 61
STR C31
OR C1701
JMP VGR_Program.S2
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 71
STR C32
OR C1700
JMP VGR_Program.S3
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 81
STR C33
OR C1702
JMP VGR_Program.S4
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#14
// Offset 91
STR C34
JMP VGR_Program.S5
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#15
// Offset 100
STR C35
JMP VGR_Program.S6
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#16
// Offset 109
STR C36
JMP VGR_Program.S8
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#17
// Offset 118
STR C37
JMP VGR_Program.S9
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#18
// Offset 127
STR C38
JMP VGR_Program.S10
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#19
// Offset 136
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 145
NOP

// Rung VGR_Program#21
// Offset 146
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#22
// Offset 148
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5340 N1006 1 865 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#23
// Offset 168
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#24
// Offset 178
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#25
// Offset 180
STR ST1
ANDN C700
CALL VGR_dropoff 0x1 DST511 "3 3535 N1005 1 3505 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#26
// Offset 201
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C700
SET C701

// Rung VGR_Program#27
// Offset 212
SG VGR_Program.S2

// Rung VGR_Program#28
// Offset 214
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 1 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#29
// Offset 226
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C35
RST C1701

// Rung VGR_Program#30
// Offset 237
SG VGR_Program.S3

// Rung VGR_Program#31
// Offset 239
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 2 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#32
// Offset 251
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1700
SET C35

// Rung VGR_Program#33
// Offset 262
SG VGR_Program.S4

// Rung VGR_Program#34
// Offset 264
STR ST1
CALL VGR_SLD_pickup 0x1 DST511 "3 3 N1010 1" "3 C600 C500 1"

// Rung VGR_Program#35
// Offset 276
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C1702
SET C35

// Rung VGR_Program#36
// Offset 287
SG VGR_Program.S5

// Rung VGR_Program#37
// Offset 289
STR ST1
CALL VGR_HBW_deliver 0x1 DST511 "3" "3 C605 C500 1"

// Rung VGR_Program#38
// Offset 299
STR C500
JMP VGR_Program.S99
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#39
// Offset 308
SG VGR_Program.S6

// Rung VGR_Program#40
// Offset 310
STRN C500
ANDN C501
CALL VGR_dropoff 0x1 DST511 "3 50 N1005 1 20 N1006 1 320 N1007 1 350 N1008 1 2629 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#41
// Offset 331
STR C500
AND ST2
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#42
// Offset 338
STR C501
AND ST2
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"
SET C703

// Rung VGR_Program#43
// Offset 350
STR C502
AND ST2
OR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C35

// Rung VGR_Program#44
// Offset 362
SG VGR_Program.S8

// Rung VGR_Program#45
// Offset 364
STRN C500
ANDN C501
CALL VGR_pickup 0x1 DST511 "3 50 N1005 1 20 N1006 1 40 N1007 1 70 N1008 1 2819 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#46
// Offset 385
STR C500
RST C600
RST C500
SET C501
RST C601
RST C602

// Rung VGR_Program#47
// Offset 391
STR C501
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C502 1"

// Rung VGR_Program#48
// Offset 401
STR C502
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C36

// Rung VGR_Program#49
// Offset 411
SG VGR_Program.S9

// Rung VGR_Program#50
// Offset 413
STRN C500
CALL VGR_dropoff 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2320 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#51
// Offset 433
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C702

// Rung VGR_Program#52
// Offset 443
SG VGR_Program.S10

// Rung VGR_Program#53
// Offset 445
STRN C500
CALL VGR_pickup 0x1 DST511 "3 450 N1005 1 420 N1006 1 268 N1007 1 298 N1008 1 2360 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#54
// Offset 465
STR C501
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C702

// Rung VGR_Program#55
// Offset 475
SG VGR_Program.S11

// Rung VGR_Program#56
// Offset 477
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#57
// Offset 489
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#58
// Offset 499
SG VGR_Program.S20

// Rung VGR_Program#59
// Offset 501
NOP

// Rung VGR_Program#60
// Offset 502
NOP

// Rung VGR_Program#61
// Offset 503
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#62
// Offset 513
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#63
// Offset 521
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#64
// Offset 546
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#65
// Offset 563
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#66
// Offset 567
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#67
// Offset 571
NOP

// Rung VGR_Program#68
// Offset 572
SG VGR_Program.S100

// Rung VGR_Program#69
// Offset 574
NOP

// Rung VGR_Program#70
// Offset 575
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 V1600
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
DUPBOOL
AND ST1
RST C900
POPBOOL
DUPBOOL
AND C840
JMP MPO_Program.S6
POPBOOL
ANDN C840
JMP MPO_Program.S9

// Rung MPO_Program#42
// Offset 185
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 187
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 189
STR X15
TMRDOWN T7 5000
OUT Y43

// Rung MPO_Program#45
// Offset 193
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 195
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 197
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 199
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 203
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 205
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 207
OUT Y47

// Rung MPO_Program#52
// Offset 208
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 210
STR C901
AND C1704
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// Rung SLD_Program#6
// Offset 30
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 32
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 34
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 36
OUT Y30

// Rung SLD_Program#10
// Offset 37
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 39
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 43
STR C1704
TMR T11 1500

// Rung SLD_Program#13
// Offset 46
STR T11.Done
JMP SLD_Program.S2
RST C1703
RST C1704
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#14
// Offset 56
SG SLD_Program.S2

// Rung SLD_Program#15
// Offset 58
TMRDOWN T12 400

// Rung SLD_Program#16
// Offset 60
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#17
// Offset 70
STR T12.Done
ANDGE V3201 19000
ANDLE V3201 21500
SET C1707

// Rung SLD_Program#18
// Offset 80
STR T12.Done
ANDGE V3201 7000
ANDLE V3201 18000
SET C1708

// Rung SLD_Program#19
// Offset 90
STR T12.Done
ANDGE V3201 22000
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#20
// Offset 100
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#21
// Offset 104
SG SLD_Program.S3

// Rung SLD_Program#22
// Offset 106
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#23
// Offset 110
STRN X36
SET C1705

// Rung SLD_Program#24
// Offset 112
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 116
STR C1706
AND C1708
OUT Y32
SET C1701

// Rung SLD_Program#26
// Offset 120
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#27
// Offset 124
STR T16.Done
OUT Y33
SET C1700

// Rung SLD_Program#28
// Offset 127
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#29
// Offset 131
STR T17.Done
OUT Y34
SET C1702

// Rung SLD_Program#30
// Offset 134
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#31
// Offset 139
STR T13.Done
JMP SLD_Program.S4
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#2
// Offset 8
STR ST1
ANDNE N300 0
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#3
// Offset 26
STR C10
EXIT

// Rung HBW_Program#4
// Offset 28
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 36
NOP

// Rung HBW_Program#6
// Offset 37
NOP

// Rung HBW_Program#7
// Offset 38
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 40
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#9
// Offset 43
STRN X11
OUT Y7

// Rung HBW_Program#10
// Offset 45
STR X11
SET C110

// Rung HBW_Program#11
// Offset 47
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#12
// Offset 50
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#13
// Offset 53
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#14
// Offset 56
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#15
// Offset 59
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#16
// Offset 62
NOP

// Rung HBW_Program#17
// Offset 63
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#18
// Offset 65
STR ST1
AND ST2
JMP HBW_Program.S100

// Rung HBW_Program#19
// Offset 68
STRE N300 0
JMP HBW_Program.S98

// Rung HBW_Program#20
// Offset 73
STRNE N300 0
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#21
// Offset 86
SG HBW_Program.S0

// Rung HBW_Program#22
// Offset 88
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#23
// Offset 89
STRN C100
OUT Y50

// Rung HBW_Program#24
// Offset 91
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#25
// Offset 93
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#26
// Offset 98
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#27
// Offset 101
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#28
// Offset 103
NOP

// Rung HBW_Program#29
// Offset 104
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#30
// Offset 106
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#31
// Offset 111
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#32
// Offset 116
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#33
// Offset 118
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#34
// Offset 131
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#35
// Offset 136
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#36
// Offset 138
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#37
// Offset 149
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#38
// Offset 158
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#39
// Offset 160
STR X2
OUT Y48

// Rung HBW_Program#40
// Offset 162
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#41
// Offset 165
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#42
// Offset 167
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#43
// Offset 170
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#44
// Offset 172
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#45
// Offset 174
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#46
// Offset 185
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#47
// Offset 188
NOP

// Rung HBW_Program#48
// Offset 189
NOP

// Rung HBW_Program#49
// Offset 190
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#50
// Offset 192
STRN C100
OUT Y50

// Rung HBW_Program#51
// Offset 194
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#52
// Offset 196
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#53
// Offset 201
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#54
// Offset 203
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#55
// Offset 205
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#56
// Offset 207
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 420"

// Rung HBW_Program#57
// Offset 224
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#58
// Offset 229
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#59
// Offset 234
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#60
// Offset 243
SG HBW_Program.S9

// Rung HBW_Program#61
// Offset 245
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#62
// Offset 257
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#63
// Offset 267
NOP

// Rung HBW_Program#64
// Offset 268
SG HBW_Program.S100

// Rung HBW_Program#65
// Offset 270
STRN X0
AND C2
OUT Y51

// Rung HBW_Program#66
// Offset 273
STRN C2
OR X0
JMP HBW_Program.S101

// Rung HBW_Program#67
// Offset 276
SG HBW_Program.S101

// Rung HBW_Program#68
// Offset 278
STRN X10
AND C5
OUT Y6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#69
// Offset 295
STRN C5
OR X10
JMP HBW_Program.S102

// Rung HBW_Program#70
// Offset 298
SG HBW_Program.S102

// Rung HBW_Program#71
// Offset 300
STRN X11
AND C6
OUT Y7
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_Program#72
// Offset 317
STRN C6
OR X11
JMP HBW_Program.S103

// Rung HBW_Program#73
// Offset 320
SG HBW_Program.S103

// Rung HBW_Program#74
// Offset 322
STRN C100
AND C1
OUT Y50
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_Program#75
// Offset 339
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#76
// Offset 341
STRLE 10000 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#77
// Offset 346
STRN C1
OR C100
JMP HBW_Program.S104

// Rung HBW_Program#78
// Offset 349
SG HBW_Program.S104

// Rung HBW_Program#79
// Offset 351
STRN X3
AND C3
OUT Y5
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#80
// Offset 368
STRN C3
OR X3
JMP HBW_Program.S105

// Rung HBW_Program#81
// Offset 371
SG HBW_Program.S105

// Rung HBW_Program#82
// Offset 373
STRN C101
AND C4
OUT Y4
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_Program#83
// Offset 390
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#84
// Offset 392
STRLE 4000 $HBW_Encoder_Z.Acc
OUT C101

// Rung HBW_Program#85
// Offset 397
STRN C4
OR C101
JMP HBW_Program.S106

// Rung HBW_Program#86
// Offset 400
SG HBW_Program.S106

// Rung HBW_Program#87
// Offset 402
STR C7
OUT Y48
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#88
// Offset 418
STRN X2
ORN C7
JMP HBW_Program.S107

// Rung HBW_Program#89
// Offset 421
SG HBW_Program.S107

// Rung HBW_Program#90
// Offset 423
STR C8
OUT Y49
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_Program#91
// Offset 439
STRN X1
ORN C8
JMP HBW_Program.S100

// Rung HBW_Program#92
// Offset 442
NOP

// Rung HBW_Program#93
// Offset 443
SG HBW_Program.S98

// Rung HBW_Program#94
// Offset 445
STR ST1
JMP HBW_Program.S97

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

